
sra_stmf411ceu6_v.0.0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032dc  0800c578  0800c578  0001c578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f854  0800f854  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f854  0800f854  0001f854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f85c  0800f85c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f85c  0800f85c  0001f85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f860  0800f860  0001f860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b64  200001f0  0800fa50  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d54  0800fa50  00020d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f86  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003060  00000000  00000000  0003a1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0003d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00004823  00000000  00000000  0003e460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015a1f  00000000  00000000  00042c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009ff5f  00000000  00000000  000586a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000f8601  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001178  00000000  00000000  000f8658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006484  00000000  00000000  000f97d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c55c 	.word	0x0800c55c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800c55c 	.word	0x0800c55c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <NEO6_ReceiveUartChar>:
  /* done */
  return token;
}

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800100a:	3301      	adds	r3, #1
 800100c:	425a      	negs	r2, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	bf58      	it	pl
 8001014:	4253      	negpl	r3, r2
 8001016:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	429a      	cmp	r2, r3
 8001022:	d02f      	beq.n	8001084 <NEO6_ReceiveUartChar+0x88>
	}
	else
	{
		//printf("NEO6 receive char");
		//printf(UartReceivedChar);
		if(UartReceivedChar == 13)
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <NEO6_ReceiveUartChar+0xa0>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b0d      	cmp	r3, #13
 800102c:	d114      	bne.n	8001058 <NEO6_ReceiveUartChar+0x5c>
		{
			GpsStateHandler->UartBufferLines++;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001034:	3301      	adds	r3, #1
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <NEO6_ReceiveUartChar+0xa0>)
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	b2d1      	uxtb	r1, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	460a      	mov	r2, r1
 8001054:	711a      	strb	r2, [r3, #4]
 8001056:	e015      	b.n	8001084 <NEO6_ReceiveUartChar+0x88>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <NEO6_ReceiveUartChar+0xa0>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d010      	beq.n	8001084 <NEO6_ReceiveUartChar+0x88>
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <NEO6_ReceiveUartChar+0xa0>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b0a      	cmp	r3, #10
 800106a:	d00b      	beq.n	8001084 <NEO6_ReceiveUartChar+0x88>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <NEO6_ReceiveUartChar+0xa0>)
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	b2d1      	uxtb	r1, r2
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	460a      	mov	r2, r1
 8001082:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2201      	movs	r2, #1
 800108a:	4904      	ldr	r1, [pc, #16]	; (800109c <NEO6_ReceiveUartChar+0xa0>)
 800108c:	4618      	mov	r0, r3
 800108e:	f005 ff1a 	bl	8006ec6 <HAL_UART_Receive_IT>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000220 	.word	0x20000220

080010a0 <NEO6_Init>:
		printf("Vertical dilution of precision: %.2f\n\r", GpsState.Vdop);
	}
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2230      	movs	r2, #48	; 0x30
 800110a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2230      	movs	r2, #48	; 0x30
 8001120:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	GpsStateHandler->PositionValid = 'V';
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2256      	movs	r2, #86	; 0x56
 8001128:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8

	GpsStateHandler->SpeedKilometers = 0;
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
	GpsStateHandler->SpeedKnots = 0;
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0

	GpsStateHandler->Course = 0;
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
	GpsStateHandler->MagneticDeclination =0;
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8

	GpsStateHandler->SatelitesNumber = 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	GpsStateHandler->Quality = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	GpsStateHandler->Dop = 0;
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
	GpsStateHandler->Hdop = 0;
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
	GpsStateHandler->Vdop = 0;
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4903      	ldr	r1, [pc, #12]	; (80011b4 <NEO6_Init+0x114>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f005 fe8d 	bl	8006ec6 <HAL_UART_Receive_IT>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000220 	.word	0x20000220

080011b8 <ILI9341_SPI_Init>:
extern uint8_t SPI1_TX_completed_flag;
//extern static void MX_GPIO_Init(void);
//extern static void MX_SPI1_Init(void);

void ILI9341_SPI_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	/////// ??????????? Нужны ли две функции ниже? ////////////////
	//MX_SPI1_Init();
	//MX_GPIO_Init();
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c2:	4802      	ldr	r0, [pc, #8]	; (80011cc <ILI9341_SPI_Init+0x14>)
 80011c4:	f003 fd58 	bl	8004c78 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020400 	.word	0x40020400

080011d0 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(uint8_t SPI_Data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	SPI1_TX_completed_flag = 0;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <ILI9341_SPI_Send+0x30>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &SPI_Data, 1);
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <ILI9341_SPI_Send+0x34>)
 80011e8:	f005 faf6 	bl	80067d8 <HAL_SPI_Transmit_DMA>
	while (SPI1_TX_completed_flag == 0);
 80011ec:	bf00      	nop
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <ILI9341_SPI_Send+0x30>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0fb      	beq.n	80011ee <ILI9341_SPI_Send+0x1e>
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000004 	.word	0x20000004
 8001204:	20000a8c 	.word	0x20000a8c

08001208 <ILI9341_Write_Command>:

void ILI9341_Write_Command(uint8_t Command)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001218:	480a      	ldr	r0, [pc, #40]	; (8001244 <ILI9341_Write_Command+0x3c>)
 800121a:	f003 fd2d 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2101      	movs	r1, #1
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <ILI9341_Write_Command+0x3c>)
 8001224:	f003 fd28 	bl	8004c78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ffd0 	bl	80011d0 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <ILI9341_Write_Command+0x3c>)
 8001238:	f003 fd1e 	bl	8004c78 <HAL_GPIO_WritePin>

}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40020400 	.word	0x40020400

08001248 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	2101      	movs	r1, #1
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <ILI9341_Write_Data+0x3c>)
 8001258:	f003 fd0e 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <ILI9341_Write_Data+0x3c>)
 8001264:	f003 fd08 	bl	8004c78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ffb0 	bl	80011d0 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <ILI9341_Write_Data+0x3c>)
 8001278:	f003 fcfe 	bl	8004c78 <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020400 	.word	0x40020400

08001288 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	4603      	mov	r3, r0
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	807b      	strh	r3, [r7, #2]
 80012a2:	4613      	mov	r3, r2
 80012a4:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 80012a6:	202a      	movs	r0, #42	; 0x2a
 80012a8:	f7ff ffae 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1 >> 8);
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffc7 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ffc2 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2 >> 8);
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ffbb 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ffb6 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 80012dc:	202b      	movs	r0, #43	; 0x2b
 80012de:	f7ff ff93 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1 >> 8);
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ffac 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 80012f0:	88bb      	ldrh	r3, [r7, #4]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ffa7 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2 >> 8);
 80012fa:	883b      	ldrh	r3, [r7, #0]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ffa0 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8001308:	883b      	ldrh	r3, [r7, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff9b 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8001312:	202c      	movs	r0, #44	; 0x2c
 8001314:	f7ff ff78 	bl	8001208 <ILI9341_Write_Command>
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}

08001320 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2102      	movs	r1, #2
 8001328:	480a      	ldr	r0, [pc, #40]	; (8001354 <ILI9341_Reset+0x34>)
 800132a:	f003 fca5 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800132e:	20c8      	movs	r0, #200	; 0xc8
 8001330:	f002 f9cc 	bl	80036cc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <ILI9341_Reset+0x34>)
 800133c:	f003 fc9c 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001340:	20c8      	movs	r0, #200	; 0xc8
 8001342:	f002 f9c3 	bl	80036cc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2102      	movs	r1, #2
 800134a:	4802      	ldr	r0, [pc, #8]	; (8001354 <ILI9341_Reset+0x34>)
 800134c:	f003 fc94 	bl	8004c78 <HAL_GPIO_WritePin>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40020400 	.word	0x40020400

08001358 <ILI9341_Set_Rotation>:

/*Set rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	uint8_t screen_rotation = Rotation;
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	73fb      	strb	r3, [r7, #15]
	ILI9341_Write_Command(0x36);
 8001366:	2036      	movs	r0, #54	; 0x36
 8001368:	f7ff ff4e 	bl	8001208 <ILI9341_Write_Command>
	HAL_Delay(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f002 f9ad 	bl	80036cc <HAL_Delay>
	switch(screen_rotation)
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	2b03      	cmp	r3, #3
 8001376:	d83b      	bhi.n	80013f0 <ILI9341_Set_Rotation+0x98>
 8001378:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <ILI9341_Set_Rotation+0x28>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	08001391 	.word	0x08001391
 8001384:	080013a9 	.word	0x080013a9
 8001388:	080013c1 	.word	0x080013c1
 800138c:	080013d9 	.word	0x080013d9
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40 | 0x08);
 8001390:	2048      	movs	r0, #72	; 0x48
 8001392:	f7ff ff59 	bl	8001248 <ILI9341_Write_Data>
			LCD_WIDTH = ILI9488_SCREEN_HEIGHT;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <ILI9341_Set_Rotation+0xa4>)
 8001398:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800139c:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9488_SCREEN_WIDTH;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <ILI9341_Set_Rotation+0xa8>)
 80013a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013a4:	801a      	strh	r2, [r3, #0]
			break;
 80013a6:	e024      	b.n	80013f2 <ILI9341_Set_Rotation+0x9a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20 | 0x08);
 80013a8:	2028      	movs	r0, #40	; 0x28
 80013aa:	f7ff ff4d 	bl	8001248 <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9488_SCREEN_WIDTH;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <ILI9341_Set_Rotation+0xa4>)
 80013b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013b4:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9488_SCREEN_HEIGHT;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <ILI9341_Set_Rotation+0xa8>)
 80013b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013bc:	801a      	strh	r2, [r3, #0]
			break;
 80013be:	e018      	b.n	80013f2 <ILI9341_Set_Rotation+0x9a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80 | 0x08);
 80013c0:	2088      	movs	r0, #136	; 0x88
 80013c2:	f7ff ff41 	bl	8001248 <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9488_SCREEN_HEIGHT;
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <ILI9341_Set_Rotation+0xa4>)
 80013c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013cc:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9488_SCREEN_WIDTH;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <ILI9341_Set_Rotation+0xa8>)
 80013d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013d4:	801a      	strh	r2, [r3, #0]
			break;
 80013d6:	e00c      	b.n	80013f2 <ILI9341_Set_Rotation+0x9a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 80013d8:	20e8      	movs	r0, #232	; 0xe8
 80013da:	f7ff ff35 	bl	8001248 <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9488_SCREEN_WIDTH;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <ILI9341_Set_Rotation+0xa4>)
 80013e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013e4:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9488_SCREEN_HEIGHT;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <ILI9341_Set_Rotation+0xa8>)
 80013e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013ec:	801a      	strh	r2, [r3, #0]
			break;
 80013ee:	e000      	b.n	80013f2 <ILI9341_Set_Rotation+0x9a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80013f0:	bf00      	nop
	}
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000002 	.word	0x20000002
 8001400:	20000000 	.word	0x20000000

08001404 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	2102      	movs	r1, #2
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <ILI9341_Enable+0x14>)
 800140e:	f003 fc33 	bl	8004c78 <HAL_GPIO_WritePin>
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020400 	.word	0x40020400

0800141c <ILI9341_Init>:
	HAL_GPIO_WritePin(LCD_LED_PORT, LCD_LED_PIN, GPIO_PIN_RESET);
}*/

/*Initialize and turn On the LCD display*/
void ILI9341_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001420:	f7ff fff0 	bl	8001404 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8001424:	f7ff fec8 	bl	80011b8 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8001428:	f7ff ff7a 	bl	8001320 <ILI9341_Reset>
	// ---
	ILI9341_Write_Command(0xE0);
 800142c:	20e0      	movs	r0, #224	; 0xe0
 800142e:	f7ff feeb 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff ff08 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8001438:	2003      	movs	r0, #3
 800143a:	f7ff ff05 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 800143e:	2009      	movs	r0, #9
 8001440:	f7ff ff02 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8001444:	2008      	movs	r0, #8
 8001446:	f7ff feff 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x16);
 800144a:	2016      	movs	r0, #22
 800144c:	f7ff fefc 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0A);
 8001450:	200a      	movs	r0, #10
 8001452:	f7ff fef9 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x3F);
 8001456:	203f      	movs	r0, #63	; 0x3f
 8001458:	f7ff fef6 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 800145c:	2078      	movs	r0, #120	; 0x78
 800145e:	f7ff fef3 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4C);
 8001462:	204c      	movs	r0, #76	; 0x4c
 8001464:	f7ff fef0 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8001468:	2009      	movs	r0, #9
 800146a:	f7ff feed 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0A);
 800146e:	200a      	movs	r0, #10
 8001470:	f7ff feea 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8001474:	2008      	movs	r0, #8
 8001476:	f7ff fee7 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x16);
 800147a:	2016      	movs	r0, #22
 800147c:	f7ff fee4 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x1A);
 8001480:	201a      	movs	r0, #26
 8001482:	f7ff fee1 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8001486:	200f      	movs	r0, #15
 8001488:	f7ff fede 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0XE1);
 800148c:	20e1      	movs	r0, #225	; 0xe1
 800148e:	f7ff febb 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fed8 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x16);
 8001498:	2016      	movs	r0, #22
 800149a:	f7ff fed5 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x19);
 800149e:	2019      	movs	r0, #25
 80014a0:	f7ff fed2 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f7ff fecf 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80014aa:	200f      	movs	r0, #15
 80014ac:	f7ff fecc 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x05);
 80014b0:	2005      	movs	r0, #5
 80014b2:	f7ff fec9 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x32);
 80014b6:	2032      	movs	r0, #50	; 0x32
 80014b8:	f7ff fec6 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x45);
 80014bc:	2045      	movs	r0, #69	; 0x45
 80014be:	f7ff fec3 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x46);
 80014c2:	2046      	movs	r0, #70	; 0x46
 80014c4:	f7ff fec0 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x04);
 80014c8:	2004      	movs	r0, #4
 80014ca:	f7ff febd 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80014ce:	200e      	movs	r0, #14
 80014d0:	f7ff feba 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0D);
 80014d4:	200d      	movs	r0, #13
 80014d6:	f7ff feb7 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x35);
 80014da:	2035      	movs	r0, #53	; 0x35
 80014dc:	f7ff feb4 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 80014e0:	2037      	movs	r0, #55	; 0x37
 80014e2:	f7ff feb1 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80014e6:	200f      	movs	r0, #15
 80014e8:	f7ff feae 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0XC0);      //Power Control 1
 80014ec:	20c0      	movs	r0, #192	; 0xc0
 80014ee:	f7ff fe8b 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x17);    //Vreg1out
 80014f2:	2017      	movs	r0, #23
 80014f4:	f7ff fea8 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x15);    //Verg2out
 80014f8:	2015      	movs	r0, #21
 80014fa:	f7ff fea5 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0xC1);      //Power Control 2
 80014fe:	20c1      	movs	r0, #193	; 0xc1
 8001500:	f7ff fe82 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x41);    //VGH,VGL
 8001504:	2041      	movs	r0, #65	; 0x41
 8001506:	f7ff fe9f 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0xC5);      //Power Control 3
 800150a:	20c5      	movs	r0, #197	; 0xc5
 800150c:	f7ff fe7c 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff fe99 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);    //Vcom
 8001516:	2012      	movs	r0, #18
 8001518:	f7ff fe96 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x80);
 800151c:	2080      	movs	r0, #128	; 0x80
 800151e:	f7ff fe93 	bl	8001248 <ILI9341_Write_Data>

 	ILI9341_Write_Command(0x36);      //Memory Access
 8001522:	2036      	movs	r0, #54	; 0x36
 8001524:	f7ff fe70 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8001528:	2048      	movs	r0, #72	; 0x48
 800152a:	f7ff fe8d 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x3A);      // Interface Pixel Format
 800152e:	203a      	movs	r0, #58	; 0x3a
 8001530:	f7ff fe6a 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x66); 	  //18 bit
 8001534:	2066      	movs	r0, #102	; 0x66
 8001536:	f7ff fe87 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0XB0);      // Interface Mode Control
 800153a:	20b0      	movs	r0, #176	; 0xb0
 800153c:	f7ff fe64 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x80);     			 //SDO NOT USE
 8001540:	2080      	movs	r0, #128	; 0x80
 8001542:	f7ff fe81 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0xB1);      //Frame rate
 8001546:	20b1      	movs	r0, #177	; 0xb1
 8001548:	f7ff fe5e 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0xA0);    //60Hz
 800154c:	20a0      	movs	r0, #160	; 0xa0
 800154e:	f7ff fe7b 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0xB4);      //Display Inversion Control
 8001552:	20b4      	movs	r0, #180	; 0xb4
 8001554:	f7ff fe58 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x02);    //2-dot
 8001558:	2002      	movs	r0, #2
 800155a:	f7ff fe75 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0XB6); //Display Function Control  RGB/MCU Interface Control
 800155e:	20b6      	movs	r0, #182	; 0xb6
 8001560:	f7ff fe52 	bl	8001208 <ILI9341_Write_Command>

	ILI9341_Write_Data(0x02);    //MCU
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff fe6f 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);    //Source,Gate scan dieection
 800156a:	2002      	movs	r0, #2
 800156c:	f7ff fe6c 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0XE9);      // Set Image Functio
 8001570:	20e9      	movs	r0, #233	; 0xe9
 8001572:	f7ff fe49 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);    // Disable 24 bit data
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff fe66 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0xF7);      // Adjust Control
 800157c:	20f7      	movs	r0, #247	; 0xf7
 800157e:	f7ff fe43 	bl	8001208 <ILI9341_Write_Command>
	ILI9341_Write_Data(0xA9);
 8001582:	20a9      	movs	r0, #169	; 0xa9
 8001584:	f7ff fe60 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x51);
 8001588:	2051      	movs	r0, #81	; 0x51
 800158a:	f7ff fe5d 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 800158e:	202c      	movs	r0, #44	; 0x2c
 8001590:	f7ff fe5a 	bl	8001248 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);    // D7 stream, loose
 8001594:	2082      	movs	r0, #130	; 0x82
 8001596:	f7ff fe57 	bl	8001248 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x11);    //Exit Sleep
 800159a:	2011      	movs	r0, #17
 800159c:	f7ff fe34 	bl	8001208 <ILI9341_Write_Command>

	HAL_Delay(120);
 80015a0:	2078      	movs	r0, #120	; 0x78
 80015a2:	f002 f893 	bl	80036cc <HAL_Delay>

	ILI9341_Write_Command(0x29);    //Display on
 80015a6:	2029      	movs	r0, #41	; 0x29
 80015a8:	f7ff fe2e 	bl	8001208 <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f7ff fed3 	bl	8001358 <ILI9341_Set_Rotation>
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	80fb      	strh	r3, [r7, #6]
 80015c4:	466b      	mov	r3, sp
 80015c6:	461d      	mov	r5, r3
//SENDS COLOUR
	uint8_t r = (Colour & 0xF800) >> 11;
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	0adb      	lsrs	r3, r3, #11
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	77fb      	strb	r3, [r7, #31]
	uint8_t g = (Colour & 0x07E0) >> 5;
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	115b      	asrs	r3, r3, #5
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015da:	77bb      	strb	r3, [r7, #30]
	uint8_t b = Colour & 0x001F;
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	777b      	strb	r3, [r7, #29]

	r = (r * 255) / 31;
 80015e6:	7ffa      	ldrb	r2, [r7, #31]
 80015e8:	4613      	mov	r3, r2
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	4a67      	ldr	r2, [pc, #412]	; (800178c <ILI9341_Draw_Colour_Burst+0x1d4>)
 80015f0:	fb82 1203 	smull	r1, r2, r2, r3
 80015f4:	441a      	add	r2, r3
 80015f6:	1112      	asrs	r2, r2, #4
 80015f8:	17db      	asrs	r3, r3, #31
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	77fb      	strb	r3, [r7, #31]
	g = (g * 255) / 63;
 80015fe:	7fba      	ldrb	r2, [r7, #30]
 8001600:	4613      	mov	r3, r2
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	4a62      	ldr	r2, [pc, #392]	; (8001790 <ILI9341_Draw_Colour_Burst+0x1d8>)
 8001608:	fb82 1203 	smull	r1, r2, r2, r3
 800160c:	441a      	add	r2, r3
 800160e:	1152      	asrs	r2, r2, #5
 8001610:	17db      	asrs	r3, r3, #31
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	77bb      	strb	r3, [r7, #30]
	b = (b * 255) / 31;
 8001616:	7f7a      	ldrb	r2, [r7, #29]
 8001618:	4613      	mov	r3, r2
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	4a5b      	ldr	r2, [pc, #364]	; (800178c <ILI9341_Draw_Colour_Burst+0x1d4>)
 8001620:	fb82 1203 	smull	r1, r2, r2, r3
 8001624:	441a      	add	r2, r3
 8001626:	1112      	asrs	r2, r2, #4
 8001628:	17db      	asrs	r3, r3, #31
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	777b      	strb	r3, [r7, #29]

	uint32_t Buffer_Size = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
	if ((Size * 3) < BURST_MAX_SIZE)
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	f241 12b7 	movw	r2, #4535	; 0x11b7
 800163e:	4293      	cmp	r3, r2
 8001640:	d805      	bhi.n	800164e <ILI9341_Draw_Colour_Burst+0x96>
	{
		Buffer_Size = Size*3;
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
 800164c:	e002      	b.n	8001654 <ILI9341_Draw_Colour_Burst+0x9c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 800164e:	f241 13b8 	movw	r3, #4536	; 0x11b8
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	2101      	movs	r1, #1
 8001658:	484e      	ldr	r0, [pc, #312]	; (8001794 <ILI9341_Draw_Colour_Burst+0x1dc>)
 800165a:	f003 fb0d 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001664:	484b      	ldr	r0, [pc, #300]	; (8001794 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001666:	f003 fb07 	bl	8004c78 <HAL_GPIO_WritePin>

	//unsigned char MSB_color = Colour >> 8;

	unsigned char burst_buffer[Buffer_Size];
 800166a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800166c:	4623      	mov	r3, r4
 800166e:	3b01      	subs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	4620      	mov	r0, r4
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	00cb      	lsls	r3, r1, #3
 8001682:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001686:	00c2      	lsls	r2, r0, #3
 8001688:	4620      	mov	r0, r4
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	00cb      	lsls	r3, r1, #3
 8001698:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800169c:	00c2      	lsls	r2, r0, #3
 800169e:	1de3      	adds	r3, r4, #7
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	ebad 0d03 	sub.w	sp, sp, r3
 80016a8:	466b      	mov	r3, sp
 80016aa:	3300      	adds	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016b2:	e011      	b.n	80016d8 <ILI9341_Draw_Colour_Burst+0x120>
	{
		burst_buffer[j] = r;
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b8:	4413      	add	r3, r2
 80016ba:	7ffa      	ldrb	r2, [r7, #31]
 80016bc:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 80016be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c0:	3301      	adds	r3, #1
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	7fb9      	ldrb	r1, [r7, #30]
 80016c6:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	3302      	adds	r3, #2
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	7f79      	ldrb	r1, [r7, #29]
 80016d0:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 80016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d4:	3303      	adds	r3, #3
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	429a      	cmp	r2, r3
 80016de:	d3e9      	bcc.n	80016b4 <ILI9341_Draw_Colour_Burst+0xfc>
	}

	uint32_t Sending_Size = Size * 3;
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (Size*3 == Buffer_Size)
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d101      	bne.n	80016fc <ILI9341_Draw_Colour_Burst+0x144>
	{
		Sending_Size = Buffer_Size;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 80016fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170a:	fbb3 f2f2 	udiv	r2, r3, r2
 800170e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001710:	fb01 f202 	mul.w	r2, r1, r2
 8001714:	1a9b      	subs	r3, r3, r2
 8001716:	60fb      	str	r3, [r7, #12]
	//uint8_t str[100];
	//uint32_t timer = HAL_GetTick();
	if (Sending_in_Block != 0)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d018      	beq.n	8001750 <ILI9341_Draw_Colour_Burst+0x198>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
 8001722:	e011      	b.n	8001748 <ILI9341_Draw_Colour_Burst+0x190>
		{
			SPI1_TX_completed_flag = 0;
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(HSPI_INSTANCE, (unsigned char*) burst_buffer, Buffer_Size);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172e:	b292      	uxth	r2, r2
 8001730:	4619      	mov	r1, r3
 8001732:	481a      	ldr	r0, [pc, #104]	; (800179c <ILI9341_Draw_Colour_Burst+0x1e4>)
 8001734:	f005 f850 	bl	80067d8 <HAL_SPI_Transmit_DMA>

			while (SPI1_TX_completed_flag == 0);
 8001738:	bf00      	nop
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <ILI9341_Draw_Colour_Burst+0x1e0>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0fb      	beq.n	800173a <ILI9341_Draw_Colour_Burst+0x182>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	3301      	adds	r3, #1
 8001746:	623b      	str	r3, [r7, #32]
 8001748:	6a3a      	ldr	r2, [r7, #32]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d3e9      	bcc.n	8001724 <ILI9341_Draw_Colour_Burst+0x16c>
	//sprintf(str, "%u \n\r", HAL_GetTick()-timer);
	//HAL_UART_Transmit(&huart1, str, strlen((char *)str), 0xFFFF);

//REMAINDER!

	if (Remainder_from_block > 0)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00e      	beq.n	8001774 <ILI9341_Draw_Colour_Burst+0x1bc>
	{
		SPI1_TX_completed_flag = 0;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(HSPI_INSTANCE, (unsigned char*) burst_buffer, Remainder_from_block);
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	b292      	uxth	r2, r2
 8001762:	4619      	mov	r1, r3
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <ILI9341_Draw_Colour_Burst+0x1e4>)
 8001766:	f005 f837 	bl	80067d8 <HAL_SPI_Transmit_DMA>
		while (SPI1_TX_completed_flag == 0);
 800176a:	bf00      	nop
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <ILI9341_Draw_Colour_Burst+0x1e0>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0fb      	beq.n	800176c <ILI9341_Draw_Colour_Burst+0x1b4>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <ILI9341_Draw_Colour_Burst+0x1dc>)
 800177c:	f003 fa7c 	bl	8004c78 <HAL_GPIO_WritePin>
 8001780:	46ad      	mov	sp, r5
}
 8001782:	bf00      	nop
 8001784:	3730      	adds	r7, #48	; 0x30
 8001786:	46bd      	mov	sp, r7
 8001788:	bdb0      	pop	{r4, r5, r7, pc}
 800178a:	bf00      	nop
 800178c:	84210843 	.word	0x84210843
 8001790:	82082083 	.word	0x82082083
 8001794:	40020400 	.word	0x40020400
 8001798:	20000004 	.word	0x20000004
 800179c:	20000a8c 	.word	0x20000a8c

080017a0 <ILI9341_Fill_Screen>:


//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <ILI9341_Fill_Screen+0x44>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <ILI9341_Fill_Screen+0x48>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff fd65 	bl	8001288 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <ILI9341_Fill_Screen+0x44>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <ILI9341_Fill_Screen+0x48>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	fb03 f302 	mul.w	r3, r3, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff feee 	bl	80015b8 <ILI9341_Draw_Colour_Burst>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000002 	.word	0x20000002
 80017e8:	20000000 	.word	0x20000000

080017ec <ILI9341_Draw_Pixel>:


void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
 80017f6:	460b      	mov	r3, r1
 80017f8:	80bb      	strh	r3, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80017fe:	4b86      	ldr	r3, [pc, #536]	; (8001a18 <ILI9341_Draw_Pixel+0x22c>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	88fa      	ldrh	r2, [r7, #6]
 8001806:	429a      	cmp	r2, r3
 8001808:	f080 8101 	bcs.w	8001a0e <ILI9341_Draw_Pixel+0x222>
 800180c:	4b83      	ldr	r3, [pc, #524]	; (8001a1c <ILI9341_Draw_Pixel+0x230>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	88ba      	ldrh	r2, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	f080 80fa 	bcs.w	8001a0e <ILI9341_Draw_Pixel+0x222>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2101      	movs	r1, #1
 800181e:	4880      	ldr	r0, [pc, #512]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 8001820:	f003 fa2a 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182a:	487d      	ldr	r0, [pc, #500]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 800182c:	f003 fa24 	bl	8004c78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8001830:	202a      	movs	r0, #42	; 0x2a
 8001832:	f7ff fccd 	bl	80011d0 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	2101      	movs	r1, #1
 800183a:	4879      	ldr	r0, [pc, #484]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 800183c:	f003 fa1c 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001846:	4876      	ldr	r0, [pc, #472]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 8001848:	f003 fa16 	bl	8004c78 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001852:	4873      	ldr	r0, [pc, #460]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 8001854:	f003 fa10 	bl	8004c78 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	b29b      	uxth	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	743b      	strb	r3, [r7, #16]
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	747b      	strb	r3, [r7, #17]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	3301      	adds	r3, #1
 800186c:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800186e:	b2db      	uxtb	r3, r3
 8001870:	74bb      	strb	r3, [r7, #18]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800187a:	74fb      	strb	r3, [r7, #19]

	SPI1_TX_completed_flag = 0;
 800187c:	4b69      	ldr	r3, [pc, #420]	; (8001a24 <ILI9341_Draw_Pixel+0x238>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, Temp_Buffer, 4);
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	2204      	movs	r2, #4
 8001888:	4619      	mov	r1, r3
 800188a:	4867      	ldr	r0, [pc, #412]	; (8001a28 <ILI9341_Draw_Pixel+0x23c>)
 800188c:	f004 ffa4 	bl	80067d8 <HAL_SPI_Transmit_DMA>
	while (SPI1_TX_completed_flag == 0);
 8001890:	bf00      	nop
 8001892:	4b64      	ldr	r3, [pc, #400]	; (8001a24 <ILI9341_Draw_Pixel+0x238>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0fb      	beq.n	8001892 <ILI9341_Draw_Pixel+0xa6>

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a0:	485f      	ldr	r0, [pc, #380]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 80018a2:	f003 f9e9 	bl	8004c78 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2101      	movs	r1, #1
 80018aa:	485d      	ldr	r0, [pc, #372]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 80018ac:	f003 f9e4 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b6:	485a      	ldr	r0, [pc, #360]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 80018b8:	f003 f9de 	bl	8004c78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 80018bc:	202b      	movs	r0, #43	; 0x2b
 80018be:	f7ff fc87 	bl	80011d0 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2101      	movs	r1, #1
 80018c6:	4856      	ldr	r0, [pc, #344]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 80018c8:	f003 f9d6 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d2:	4853      	ldr	r0, [pc, #332]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 80018d4:	f003 f9d0 	bl	8004c78 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018de:	4850      	ldr	r0, [pc, #320]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 80018e0:	f003 f9ca 	bl	8004c78 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
 80018e4:	88bb      	ldrh	r3, [r7, #4]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	733b      	strb	r3, [r7, #12]
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	737b      	strb	r3, [r7, #13]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 80018f4:	88bb      	ldrh	r3, [r7, #4]
 80018f6:	3301      	adds	r3, #1
 80018f8:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	73bb      	strb	r3, [r7, #14]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	3301      	adds	r3, #1
 8001904:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 8001906:	73fb      	strb	r3, [r7, #15]

	SPI1_TX_completed_flag = 0;
 8001908:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <ILI9341_Draw_Pixel+0x238>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, Temp_Buffer1, 4);
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2204      	movs	r2, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4844      	ldr	r0, [pc, #272]	; (8001a28 <ILI9341_Draw_Pixel+0x23c>)
 8001918:	f004 ff5e 	bl	80067d8 <HAL_SPI_Transmit_DMA>
	while (SPI1_TX_completed_flag == 0);
 800191c:	bf00      	nop
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <ILI9341_Draw_Pixel+0x238>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0fb      	beq.n	800191e <ILI9341_Draw_Pixel+0x132>

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192c:	483c      	ldr	r0, [pc, #240]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 800192e:	f003 f9a3 	bl	8004c78 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2101      	movs	r1, #1
 8001936:	483a      	ldr	r0, [pc, #232]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 8001938:	f003 f99e 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001942:	4837      	ldr	r0, [pc, #220]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 8001944:	f003 f998 	bl	8004c78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8001948:	202c      	movs	r0, #44	; 0x2c
 800194a:	f7ff fc41 	bl	80011d0 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2101      	movs	r1, #1
 8001952:	4833      	ldr	r0, [pc, #204]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 8001954:	f003 f990 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001958:	2201      	movs	r2, #1
 800195a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800195e:	4830      	ldr	r0, [pc, #192]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 8001960:	f003 f98a 	bl	8004c78 <HAL_GPIO_WritePin>

//COLOUR
	uint8_t r = (Colour & 0xF800) >> 11;
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	0adb      	lsrs	r3, r3, #11
 8001968:	b29b      	uxth	r3, r3
 800196a:	75fb      	strb	r3, [r7, #23]
		uint8_t g = (Colour & 0x07E0) >> 5;
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	115b      	asrs	r3, r3, #5
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001976:	75bb      	strb	r3, [r7, #22]
		uint8_t b = Colour & 0x001F;
 8001978:	887b      	ldrh	r3, [r7, #2]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	757b      	strb	r3, [r7, #21]

		r = (r * 255) / 31;
 8001982:	7dfa      	ldrb	r2, [r7, #23]
 8001984:	4613      	mov	r3, r2
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <ILI9341_Draw_Pixel+0x240>)
 800198c:	fb82 1203 	smull	r1, r2, r2, r3
 8001990:	441a      	add	r2, r3
 8001992:	1112      	asrs	r2, r2, #4
 8001994:	17db      	asrs	r3, r3, #31
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	75fb      	strb	r3, [r7, #23]
		g = (g * 255) / 63;
 800199a:	7dba      	ldrb	r2, [r7, #22]
 800199c:	4613      	mov	r3, r2
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	4a23      	ldr	r2, [pc, #140]	; (8001a30 <ILI9341_Draw_Pixel+0x244>)
 80019a4:	fb82 1203 	smull	r1, r2, r2, r3
 80019a8:	441a      	add	r2, r3
 80019aa:	1152      	asrs	r2, r2, #5
 80019ac:	17db      	asrs	r3, r3, #31
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	75bb      	strb	r3, [r7, #22]
		b = (b * 255) / 31;
 80019b2:	7d7a      	ldrb	r2, [r7, #21]
 80019b4:	4613      	mov	r3, r2
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <ILI9341_Draw_Pixel+0x240>)
 80019bc:	fb82 1203 	smull	r1, r2, r2, r3
 80019c0:	441a      	add	r2, r3
 80019c2:	1112      	asrs	r2, r2, #4
 80019c4:	17db      	asrs	r3, r3, #31
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d0:	4813      	ldr	r0, [pc, #76]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 80019d2:	f003 f951 	bl	8004c78 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[3] =
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	723b      	strb	r3, [r7, #8]
 80019da:	7dbb      	ldrb	r3, [r7, #22]
 80019dc:	727b      	strb	r3, [r7, #9]
 80019de:	7d7b      	ldrb	r3, [r7, #21]
 80019e0:	72bb      	strb	r3, [r7, #10]
	{ r, g, b };

	SPI1_TX_completed_flag = 0;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <ILI9341_Draw_Pixel+0x238>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, Temp_Buffer2, 3);
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	2203      	movs	r2, #3
 80019ee:	4619      	mov	r1, r3
 80019f0:	480d      	ldr	r0, [pc, #52]	; (8001a28 <ILI9341_Draw_Pixel+0x23c>)
 80019f2:	f004 fef1 	bl	80067d8 <HAL_SPI_Transmit_DMA>
	while (SPI1_TX_completed_flag == 0);
 80019f6:	bf00      	nop
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <ILI9341_Draw_Pixel+0x238>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0fb      	beq.n	80019f8 <ILI9341_Draw_Pixel+0x20c>

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <ILI9341_Draw_Pixel+0x234>)
 8001a08:	f003 f936 	bl	8004c78 <HAL_GPIO_WritePin>
 8001a0c:	e000      	b.n	8001a10 <ILI9341_Draw_Pixel+0x224>
		return;	//OUT OF BOUNDS!
 8001a0e:	bf00      	nop

}
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000002 	.word	0x20000002
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	20000004 	.word	0x20000004
 8001a28:	20000a8c 	.word	0x20000a8c
 8001a2c:	84210843 	.word	0x84210843
 8001a30:	82082083 	.word	0x82082083

08001a34 <ILI9341_Draw_Rectangle>:

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,	uint16_t Height, uint16_t Colour)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4623      	mov	r3, r4
 8001a44:	80fb      	strh	r3, [r7, #6]
 8001a46:	4603      	mov	r3, r0
 8001a48:	80bb      	strh	r3, [r7, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	807b      	strh	r3, [r7, #2]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <ILI9341_Draw_Rectangle+0xb0>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	88fa      	ldrh	r2, [r7, #6]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d23d      	bcs.n	8001ada <ILI9341_Draw_Rectangle+0xa6>
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <ILI9341_Draw_Rectangle+0xb4>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	88ba      	ldrh	r2, [r7, #4]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d237      	bcs.n	8001ada <ILI9341_Draw_Rectangle+0xa6>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8001a6a:	88fa      	ldrh	r2, [r7, #6]
 8001a6c:	887b      	ldrh	r3, [r7, #2]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <ILI9341_Draw_Rectangle+0xb0>)
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	b292      	uxth	r2, r2
 8001a76:	4293      	cmp	r3, r2
 8001a78:	dd05      	ble.n	8001a86 <ILI9341_Draw_Rectangle+0x52>
	{
		Width = LCD_WIDTH - X;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <ILI9341_Draw_Rectangle+0xb0>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8001a86:	88ba      	ldrh	r2, [r7, #4]
 8001a88:	883b      	ldrh	r3, [r7, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a16      	ldr	r2, [pc, #88]	; (8001ae8 <ILI9341_Draw_Rectangle+0xb4>)
 8001a8e:	8812      	ldrh	r2, [r2, #0]
 8001a90:	b292      	uxth	r2, r2
 8001a92:	4293      	cmp	r3, r2
 8001a94:	dd05      	ble.n	8001aa2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height = LCD_HEIGHT - Y;
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <ILI9341_Draw_Rectangle+0xb4>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	88bb      	ldrh	r3, [r7, #4]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8001aa2:	88fa      	ldrh	r2, [r7, #6]
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29c      	uxth	r4, r3
 8001aae:	88ba      	ldrh	r2, [r7, #4]
 8001ab0:	883b      	ldrh	r3, [r7, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	88b9      	ldrh	r1, [r7, #4]
 8001abc:	88f8      	ldrh	r0, [r7, #6]
 8001abe:	4622      	mov	r2, r4
 8001ac0:	f7ff fbe2 	bl	8001288 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8001ac4:	883b      	ldrh	r3, [r7, #0]
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	8b3b      	ldrh	r3, [r7, #24]
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fd70 	bl	80015b8 <ILI9341_Draw_Colour_Burst>
 8001ad8:	e000      	b.n	8001adc <ILI9341_Draw_Rectangle+0xa8>
		return;
 8001ada:	bf00      	nop
}
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000002 	.word	0x20000002
 8001ae8:	20000000 	.word	0x20000000

08001aec <ILI9341_DrawChar>:

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b08d      	sub	sp, #52	; 0x34
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	4611      	mov	r1, r2
 8001af6:	461a      	mov	r2, r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	460b      	mov	r3, r1
 8001afe:	81bb      	strh	r3, [r7, #12]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b1e      	cmp	r3, #30
 8001b08:	d961      	bls.n	8001bce <ILI9341_DrawChar+0xe2>
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db5d      	blt.n	8001bce <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	785b      	ldrb	r3, [r3, #1]
 8001b1c:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	789b      	ldrb	r3, [r3, #2]
 8001b22:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	78db      	ldrb	r3, [r3, #3]
 8001b28:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	3b20      	subs	r3, #32
 8001b2e:	7ffa      	ldrb	r2, [r7, #31]
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	3304      	adds	r3, #4
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	4413      	add	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_Draw_Rectangle(X, Y, fWidth, fHeight, bgcolor);
 8001b3c:	7fbb      	ldrb	r3, [r7, #30]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	7f7b      	ldrb	r3, [r7, #29]
 8001b42:	b29c      	uxth	r4, r3
 8001b44:	88f9      	ldrh	r1, [r7, #6]
 8001b46:	89b8      	ldrh	r0, [r7, #12]
 8001b48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	f7ff ff71 	bl	8001a34 <ILI9341_Draw_Rectangle>

	for (int j=0; j < fHeight; j++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
 8001b56:	e035      	b.n	8001bc4 <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	e02b      	b.n	8001bb6 <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8001b5e:	7f3b      	ldrb	r3, [r7, #28]
 8001b60:	6a3a      	ldr	r2, [r7, #32]
 8001b62:	fb02 f203 	mul.w	r2, r2, r3
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	10db      	asrs	r3, r3, #3
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	4413      	add	r3, r2
 8001b70:	3301      	adds	r3, #1
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	2201      	movs	r2, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8001b88:	7dfa      	ldrb	r2, [r7, #23]
 8001b8a:	7dbb      	ldrb	r3, [r7, #22]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00d      	beq.n	8001bb0 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_Draw_Pixel(X+i, Y+j, color);
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	89bb      	ldrh	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b298      	uxth	r0, r3
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7ff fe1e 	bl	80017ec <ILI9341_Draw_Pixel>
		for (int i=0; i < fWidth; i++)
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	623b      	str	r3, [r7, #32]
 8001bb6:	7fbb      	ldrb	r3, [r7, #30]
 8001bb8:	6a3a      	ldr	r2, [r7, #32]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dbcf      	blt.n	8001b5e <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc4:	7f7b      	ldrb	r3, [r7, #29]
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbc5      	blt.n	8001b58 <ILI9341_DrawChar+0x6c>
 8001bcc:	e000      	b.n	8001bd0 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 8001bce:	bf00      	nop
			}
		}
	}
}
 8001bd0:	372c      	adds	r7, #44	; 0x2c
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}

08001bd6 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b08a      	sub	sp, #40	; 0x28
 8001bda:	af02      	add	r7, sp, #8
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	4611      	mov	r1, r2
 8001be2:	461a      	mov	r2, r3
 8001be4:	460b      	mov	r3, r1
 8001be6:	80fb      	strh	r3, [r7, #6]
 8001be8:	4613      	mov	r3, r2
 8001bea:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8001bf8:	e02d      	b.n	8001c56 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	7818      	ldrb	r0, [r3, #0]
 8001bfe:	88b9      	ldrh	r1, [r7, #4]
 8001c00:	88fa      	ldrh	r2, [r7, #6]
 8001c02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	f7ff ff6d 	bl	8001aec <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	3b20      	subs	r3, #32
 8001c18:	7ffa      	ldrb	r2, [r7, #31]
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	3304      	adds	r3, #4
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	4413      	add	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	1c9a      	adds	r2, r3, #2
 8001c30:	7fbb      	ldrb	r3, [r7, #30]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	da07      	bge.n	8001c46 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3302      	adds	r3, #2
 8001c42:	80fb      	strh	r3, [r7, #6]
 8001c44:	e004      	b.n	8001c50 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8001c46:	7fbb      	ldrb	r3, [r7, #30]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1cd      	bne.n	8001bfa <ILI9341_DrawText+0x24>
	}
}
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c74:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c84:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c88:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c90:	e000      	b.n	8001c94 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001c92:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001c94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f9      	beq.n	8001c92 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c9e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ca8:	687b      	ldr	r3, [r7, #4]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <DWT_Init+0x28>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <DWT_Init+0x28>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <DWT_Init+0x2c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <DWT_Init+0x2c>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000edf0 	.word	0xe000edf0
 8001ce4:	e0001000 	.word	0xe0001000

08001ce8 <HAL_SPI_TxCpltCallback>:
/* USER CODE BEGIN 0 */
extern char SDPath[4];


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	SPI1_TX_completed_flag = 1;
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_SPI_TxCpltCallback+0x1c>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000004 	.word	0x20000004

08001d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t ii = 0, ret;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d12:	f001 fc69 	bl	80035e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d16:	f000 f913 	bl	8001f40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(5000);
 8001d1a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d1e:	f001 fcd5 	bl	80036cc <HAL_Delay>
  printf("AFTER SysCLOCK INIT \n\r");
 8001d22:	4871      	ldr	r0, [pc, #452]	; (8001ee8 <main+0x1e0>)
 8001d24:	f006 feb6 	bl	8008a94 <iprintf>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d28:	f000 fa8a 	bl	8002240 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d2c:	f000 f9d0 	bl	80020d0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001d30:	f000 fa34 	bl	800219c <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001d34:	f000 fa5c 	bl	80021f0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001d38:	f000 f9f8 	bl	800212c <MX_SPI1_Init>

  //MX_USB_OTG_FS_PCD_Init();
  //MX_SDIO_SD_Init();
  MX_ADC1_Init();
 8001d3c:	f000 f968 	bl	8002010 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 2);
 8001d40:	2202      	movs	r2, #2
 8001d42:	496a      	ldr	r1, [pc, #424]	; (8001eec <main+0x1e4>)
 8001d44:	486a      	ldr	r0, [pc, #424]	; (8001ef0 <main+0x1e8>)
 8001d46:	f001 fd29 	bl	800379c <HAL_ADC_Start_DMA>
  DWT_Init();
 8001d4a:	f7ff ffb5 	bl	8001cb8 <DWT_Init>

  //printf("AFTER dwt INIT \n\r");

  printf("AFTER INIT \n\r");
 8001d4e:	4869      	ldr	r0, [pc, #420]	; (8001ef4 <main+0x1ec>)
 8001d50:	f006 fea0 	bl	8008a94 <iprintf>
  {
	  printf("ERROR in mount filesystem %u", res);
  }*/


  NEO6_Init(&GpsState, &huart2);
 8001d54:	4968      	ldr	r1, [pc, #416]	; (8001ef8 <main+0x1f0>)
 8001d56:	4869      	ldr	r0, [pc, #420]	; (8001efc <main+0x1f4>)
 8001d58:	f7ff f9a2 	bl	80010a0 <NEO6_Init>
  uint32_t Timer = HAL_GetTick();
 8001d5c:	f001 fcaa 	bl	80036b4 <HAL_GetTick>
 8001d60:	61b8      	str	r0, [r7, #24]
  uint32_t Timer1 = HAL_GetTick();
 8001d62:	f001 fca7 	bl	80036b4 <HAL_GetTick>
 8001d66:	6178      	str	r0, [r7, #20]


  //////////////////////////// INIT DISPLAY ////////////////////////////
  //__HAL_SPI_ENABLE(DISP_SPI_PTR);
  //DISP_CS_UNSELECT;
  HAL_Delay(3000);
 8001d68:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d6c:	f001 fcae 	bl	80036cc <HAL_Delay>


  ILI9341_Init(); // инициализация дисплея
 8001d70:	f7ff fb54 	bl	800141c <ILI9341_Init>
  ILI9341_Fill_Screen(WHITE);
 8001d74:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d78:	f7ff fd12 	bl	80017a0 <ILI9341_Fill_Screen>


  //////////////////////// INIT MPU /////////////////////////
  for(ii=1; ii<128; ii++)
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	77fb      	strb	r3, [r7, #31]
 8001d80:	e01c      	b.n	8001dbc <main+0xb4>
      {
          ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(ii<<1), 3, 5);
 8001d82:	7ffb      	ldrb	r3, [r7, #31]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	b299      	uxth	r1, r3
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	485c      	ldr	r0, [pc, #368]	; (8001f00 <main+0x1f8>)
 8001d90:	f003 fbf4 	bl	800557c <HAL_I2C_IsDeviceReady>
 8001d94:	4603      	mov	r3, r0
 8001d96:	74fb      	strb	r3, [r7, #19]
          if (ret != HAL_OK)
 8001d98:	7cfb      	ldrb	r3, [r7, #19]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <main+0x9e>
          {
              printf(" ");
 8001d9e:	2020      	movs	r0, #32
 8001da0:	f006 fe90 	bl	8008ac4 <putchar>
 8001da4:	e007      	b.n	8001db6 <main+0xae>
          }
          else if(ret == HAL_OK)
 8001da6:	7cfb      	ldrb	r3, [r7, #19]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d104      	bne.n	8001db6 <main+0xae>
          {
              printf("0x%X", ii);
 8001dac:	7ffb      	ldrb	r3, [r7, #31]
 8001dae:	4619      	mov	r1, r3
 8001db0:	4854      	ldr	r0, [pc, #336]	; (8001f04 <main+0x1fc>)
 8001db2:	f006 fe6f 	bl	8008a94 <iprintf>
  for(ii=1; ii<128; ii++)
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
 8001db8:	3301      	adds	r3, #1
 8001dba:	77fb      	strb	r3, [r7, #31]
 8001dbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dade      	bge.n	8001d82 <main+0x7a>
              //HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
          }
      }
  HAL_Delay(2000);
 8001dc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dc8:	f001 fc80 	bl	80036cc <HAL_Delay>
  if (!(setupMPU(&mpu, MPU9250_ADDRESS)==1))
 8001dcc:	21d0      	movs	r1, #208	; 0xd0
 8001dce:	484e      	ldr	r0, [pc, #312]	; (8001f08 <main+0x200>)
 8001dd0:	f000 faec 	bl	80023ac <setupMPU>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d017      	beq.n	8001e0a <main+0x102>
  {  // change to your own address
	  char badmpu[] = "Check MPU\n\r";
 8001dda:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <main+0x204>)
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	ca07      	ldmia	r2, {r0, r1, r2}
 8001de0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   	  	  while (1)
   	  	  {
   	  		  ILI9341_DrawText("CHECK MPU", FONT4, 100, 150, BLACK, WHITE);
 8001de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	2300      	movs	r3, #0
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2396      	movs	r3, #150	; 0x96
 8001df0:	2264      	movs	r2, #100	; 0x64
 8001df2:	4947      	ldr	r1, [pc, #284]	; (8001f10 <main+0x208>)
 8001df4:	4847      	ldr	r0, [pc, #284]	; (8001f14 <main+0x20c>)
 8001df6:	f7ff feee 	bl	8001bd6 <ILI9341_DrawText>
   	  		  printf("Check MPU\n\r");
 8001dfa:	4844      	ldr	r0, [pc, #272]	; (8001f0c <main+0x204>)
 8001dfc:	f006 fe4a 	bl	8008a94 <iprintf>
   	  		  //HAL_UART_Transmit(&huart1, badmpu, strlen((char *)badmpu), 0xFFFF);
   	  		  HAL_Delay(5000);
 8001e00:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e04:	f001 fc62 	bl	80036cc <HAL_Delay>
   	  		  ILI9341_DrawText("CHECK MPU", FONT4, 100, 150, BLACK, WHITE);
 8001e08:	e7ec      	b.n	8001de4 <main+0xdc>
          }
  }
  printf("MPU OK");
 8001e0a:	4843      	ldr	r0, [pc, #268]	; (8001f18 <main+0x210>)
 8001e0c:	f006 fe42 	bl	8008a94 <iprintf>
  setMPUSettings(&mpu);
 8001e10:	483d      	ldr	r0, [pc, #244]	; (8001f08 <main+0x200>)
 8001e12:	f001 f88f 	bl	8002f34 <setMPUSettings>
  //calibrate(&mpu);
  //HAL_Delay(10000);


  ILI9341_Fill_Screen(WHITE);
 8001e16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e1a:	f7ff fcc1 	bl	80017a0 <ILI9341_Fill_Screen>
  ILI9341_DrawText("Waiting for gps.", FONT4, 20, 35, BLACK, WHITE);
 8001e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2323      	movs	r3, #35	; 0x23
 8001e2a:	2214      	movs	r2, #20
 8001e2c:	4938      	ldr	r1, [pc, #224]	; (8001f10 <main+0x208>)
 8001e2e:	483b      	ldr	r0, [pc, #236]	; (8001f1c <main+0x214>)
 8001e30:	f7ff fed1 	bl	8001bd6 <ILI9341_DrawText>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    mcuVoltage = ADC_MAX * ADC_REFERENCE_VOLTAGE / adcData[0];
 8001e34:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <main+0x1e4>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb7b 	bl	8000534 <__aeabi_i2d>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	a127      	add	r1, pc, #156	; (adr r1, 8001ee0 <main+0x1d8>)
 8001e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e48:	f7fe fd08 	bl	800085c <__aeabi_ddiv>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fed0 	bl	8000bf8 <__aeabi_d2f>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a31      	ldr	r2, [pc, #196]	; (8001f20 <main+0x218>)
 8001e5c:	6013      	str	r3, [r2, #0]
	    batteryVoltage = 2 * adcData[1] * mcuVoltage / ADC_MAX;
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <main+0x1e4>)
 8001e60:	885b      	ldrh	r3, [r3, #2]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <main+0x218>)
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e76:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001f24 <main+0x21c>
 8001e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <main+0x220>)
 8001e80:	edc3 7a00 	vstr	s15, [r3]
	    if((HAL_GetTick() - Timer) > 500){
 8001e84:	f001 fc16 	bl	80036b4 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e92:	d9cf      	bls.n	8001e34 <main+0x12c>
	    	 if (HAL_GPIO_ReadPin(GPIOA, BTN2_Pin) == GPIO_PIN_SET)
 8001e94:	2102      	movs	r1, #2
 8001e96:	4825      	ldr	r0, [pc, #148]	; (8001f2c <main+0x224>)
 8001e98:	f002 fed6 	bl	8004c48 <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d103      	bne.n	8001eaa <main+0x1a2>
	    		  	  {
	    		  		  printf("Pressed\n\r");
 8001ea2:	4823      	ldr	r0, [pc, #140]	; (8001f30 <main+0x228>)
 8001ea4:	f006 fdf6 	bl	8008a94 <iprintf>
 8001ea8:	e002      	b.n	8001eb0 <main+0x1a8>
	    		  	  }
	    		  	  else
	    		  	  {
	    		  		  printf("Released\n\r");
 8001eaa:	4822      	ldr	r0, [pc, #136]	; (8001f34 <main+0x22c>)
 8001eac:	f006 fdf2 	bl	8008a94 <iprintf>
	    		  	  }
	    	 printf("Battery volts %.2f \n\r", batteryVoltage);
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <main+0x220>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fb4f 	bl	8000558 <__aeabi_f2d>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	481e      	ldr	r0, [pc, #120]	; (8001f38 <main+0x230>)
 8001ec0:	f006 fde8 	bl	8008a94 <iprintf>
	    	 printf("mcuVoltage %.2f \n\r", mcuVoltage);
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <main+0x218>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb45 	bl	8000558 <__aeabi_f2d>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	481a      	ldr	r0, [pc, #104]	; (8001f3c <main+0x234>)
 8001ed4:	f006 fdde 	bl	8008a94 <iprintf>
	    	 Timer = HAL_GetTick();
 8001ed8:	f001 fbec 	bl	80036b4 <HAL_GetTick>
 8001edc:	61b8      	str	r0, [r7, #24]
	    mcuVoltage = ADC_MAX * ADC_REFERENCE_VOLTAGE / adcData[0];
 8001ede:	e7a9      	b.n	8001e34 <main+0x12c>
 8001ee0:	33333333 	.word	0x33333333
 8001ee4:	40b35af3 	.word	0x40b35af3
 8001ee8:	0800c578 	.word	0x0800c578
 8001eec:	20000b88 	.word	0x20000b88
 8001ef0:	20000884 	.word	0x20000884
 8001ef4:	0800c590 	.word	0x0800c590
 8001ef8:	20000ae4 	.word	0x20000ae4
 8001efc:	20000228 	.word	0x20000228
 8001f00:	20000428 	.word	0x20000428
 8001f04:	0800c5a0 	.word	0x0800c5a0
 8001f08:	200008cc 	.word	0x200008cc
 8001f0c:	0800c5b4 	.word	0x0800c5b4
 8001f10:	0800c7f8 	.word	0x0800c7f8
 8001f14:	0800c5a8 	.word	0x0800c5a8
 8001f18:	0800c5c0 	.word	0x0800c5c0
 8001f1c:	0800c5c8 	.word	0x0800c5c8
 8001f20:	2000020c 	.word	0x2000020c
 8001f24:	457ff000 	.word	0x457ff000
 8001f28:	20000210 	.word	0x20000210
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	0800c5dc 	.word	0x0800c5dc
 8001f34:	0800c5e8 	.word	0x0800c5e8
 8001f38:	0800c5f4 	.word	0x0800c5f4
 8001f3c:	0800c60c 	.word	0x0800c60c

08001f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b094      	sub	sp, #80	; 0x50
 8001f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	2230      	movs	r2, #48	; 0x30
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f005 fe74 	bl	8007c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <SystemClock_Config+0xc8>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	4a26      	ldr	r2, [pc, #152]	; (8002008 <SystemClock_Config+0xc8>)
 8001f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f72:	6413      	str	r3, [r2, #64]	; 0x40
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <SystemClock_Config+0xc8>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f80:	2300      	movs	r3, #0
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <SystemClock_Config+0xcc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a20      	ldr	r2, [pc, #128]	; (800200c <SystemClock_Config+0xcc>)
 8001f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b1e      	ldr	r3, [pc, #120]	; (800200c <SystemClock_Config+0xcc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001faa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001fb0:	2319      	movs	r3, #25
 8001fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001fb4:	23c0      	movs	r3, #192	; 0xc0
 8001fb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc0:	f107 0320 	add.w	r3, r7, #32
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 ff35 	bl	8005e34 <HAL_RCC_OscConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fd0:	f000 f9de 	bl	8002390 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	2103      	movs	r1, #3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 f997 	bl	8006324 <HAL_RCC_ClockConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ffc:	f000 f9c8 	bl	8002390 <Error_Handler>
  }
}
 8002000:	bf00      	nop
 8002002:	3750      	adds	r7, #80	; 0x50
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	40007000 	.word	0x40007000

08002010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002016:	463b      	mov	r3, r7
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <MX_ADC1_Init+0xb4>)
 8002024:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <MX_ADC1_Init+0xb8>)
 8002026:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <MX_ADC1_Init+0xb4>)
 800202a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800202e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <MX_ADC1_Init+0xb4>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <MX_ADC1_Init+0xb4>)
 8002038:	2201      	movs	r2, #1
 800203a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <MX_ADC1_Init+0xb4>)
 800203e:	2201      	movs	r2, #1
 8002040:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <MX_ADC1_Init+0xb4>)
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <MX_ADC1_Init+0xb4>)
 800204c:	2200      	movs	r2, #0
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002050:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <MX_ADC1_Init+0xb4>)
 8002052:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <MX_ADC1_Init+0xbc>)
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <MX_ADC1_Init+0xb4>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <MX_ADC1_Init+0xb4>)
 800205e:	2202      	movs	r2, #2
 8002060:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MX_ADC1_Init+0xb4>)
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_ADC1_Init+0xb4>)
 800206c:	2201      	movs	r2, #1
 800206e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002070:	4814      	ldr	r0, [pc, #80]	; (80020c4 <MX_ADC1_Init+0xb4>)
 8002072:	f001 fb4f 	bl	8003714 <HAL_ADC_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800207c:	f000 f988 	bl	8002390 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002080:	2311      	movs	r3, #17
 8002082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002084:	2301      	movs	r3, #1
 8002086:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002088:	2306      	movs	r3, #6
 800208a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	4619      	mov	r1, r3
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <MX_ADC1_Init+0xb4>)
 8002092:	f001 fc91 	bl	80039b8 <HAL_ADC_ConfigChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800209c:	f000 f978 	bl	8002390 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020a0:	2304      	movs	r3, #4
 80020a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80020a4:	2302      	movs	r3, #2
 80020a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a8:	463b      	mov	r3, r7
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_ADC1_Init+0xb4>)
 80020ae:	f001 fc83 	bl	80039b8 <HAL_ADC_ConfigChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020b8:	f000 f96a 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000884 	.word	0x20000884
 80020c8:	40012000 	.word	0x40012000
 80020cc:	0f000001 	.word	0x0f000001

080020d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_I2C1_Init+0x50>)
 80020d6:	4a13      	ldr	r2, [pc, #76]	; (8002124 <MX_I2C1_Init+0x54>)
 80020d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MX_I2C1_Init+0x50>)
 80020dc:	4a12      	ldr	r2, [pc, #72]	; (8002128 <MX_I2C1_Init+0x58>)
 80020de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MX_I2C1_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_I2C1_Init+0x50>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <MX_I2C1_Init+0x50>)
 80020ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <MX_I2C1_Init+0x50>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <MX_I2C1_Init+0x50>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <MX_I2C1_Init+0x50>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_I2C1_Init+0x50>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <MX_I2C1_Init+0x50>)
 800210e:	f002 fdcd 	bl	8004cac <HAL_I2C_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002118:	f000 f93a 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000428 	.word	0x20000428
 8002124:	40005400 	.word	0x40005400
 8002128:	000186a0 	.word	0x000186a0

0800212c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002130:	4b18      	ldr	r3, [pc, #96]	; (8002194 <MX_SPI1_Init+0x68>)
 8002132:	4a19      	ldr	r2, [pc, #100]	; (8002198 <MX_SPI1_Init+0x6c>)
 8002134:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <MX_SPI1_Init+0x68>)
 8002138:	f44f 7282 	mov.w	r2, #260	; 0x104
 800213c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <MX_SPI1_Init+0x68>)
 8002140:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002144:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <MX_SPI1_Init+0x68>)
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <MX_SPI1_Init+0x68>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <MX_SPI1_Init+0x68>)
 8002154:	2200      	movs	r2, #0
 8002156:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_SPI1_Init+0x68>)
 800215a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_SPI1_Init+0x68>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_SPI1_Init+0x68>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_SPI1_Init+0x68>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <MX_SPI1_Init+0x68>)
 8002174:	2200      	movs	r2, #0
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_SPI1_Init+0x68>)
 800217a:	220a      	movs	r2, #10
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_SPI1_Init+0x68>)
 8002180:	f004 faa0 	bl	80066c4 <HAL_SPI_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800218a:	f000 f901 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000a8c 	.word	0x20000a8c
 8002198:	40013000 	.word	0x40013000

0800219c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <MX_USART2_UART_Init+0x50>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021d4:	f004 fe2a 	bl	8006e2c <HAL_UART_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021de:	f000 f8d7 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000ae4 	.word	0x20000ae4
 80021ec:	40004400 	.word	0x40004400

080021f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <MX_DMA_Init+0x4c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a0f      	ldr	r2, [pc, #60]	; (800223c <MX_DMA_Init+0x4c>)
 8002200:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <MX_DMA_Init+0x4c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	2038      	movs	r0, #56	; 0x38
 8002218:	f001 ff59 	bl	80040ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800221c:	2038      	movs	r0, #56	; 0x38
 800221e:	f001 ff72 	bl	8004106 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2044      	movs	r0, #68	; 0x44
 8002228:	f001 ff51 	bl	80040ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800222c:	2044      	movs	r0, #68	; 0x44
 800222e:	f001 ff6a 	bl	8004106 <HAL_NVIC_EnableIRQ>

}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800

08002240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <MX_GPIO_Init+0x104>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a39      	ldr	r2, [pc, #228]	; (8002344 <MX_GPIO_Init+0x104>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b37      	ldr	r3, [pc, #220]	; (8002344 <MX_GPIO_Init+0x104>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <MX_GPIO_Init+0x104>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a32      	ldr	r2, [pc, #200]	; (8002344 <MX_GPIO_Init+0x104>)
 800227c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <MX_GPIO_Init+0x104>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <MX_GPIO_Init+0x104>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a2b      	ldr	r2, [pc, #172]	; (8002344 <MX_GPIO_Init+0x104>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <MX_GPIO_Init+0x104>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	4b25      	ldr	r3, [pc, #148]	; (8002344 <MX_GPIO_Init+0x104>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a24      	ldr	r2, [pc, #144]	; (8002344 <MX_GPIO_Init+0x104>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <MX_GPIO_Init+0x104>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f240 4103 	movw	r1, #1027	; 0x403
 80022cc:	481e      	ldr	r0, [pc, #120]	; (8002348 <MX_GPIO_Init+0x108>)
 80022ce:	f002 fcd3 	bl	8004c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80022d2:	2303      	movs	r3, #3
 80022d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4819      	ldr	r0, [pc, #100]	; (800234c <MX_GPIO_Init+0x10c>)
 80022e6:	f002 fb2b 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 80022ea:	2301      	movs	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	4811      	ldr	r0, [pc, #68]	; (8002348 <MX_GPIO_Init+0x108>)
 8002302:	f002 fb1d 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_CS_Pin;
 8002306:	f240 4302 	movw	r3, #1026	; 0x402
 800230a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230c:	2301      	movs	r3, #1
 800230e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002314:	2302      	movs	r3, #2
 8002316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	480a      	ldr	r0, [pc, #40]	; (8002348 <MX_GPIO_Init+0x108>)
 8002320:	f002 fb0e 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002324:	2304      	movs	r3, #4
 8002326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <MX_GPIO_Init+0x108>)
 8002338:	f002 fb02 	bl	8004940 <HAL_GPIO_Init>

}
 800233c:	bf00      	nop
 800233e:	3728      	adds	r7, #40	; 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40023800 	.word	0x40023800
 8002348:	40020400 	.word	0x40020400
 800234c:	40020000 	.word	0x40020000

08002350 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch){
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fc84 	bl	8001c68 <ITM_SendChar>
	return ch;
 8002360:	687b      	ldr	r3, [r7, #4]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	if(huart == GpsState.neo6_huart)
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_UART_RxCpltCallback+0x20>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d102      	bne.n	8002384 <HAL_UART_RxCpltCallback+0x18>
	{
		NEO6_ReceiveUartChar(&GpsState);
 800237e:	4803      	ldr	r0, [pc, #12]	; (800238c <HAL_UART_RxCpltCallback+0x20>)
 8002380:	f7fe fe3c 	bl	8000ffc <NEO6_ReceiveUartChar>
	}
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000228 	.word	0x20000228

08002390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
}
 8002396:	bf00      	nop
	//printf("Error Handler");
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	 printf("Error Handler");
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <Error_Handler+0x18>)
 800239a:	f006 fb7b 	bl	8008a94 <iprintf>
	  HAL_Delay(1000);
 800239e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a2:	f001 f993 	bl	80036cc <HAL_Delay>
	 printf("Error Handler");
 80023a6:	e7f7      	b.n	8002398 <Error_Handler+0x8>
 80023a8:	0800c620 	.word	0x0800c620

080023ac <setupMPU>:
float zeta = sqrt(3.0f / 4.0f) * PI * (0.0 / 180.0);
double deltaT = 0.0;
uint32_t newTime = 0;
uint32_t oldTime = 0;

uint8_t setupMPU(MPU9250_t *MPU9250, uint8_t addr) {
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b094      	sub	sp, #80	; 0x50
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
	MPU9250SetDefault(MPU9250);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fcc3 	bl	8002d44 <MPU9250SetDefault>
        // addr should be valid for MPU
	char badmpu1[] = "CHECK SETUP\n\r";
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <setupMPU+0xdc>)
 80023c0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80023c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c6:	c407      	stmia	r4!, {r0, r1, r2}
 80023c8:	8023      	strh	r3, [r4, #0]
	printf(badmpu1);
 80023ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023ce:	4618      	mov	r0, r3
 80023d0:	f006 fb60 	bl	8008a94 <iprintf>
	//HAL_UART_Transmit(&huart1, badmpu1, strlen((char *)badmpu1), 0xFFFF);
        if ((addr>>1 < MPU9250_DEFAULT_ADDRESS) || (addr>>1 > MPU9250_DEFAULT_ADDRESS + 7)) {
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	085b      	lsrs	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b67      	cmp	r3, #103	; 0x67
 80023dc:	d904      	bls.n	80023e8 <setupMPU+0x3c>
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b6f      	cmp	r3, #111	; 0x6f
 80023e6:	d90c      	bls.n	8002402 <setupMPU+0x56>
        	char badmpu[] = "Bad Address\n\r";
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <setupMPU+0xe0>)
 80023ea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80023ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f0:	c407      	stmia	r4!, {r0, r1, r2}
 80023f2:	8023      	strh	r3, [r4, #0]
        	printf(badmpu);
 80023f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023f8:	4618      	mov	r0, r3
 80023fa:	f006 fb4b 	bl	8008a94 <iprintf>
        	//HAL_UART_Transmit(&huart1, badmpu, strlen((char *)badmpu), 0xFFFF);
            return 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	e03d      	b.n	800247e <setupMPU+0xd2>
        }
        //mpu_i2c_addr = addr;


        if (isConnectedMPU9250(MPU9250)==1) {
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f848 	bl	8002498 <isConnectedMPU9250>
 8002408:	4603      	mov	r3, r0
 800240a:	2b01      	cmp	r3, #1
 800240c:	d125      	bne.n	800245a <setupMPU+0xae>
        	MPU9250_Init(MPU9250);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fb00 	bl	8002a14 <MPU9250_Init>
            if (isConnectedAK8963(MPU9250)==1)
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f86c 	bl	80024f2 <isConnectedAK8963>
 800241a:	4603      	mov	r3, r0
 800241c:	2b01      	cmp	r3, #1
 800241e:	d108      	bne.n	8002432 <setupMPU+0x86>
                initAK8963(MPU9250);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fa85 	bl	8002930 <initAK8963>
        	printf(badmpu);
        	//HAL_UART_Transmit(&huart1, badmpu, strlen((char *)badmpu), 0xFFFF);
        	MPU9250->has_connected = 0;
            return 0;
        }
        MPU9250->has_connected = 1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
        return 1;
 800242e:	2301      	movs	r3, #1
 8002430:	e025      	b.n	800247e <setupMPU+0xd2>
            	char badmpu[] = "Check AK8963\n\r";
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <setupMPU+0xe4>)
 8002434:	f107 0420 	add.w	r4, r7, #32
 8002438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800243a:	c407      	stmia	r4!, {r0, r1, r2}
 800243c:	8023      	strh	r3, [r4, #0]
 800243e:	3402      	adds	r4, #2
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	7023      	strb	r3, [r4, #0]
            	printf(badmpu);
 8002444:	f107 0320 	add.w	r3, r7, #32
 8002448:	4618      	mov	r0, r3
 800244a:	f006 fb23 	bl	8008a94 <iprintf>
            	MPU9250->has_connected = 0;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
                return 0;
 8002456:	2300      	movs	r3, #0
 8002458:	e011      	b.n	800247e <setupMPU+0xd2>
        	char badmpu[] = "Check MPU ADDRESS\n\r";
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <setupMPU+0xe8>)
 800245c:	f107 040c 	add.w	r4, r7, #12
 8002460:	461d      	mov	r5, r3
 8002462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002466:	682b      	ldr	r3, [r5, #0]
 8002468:	6023      	str	r3, [r4, #0]
        	printf(badmpu);
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	4618      	mov	r0, r3
 8002470:	f006 fb10 	bl	8008a94 <iprintf>
        	MPU9250->has_connected = 0;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
            return 0;
 800247c:	2300      	movs	r3, #0
    }
 800247e:	4618      	mov	r0, r3
 8002480:	3750      	adds	r7, #80	; 0x50
 8002482:	46bd      	mov	sp, r7
 8002484:	bdb0      	pop	{r4, r5, r7, pc}
 8002486:	bf00      	nop
 8002488:	0800c630 	.word	0x0800c630
 800248c:	0800c640 	.word	0x0800c640
 8002490:	0800c650 	.word	0x0800c650
 8002494:	0800c660 	.word	0x0800c660

08002498 <isConnectedMPU9250>:
	            c = c & 0xBF;  // mask 1011111 keeps all the previous bits
	        }
	        writeByte(MPU9250_ADDRESS, PWR_MGMT_1, c);
}

uint8_t isConnectedMPU9250(){
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 800249e:	2175      	movs	r1, #117	; 0x75
 80024a0:	20d0      	movs	r0, #208	; 0xd0
 80024a2:	f000 fbcf 	bl	8002c44 <readByte>
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (c == MPU9250_WHOAMI_DEFAULT_VALUE);
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b71      	cmp	r3, #113	; 0x71
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU9255_WHOAMI_DEFAULT_VALUE);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2b73      	cmp	r3, #115	; 0x73
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	b25a      	sxtb	r2, r3
 80024c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU6500_WHOAMI_DEFAULT_VALUE);
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2b70      	cmp	r3, #112	; 0x70
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	b25a      	sxtb	r2, r3
 80024de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	71bb      	strb	r3, [r7, #6]
	return b;
 80024e8:	79bb      	ldrb	r3, [r7, #6]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <isConnectedAK8963>:
uint8_t isConnectedAK8963(){
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
	uint8_t c = readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
 80024f8:	2100      	movs	r1, #0
 80024fa:	2018      	movs	r0, #24
 80024fc:	f000 fba2 	bl	8002c44 <readByte>
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
	return (c == AK8963_WHOAMI_DEFAULT_VALUE);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	2b48      	cmp	r3, #72	; 0x48
 8002508:	bf0c      	ite	eq
 800250a:	2301      	moveq	r3, #1
 800250c:	2300      	movne	r3, #0
 800250e:	b2db      	uxtb	r3, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <setAccBias>:
float getMagScaleX(MPU9250_t *MPU9250) { return MPU9250->mag_scale[0]; }
float getMagScaleY(MPU9250_t *MPU9250) { return MPU9250->mag_scale[1]; }
float getMagScaleZ(MPU9250_t *MPU9250) { return MPU9250->mag_scale[2]; }
float getTemperature(MPU9250_t *MPU9250) { return MPU9250->temperature; }

void setAccBias(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	ed87 0a02 	vstr	s0, [r7, #8]
 8002524:	edc7 0a01 	vstr	s1, [r7, #4]
 8002528:	ed87 1a00 	vstr	s2, [r7]
	MPU9250->acc_bias[0] = x;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	60da      	str	r2, [r3, #12]
	MPU9250->acc_bias[1] = y;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	611a      	str	r2, [r3, #16]
	MPU9250->acc_bias[2] = z;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	615a      	str	r2, [r3, #20]
       write_accel_offset(MPU9250);
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f860 	bl	8002604 <write_accel_offset>
   }
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <setGyroBias>:
void setGyroBias(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	ed87 0a02 	vstr	s0, [r7, #8]
 8002558:	edc7 0a01 	vstr	s1, [r7, #4]
 800255c:	ed87 1a00 	vstr	s2, [r7]
	   MPU9250->gyro_bias[0] = x;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	619a      	str	r2, [r3, #24]
	   MPU9250->gyro_bias[1] = y;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	61da      	str	r2, [r3, #28]
	   MPU9250->gyro_bias[2] = z;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	621a      	str	r2, [r3, #32]
       write_gyro_offset(MPU9250);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f94e 	bl	8002814 <write_gyro_offset>
   }
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <setMagBias>:
void setMagBias(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	ed87 0a02 	vstr	s0, [r7, #8]
 800258c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002590:	ed87 1a00 	vstr	s2, [r7]
	MPU9250->mag_bias[0] = x;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250->mag_bias[1] = y;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	635a      	str	r2, [r3, #52]	; 0x34
	MPU9250->mag_bias[2] = z;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38
   }
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <setMagScale>:
void setMagScale(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	ed87 0a02 	vstr	s0, [r7, #8]
 80025be:	edc7 0a01 	vstr	s1, [r7, #4]
 80025c2:	ed87 1a00 	vstr	s2, [r7]
	MPU9250->mag_scale[0] = x;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
	MPU9250->mag_scale[1] = y;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
	MPU9250->mag_scale[2] = z;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44
   }
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <setMagneticDeclination>:

void setMagneticDeclination(MPU9250_t *MPU9250, const float d) {
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	ed87 0a00 	vstr	s0, [r7]
	MPU9250->magnetic_declination = d;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	649a      	str	r2, [r3, #72]	; 0x48
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <write_accel_offset>:
	        }  // Remove gravity from the z-axis accelerometer bias calculation
	        else {
	            a_bias[2] += (float)CALIB_ACCEL_SENSITIVITY;
	        }
}
void write_accel_offset(MPU9250_t *MPU9250){
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	        // factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	        // non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	        // compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	        // the accelerometer biases calculated above must be divided by 8.

	        uint8_t read_data[2] = {0};
 800260c:	2300      	movs	r3, #0
 800260e:	843b      	strh	r3, [r7, #32]
	        int16_t acc_bias_reg[3] = {0, 0, 0};                      // A place to hold the factory accelerometer trim biases
 8002610:	2300      	movs	r3, #0
 8002612:	833b      	strh	r3, [r7, #24]
 8002614:	2300      	movs	r3, #0
 8002616:	837b      	strh	r3, [r7, #26]
 8002618:	2300      	movs	r3, #0
 800261a:	83bb      	strh	r3, [r7, #28]
	        readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &read_data[0]);  // Read factory accelerometer trim values
 800261c:	f107 0320 	add.w	r3, r7, #32
 8002620:	2202      	movs	r2, #2
 8002622:	2177      	movs	r1, #119	; 0x77
 8002624:	20d0      	movs	r0, #208	; 0xd0
 8002626:	f000 fb33 	bl	8002c90 <readBytes>
	        acc_bias_reg[0] = ((int16_t)read_data[0] << 8) | read_data[1];
 800262a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	b21a      	sxth	r2, r3
 8002632:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002636:	b21b      	sxth	r3, r3
 8002638:	4313      	orrs	r3, r2
 800263a:	b21b      	sxth	r3, r3
 800263c:	833b      	strh	r3, [r7, #24]
	        readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &read_data[0]);
 800263e:	f107 0320 	add.w	r3, r7, #32
 8002642:	2202      	movs	r2, #2
 8002644:	217a      	movs	r1, #122	; 0x7a
 8002646:	20d0      	movs	r0, #208	; 0xd0
 8002648:	f000 fb22 	bl	8002c90 <readBytes>
	        acc_bias_reg[1] = ((int16_t)read_data[0] << 8) | read_data[1];
 800264c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	b21a      	sxth	r2, r3
 8002654:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002658:	b21b      	sxth	r3, r3
 800265a:	4313      	orrs	r3, r2
 800265c:	b21b      	sxth	r3, r3
 800265e:	837b      	strh	r3, [r7, #26]
	        readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &read_data[0]);
 8002660:	f107 0320 	add.w	r3, r7, #32
 8002664:	2202      	movs	r2, #2
 8002666:	217d      	movs	r1, #125	; 0x7d
 8002668:	20d0      	movs	r0, #208	; 0xd0
 800266a:	f000 fb11 	bl	8002c90 <readBytes>
	        acc_bias_reg[2] = ((int16_t)read_data[0] << 8) | read_data[1];
 800266e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	b21a      	sxth	r2, r3
 8002676:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800267a:	b21b      	sxth	r3, r3
 800267c:	4313      	orrs	r3, r2
 800267e:	b21b      	sxth	r3, r3
 8002680:	83bb      	strh	r3, [r7, #28]

	        int16_t mask_bit[3] = {1, 1, 1};  // Define array to hold mask bit for each accelerometer bias axis
 8002682:	4a63      	ldr	r2, [pc, #396]	; (8002810 <write_accel_offset+0x20c>)
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800268c:	6018      	str	r0, [r3, #0]
 800268e:	3304      	adds	r3, #4
 8002690:	8019      	strh	r1, [r3, #0]
	        for (int i = 0; i < 3; i++) {
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
 8002696:	e06d      	b.n	8002774 <write_accel_offset+0x170>
	            if (acc_bias_reg[i] % 2) {
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026a0:	4413      	add	r3, r2
 80026a2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <write_accel_offset+0xbe>
	                mask_bit[i] = 0;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026ba:	4413      	add	r3, r2
 80026bc:	2200      	movs	r2, #0
 80026be:	f823 2c18 	strh.w	r2, [r3, #-24]
	            }
	            acc_bias_reg[i] -= (int16_t)MPU9250->acc_bias[i] >> 3;  // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026ca:	4413      	add	r3, r2
 80026cc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	3302      	adds	r3, #2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3304      	adds	r3, #4
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e6:	ee17 3a90 	vmov	r3, s15
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	10db      	asrs	r3, r3, #3
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	b21a      	sxth	r2, r3
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002700:	440b      	add	r3, r1
 8002702:	f823 2c10 	strh.w	r2, [r3, #-16]
	            if (mask_bit[i]) {
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800270e:	4413      	add	r3, r2
 8002710:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d019      	beq.n	800274c <write_accel_offset+0x148>
	                acc_bias_reg[i] = acc_bias_reg[i] & ~mask_bit[i];  // Preserve temperature compensation bit
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002720:	4413      	add	r3, r2
 8002722:	f933 2c10 	ldrsh.w	r2, [r3, #-16]
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800272e:	440b      	add	r3, r1
 8002730:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002734:	43db      	mvns	r3, r3
 8002736:	b21b      	sxth	r3, r3
 8002738:	4013      	ands	r3, r2
 800273a:	b21a      	sxth	r2, r3
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002744:	440b      	add	r3, r1
 8002746:	f823 2c10 	strh.w	r2, [r3, #-16]
 800274a:	e010      	b.n	800276e <write_accel_offset+0x16a>
	            } else {
	                acc_bias_reg[i] = acc_bias_reg[i] | 0x0001;  // Preserve temperature compensation bit
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002754:	4413      	add	r3, r2
 8002756:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	b21a      	sxth	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002768:	440b      	add	r3, r1
 800276a:	f823 2c10 	strh.w	r2, [r3, #-16]
	        for (int i = 0; i < 3; i++) {
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	3301      	adds	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	2b02      	cmp	r3, #2
 8002778:	dd8e      	ble.n	8002698 <write_accel_offset+0x94>
	            }
	        }

	        uint8_t write_data[6] = {0};
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	2300      	movs	r3, #0
 8002780:	81bb      	strh	r3, [r7, #12]
	        write_data[0] = (acc_bias_reg[0] >> 8) & 0xFF;
 8002782:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002786:	121b      	asrs	r3, r3, #8
 8002788:	b21b      	sxth	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	723b      	strb	r3, [r7, #8]
	        write_data[1] = (acc_bias_reg[0]) & 0xFF;
 800278e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	727b      	strb	r3, [r7, #9]
	        write_data[2] = (acc_bias_reg[1] >> 8) & 0xFF;
 8002796:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800279a:	121b      	asrs	r3, r3, #8
 800279c:	b21b      	sxth	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	72bb      	strb	r3, [r7, #10]
	        write_data[3] = (acc_bias_reg[1]) & 0xFF;
 80027a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	72fb      	strb	r3, [r7, #11]
	        write_data[4] = (acc_bias_reg[2] >> 8) & 0xFF;
 80027aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027ae:	121b      	asrs	r3, r3, #8
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	733b      	strb	r3, [r7, #12]
	        write_data[5] = (acc_bias_reg[2]) & 0xFF;
 80027b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	737b      	strb	r3, [r7, #13]

	        // Push accelerometer biases to hardware registers
	        writeByte(MPU9250_ADDRESS, XA_OFFSET_H, write_data[0]);
 80027be:	7a3b      	ldrb	r3, [r7, #8]
 80027c0:	461a      	mov	r2, r3
 80027c2:	2177      	movs	r1, #119	; 0x77
 80027c4:	20d0      	movs	r0, #208	; 0xd0
 80027c6:	f000 fa9f 	bl	8002d08 <writeByte>
	        writeByte(MPU9250_ADDRESS, XA_OFFSET_L, write_data[1]);
 80027ca:	7a7b      	ldrb	r3, [r7, #9]
 80027cc:	461a      	mov	r2, r3
 80027ce:	2178      	movs	r1, #120	; 0x78
 80027d0:	20d0      	movs	r0, #208	; 0xd0
 80027d2:	f000 fa99 	bl	8002d08 <writeByte>
	        writeByte(MPU9250_ADDRESS, YA_OFFSET_H, write_data[2]);
 80027d6:	7abb      	ldrb	r3, [r7, #10]
 80027d8:	461a      	mov	r2, r3
 80027da:	217a      	movs	r1, #122	; 0x7a
 80027dc:	20d0      	movs	r0, #208	; 0xd0
 80027de:	f000 fa93 	bl	8002d08 <writeByte>
	        writeByte(MPU9250_ADDRESS, YA_OFFSET_L, write_data[3]);
 80027e2:	7afb      	ldrb	r3, [r7, #11]
 80027e4:	461a      	mov	r2, r3
 80027e6:	217b      	movs	r1, #123	; 0x7b
 80027e8:	20d0      	movs	r0, #208	; 0xd0
 80027ea:	f000 fa8d 	bl	8002d08 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, write_data[4]);
 80027ee:	7b3b      	ldrb	r3, [r7, #12]
 80027f0:	461a      	mov	r2, r3
 80027f2:	217d      	movs	r1, #125	; 0x7d
 80027f4:	20d0      	movs	r0, #208	; 0xd0
 80027f6:	f000 fa87 	bl	8002d08 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, write_data[5]);
 80027fa:	7b7b      	ldrb	r3, [r7, #13]
 80027fc:	461a      	mov	r2, r3
 80027fe:	217e      	movs	r1, #126	; 0x7e
 8002800:	20d0      	movs	r0, #208	; 0xd0
 8002802:	f000 fa81 	bl	8002d08 <writeByte>
}
 8002806:	bf00      	nop
 8002808:	3728      	adds	r7, #40	; 0x28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	0800c7a4 	.word	0x0800c7a4

08002814 <write_gyro_offset>:
void write_gyro_offset(MPU9250_t *MPU9250){
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	        uint8_t gyro_offset_data[6] = {0};
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	2300      	movs	r3, #0
 8002822:	81bb      	strh	r3, [r7, #12]
	        gyro_offset_data[0] = (-(int16_t)MPU9250->gyro_bias[0] / 4 >> 8) & 0xFF;  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	edd3 7a06 	vldr	s15, [r3, #24]
 800282a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800282e:	ee17 3a90 	vmov	r3, s15
 8002832:	b21b      	sxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	da00      	bge.n	800283a <write_gyro_offset+0x26>
 8002838:	3303      	adds	r3, #3
 800283a:	109b      	asrs	r3, r3, #2
 800283c:	425b      	negs	r3, r3
 800283e:	121b      	asrs	r3, r3, #8
 8002840:	b2db      	uxtb	r3, r3
 8002842:	723b      	strb	r3, [r7, #8]
	        gyro_offset_data[1] = (-(int16_t)MPU9250->gyro_bias[0] / 4) & 0xFF;       // Biases are additive, so change sign on calculated average gyro biases
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	edd3 7a06 	vldr	s15, [r3, #24]
 800284a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800284e:	ee17 3a90 	vmov	r3, s15
 8002852:	b21b      	sxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	da00      	bge.n	800285a <write_gyro_offset+0x46>
 8002858:	3303      	adds	r3, #3
 800285a:	109b      	asrs	r3, r3, #2
 800285c:	425b      	negs	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	727b      	strb	r3, [r7, #9]
	        gyro_offset_data[2] = (-(int16_t)MPU9250->gyro_bias[1] / 4 >> 8) & 0xFF;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	edd3 7a07 	vldr	s15, [r3, #28]
 8002868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800286c:	ee17 3a90 	vmov	r3, s15
 8002870:	b21b      	sxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	da00      	bge.n	8002878 <write_gyro_offset+0x64>
 8002876:	3303      	adds	r3, #3
 8002878:	109b      	asrs	r3, r3, #2
 800287a:	425b      	negs	r3, r3
 800287c:	121b      	asrs	r3, r3, #8
 800287e:	b2db      	uxtb	r3, r3
 8002880:	72bb      	strb	r3, [r7, #10]
	        gyro_offset_data[3] = (-(int16_t)MPU9250->gyro_bias[1] / 4) & 0xFF;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	edd3 7a07 	vldr	s15, [r3, #28]
 8002888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800288c:	ee17 3a90 	vmov	r3, s15
 8002890:	b21b      	sxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	da00      	bge.n	8002898 <write_gyro_offset+0x84>
 8002896:	3303      	adds	r3, #3
 8002898:	109b      	asrs	r3, r3, #2
 800289a:	425b      	negs	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	72fb      	strb	r3, [r7, #11]
	        gyro_offset_data[4] = (-(int16_t)MPU9250->gyro_bias[2] / 4 >> 8) & 0xFF;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80028a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028aa:	ee17 3a90 	vmov	r3, s15
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	da00      	bge.n	80028b6 <write_gyro_offset+0xa2>
 80028b4:	3303      	adds	r3, #3
 80028b6:	109b      	asrs	r3, r3, #2
 80028b8:	425b      	negs	r3, r3
 80028ba:	121b      	asrs	r3, r3, #8
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	733b      	strb	r3, [r7, #12]
	        gyro_offset_data[5] = (-(int16_t)MPU9250->gyro_bias[2] / 4) & 0xFF;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80028c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ca:	ee17 3a90 	vmov	r3, s15
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	da00      	bge.n	80028d6 <write_gyro_offset+0xc2>
 80028d4:	3303      	adds	r3, #3
 80028d6:	109b      	asrs	r3, r3, #2
 80028d8:	425b      	negs	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	737b      	strb	r3, [r7, #13]

	        // Push gyro biases to hardware registers
	        writeByte(MPU9250_ADDRESS, XG_OFFSET_H, gyro_offset_data[0]);
 80028de:	7a3b      	ldrb	r3, [r7, #8]
 80028e0:	461a      	mov	r2, r3
 80028e2:	2113      	movs	r1, #19
 80028e4:	20d0      	movs	r0, #208	; 0xd0
 80028e6:	f000 fa0f 	bl	8002d08 <writeByte>
	        writeByte(MPU9250_ADDRESS, XG_OFFSET_L, gyro_offset_data[1]);
 80028ea:	7a7b      	ldrb	r3, [r7, #9]
 80028ec:	461a      	mov	r2, r3
 80028ee:	2114      	movs	r1, #20
 80028f0:	20d0      	movs	r0, #208	; 0xd0
 80028f2:	f000 fa09 	bl	8002d08 <writeByte>
	        writeByte(MPU9250_ADDRESS, YG_OFFSET_H, gyro_offset_data[2]);
 80028f6:	7abb      	ldrb	r3, [r7, #10]
 80028f8:	461a      	mov	r2, r3
 80028fa:	2115      	movs	r1, #21
 80028fc:	20d0      	movs	r0, #208	; 0xd0
 80028fe:	f000 fa03 	bl	8002d08 <writeByte>
	        writeByte(MPU9250_ADDRESS, YG_OFFSET_L, gyro_offset_data[3]);
 8002902:	7afb      	ldrb	r3, [r7, #11]
 8002904:	461a      	mov	r2, r3
 8002906:	2116      	movs	r1, #22
 8002908:	20d0      	movs	r0, #208	; 0xd0
 800290a:	f000 f9fd 	bl	8002d08 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, gyro_offset_data[4]);
 800290e:	7b3b      	ldrb	r3, [r7, #12]
 8002910:	461a      	mov	r2, r3
 8002912:	2117      	movs	r1, #23
 8002914:	20d0      	movs	r0, #208	; 0xd0
 8002916:	f000 f9f7 	bl	8002d08 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, gyro_offset_data[5]);
 800291a:	7b7b      	ldrb	r3, [r7, #13]
 800291c:	461a      	mov	r2, r3
 800291e:	2118      	movs	r1, #24
 8002920:	20d0      	movs	r0, #208	; 0xd0
 8002922:	f000 f9f1 	bl	8002d08 <writeByte>
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <initAK8963>:
        if (n > 0) MPU9250->n_filter_iter = n;
    }


void initAK8963(MPU9250_t *MPU9250)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8002938:	2200      	movs	r2, #0
 800293a:	210a      	movs	r1, #10
 800293c:	2018      	movs	r0, #24
 800293e:	f000 f9e3 	bl	8002d08 <writeByte>
  HAL_Delay(100);
 8002942:	2064      	movs	r0, #100	; 0x64
 8002944:	f000 fec2 	bl	80036cc <HAL_Delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8002948:	220f      	movs	r2, #15
 800294a:	210a      	movs	r1, #10
 800294c:	2018      	movs	r0, #24
 800294e:	f000 f9db 	bl	8002d08 <writeByte>
  HAL_Delay(100);
 8002952:	2064      	movs	r0, #100	; 0x64
 8002954:	f000 feba 	bl	80036cc <HAL_Delay>
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	2203      	movs	r2, #3
 800295e:	2110      	movs	r1, #16
 8002960:	2018      	movs	r0, #24
 8002962:	f000 f995 	bl	8002c90 <readBytes>
  MPU9250->mag_bias_factory[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8002966:	7b3b      	ldrb	r3, [r7, #12]
 8002968:	3b80      	subs	r3, #128	; 0x80
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002972:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002a08 <initAK8963+0xd8>
 8002976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800297a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800297e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  MPU9250->mag_bias_factory[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8002988:	7b7b      	ldrb	r3, [r7, #13]
 800298a:	3b80      	subs	r3, #128	; 0x80
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002994:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002a08 <initAK8963+0xd8>
 8002998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  MPU9250->mag_bias_factory[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 80029aa:	7bbb      	ldrb	r3, [r7, #14]
 80029ac:	3b80      	subs	r3, #128	; 0x80
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002a08 <initAK8963+0xd8>
 80029ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 80029cc:	2200      	movs	r2, #0
 80029ce:	210a      	movs	r1, #10
 80029d0:	2018      	movs	r0, #24
 80029d2:	f000 f999 	bl	8002d08 <writeByte>
  HAL_Delay(100);
 80029d6:	2064      	movs	r0, #100	; 0x64
 80029d8:	f000 fe78 	bl	80036cc <HAL_Delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <initAK8963+0xdc>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	b25a      	sxtb	r2, r3
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <initAK8963+0xe0>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	4313      	orrs	r3, r2
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	210a      	movs	r1, #10
 80029f4:	2018      	movs	r0, #24
 80029f6:	f000 f987 	bl	8002d08 <writeByte>
  HAL_Delay(100);
 80029fa:	2064      	movs	r0, #100	; 0x64
 80029fc:	f000 fe66 	bl	80036cc <HAL_Delay>
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	43800000 	.word	0x43800000
 8002a0c:	20000007 	.word	0x20000007
 8002a10:	20000008 	.word	0x20000008

08002a14 <MPU9250_Init>:

void MPU9250_Init(MPU9250_t *MPU9250){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	// Initialize MPU9250 device
	 // wake up device
	getAres(MPU9250);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f8e1 	bl	8002be4 <getAres>
	getGres(MPU9250);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8aa 	bl	8002b7c <getGres>
	getMres(MPU9250);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f887 	bl	8002b3c <getMres>
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	216b      	movs	r1, #107	; 0x6b
 8002a32:	20d0      	movs	r0, #208	; 0xd0
 8002a34:	f000 f968 	bl	8002d08 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8002a38:	2064      	movs	r0, #100	; 0x64
 8002a3a:	f000 fe47 	bl	80036cc <HAL_Delay>

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8002a3e:	2200      	movs	r2, #0
 8002a40:	216b      	movs	r1, #107	; 0x6b
 8002a42:	20d0      	movs	r0, #208	; 0xd0
 8002a44:	f000 f960 	bl	8002d08 <writeByte>
	HAL_Delay(100);
 8002a48:	2064      	movs	r0, #100	; 0x64
 8002a4a:	f000 fe3f 	bl	80036cc <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8002a4e:	2201      	movs	r2, #1
 8002a50:	216b      	movs	r1, #107	; 0x6b
 8002a52:	20d0      	movs	r0, #208	; 0xd0
 8002a54:	f000 f958 	bl	8002d08 <writeByte>
	HAL_Delay(100);
 8002a58:	2064      	movs	r0, #100	; 0x64
 8002a5a:	f000 fe37 	bl	80036cc <HAL_Delay>

	 // Configure Gyro and Accelerometer
	 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8002a5e:	2203      	movs	r2, #3
 8002a60:	211a      	movs	r1, #26
 8002a62:	20d0      	movs	r0, #208	; 0xd0
 8002a64:	f000 f950 	bl	8002d08 <writeByte>

	 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8002a68:	2204      	movs	r2, #4
 8002a6a:	2119      	movs	r1, #25
 8002a6c:	20d0      	movs	r0, #208	; 0xd0
 8002a6e:	f000 f94b 	bl	8002d08 <writeByte>

	 // Set gyroscope full scale range
	 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	  uint8_t c =  readByte(MPU9250_ADDRESS, GYRO_CONFIG);
 8002a72:	211b      	movs	r1, #27
 8002a74:	20d0      	movs	r0, #208	; 0xd0
 8002a76:	f000 f8e5 	bl	8002c44 <readByte>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                     // Clear self-test bits [7:5]
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x03;                                     // Clear Fchoice bits [1:0]
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	f023 0303 	bic.w	r3, r3, #3
 8002a8c:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                     // Clear GYRO_FS_SEL bits [4:3]
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	f023 0318 	bic.w	r3, r3, #24
 8002a94:	73fb      	strb	r3, [r7, #15]
	  c = c | ((uint8_t)(Gscale) << 3);       // Set full scale range for the gyro
 8002a96:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <MPU9250_Init+0x120>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	b25a      	sxtb	r2, r3
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b25b      	sxtb	r3, r3
 8002aa6:	73fb      	strb	r3, [r7, #15]
	  c = c | (~0x03 & 0x03);   // Set Fchoice for the gyro
	  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c); // Set full scale range for the gyro
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	211b      	movs	r1, #27
 8002aae:	20d0      	movs	r0, #208	; 0xd0
 8002ab0:	f000 f92a 	bl	8002d08 <writeByte>

	 // Set accelerometer configuration
	  c =  readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
 8002ab4:	211c      	movs	r1, #28
 8002ab6:	20d0      	movs	r0, #208	; 0xd0
 8002ab8:	f000 f8c4 	bl	8002c44 <readByte>
 8002abc:	4603      	mov	r3, r0
 8002abe:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                 // Clear self-test bits [7:5]
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                 // Clear ACCEL_FS_SEL bits [4:3]
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	f023 0318 	bic.w	r3, r3, #24
 8002ace:	73fb      	strb	r3, [r7, #15]
	  c = c | ((uint8_t)Ascale << 3);  // Set full scale range for the accelerometer
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <MPU9250_Init+0x124>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	b25a      	sxtb	r2, r3
 8002ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	b25b      	sxtb	r3, r3
 8002ae0:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Set full scale range for the accelerometer
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	211c      	movs	r1, #28
 8002ae8:	20d0      	movs	r0, #208	; 0xd0
 8002aea:	f000 f90d 	bl	8002d08 <writeByte>

	 // Set accelerometer sample rate configuration
	 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
 8002aee:	211d      	movs	r1, #29
 8002af0:	20d0      	movs	r0, #208	; 0xd0
 8002af2:	f000 f8a7 	bl	8002c44 <readByte>
 8002af6:	4603      	mov	r3, r0
 8002af8:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x0F;                                     // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	f023 030f 	bic.w	r3, r3, #15
 8002b00:	73fb      	strb	r3, [r7, #15]
	  c = c | (~(0x01 << 3) & 0x08);    // Set accel_fchoice_b to 1
	  c = c | (0x03 & 0x07);  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	f043 0303 	orr.w	r3, r3, #3
 8002b08:	73fb      	strb	r3, [r7, #15]

	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	211d      	movs	r1, #29
 8002b10:	20d0      	movs	r0, #208	; 0xd0
 8002b12:	f000 f8f9 	bl	8002d08 <writeByte>
	 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	  // Configure Interrupts and Bypass Enable
	  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	  // can join the I2C bus and all can be controlled by the Arduino as master
	   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8002b16:	2222      	movs	r2, #34	; 0x22
 8002b18:	2137      	movs	r1, #55	; 0x37
 8002b1a:	20d0      	movs	r0, #208	; 0xd0
 8002b1c:	f000 f8f4 	bl	8002d08 <writeByte>
	   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 8002b20:	2201      	movs	r2, #1
 8002b22:	2138      	movs	r1, #56	; 0x38
 8002b24:	20d0      	movs	r0, #208	; 0xd0
 8002b26:	f000 f8ef 	bl	8002d08 <writeByte>

}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000006 	.word	0x20000006
 8002b38:	20000005 	.word	0x20000005

08002b3c <getMres>:

void getMres(MPU9250_t *MPU9250) {
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  switch (Mscale)
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <getMres+0x34>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <getMres+0x16>
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d004      	beq.n	8002b5a <getMres+0x1e>
          break;
    case MFS_16BITS:
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8002b50:	e007      	b.n	8002b62 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./8190.; // Proper scale to return milliGauss
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <getMres+0x38>)
 8002b56:	609a      	str	r2, [r3, #8]
          break;
 8002b58:	e003      	b.n	8002b62 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <getMres+0x3c>)
 8002b5e:	609a      	str	r2, [r3, #8]
          break;
 8002b60:	bf00      	nop
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000007 	.word	0x20000007
 8002b74:	40bfebff 	.word	0x40bfebff
 8002b78:	3fbfebff 	.word	0x3fbfebff

08002b7c <getGres>:


void getGres(MPU9250_t *MPU9250) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  switch (Gscale)
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <getGres+0x54>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d81b      	bhi.n	8002bc4 <getGres+0x48>
 8002b8c:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <getGres+0x18>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bad 	.word	0x08002bad
 8002b9c:	08002bb5 	.word	0x08002bb5
 8002ba0:	08002bbd 	.word	0x08002bbd
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          MPU9250->gyro_resolution = 250.0/32768.0;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <getGres+0x58>)
 8002ba8:	605a      	str	r2, [r3, #4]
          break;
 8002baa:	e00b      	b.n	8002bc4 <getGres+0x48>
    case GFS_500DPS:
    	MPU9250->gyro_resolution = 500.0/32768.0;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <getGres+0x5c>)
 8002bb0:	605a      	str	r2, [r3, #4]
          break;
 8002bb2:	e007      	b.n	8002bc4 <getGres+0x48>
    case GFS_1000DPS:
    	MPU9250->gyro_resolution = 1000.0/32768.0;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <getGres+0x60>)
 8002bb8:	605a      	str	r2, [r3, #4]
          break;
 8002bba:	e003      	b.n	8002bc4 <getGres+0x48>
    case GFS_2000DPS:
    	MPU9250->gyro_resolution = 2000.0/32768.0;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <getGres+0x64>)
 8002bc0:	605a      	str	r2, [r3, #4]
          break;
 8002bc2:	bf00      	nop
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	20000006 	.word	0x20000006
 8002bd4:	3bfa0000 	.word	0x3bfa0000
 8002bd8:	3c7a0000 	.word	0x3c7a0000
 8002bdc:	3cfa0000 	.word	0x3cfa0000
 8002be0:	3d7a0000 	.word	0x3d7a0000

08002be4 <getAres>:


void getAres(MPU9250_t *MPU9250) {
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  switch (Ascale)
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <getAres+0x5c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d81f      	bhi.n	8002c34 <getAres+0x50>
 8002bf4:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <getAres+0x18>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002c0d 	.word	0x08002c0d
 8002c00:	08002c17 	.word	0x08002c17
 8002c04:	08002c21 	.word	0x08002c21
 8002c08:	08002c2b 	.word	0x08002c2b
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	MPU9250->acc_resolution = 2.0/32768.0;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002c12:	601a      	str	r2, [r3, #0]
          break;
 8002c14:	e00e      	b.n	8002c34 <getAres+0x50>
    case AFS_4G:
    	MPU9250->acc_resolution = 4.0/32768.0;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002c1c:	601a      	str	r2, [r3, #0]
          break;
 8002c1e:	e009      	b.n	8002c34 <getAres+0x50>
    case AFS_8G:
    	MPU9250->acc_resolution = 8.0/32768.0;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002c26:	601a      	str	r2, [r3, #0]
          break;
 8002c28:	e004      	b.n	8002c34 <getAres+0x50>
    case AFS_16G:
    	MPU9250->acc_resolution = 16.0/32768.0;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002c30:	601a      	str	r2, [r3, #0]
          break;
 8002c32:	bf00      	nop
  }
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	20000005 	.word	0x20000005

08002c44 <readByte>:


char readByte(uint8_t I2C_ADDRESS, uint8_t RegAddr){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	460a      	mov	r2, r1
 8002c4e:	71fb      	strb	r3, [r7, #7]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71bb      	strb	r3, [r7, #6]
	char data[1];
	char data_write[1];
	data_write[0] = RegAddr;
 8002c54:	79bb      	ldrb	r3, [r7, #6]
 8002c56:	723b      	strb	r3, [r7, #8]

	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	b299      	uxth	r1, r3
 8002c5c:	f107 0208 	add.w	r2, r7, #8
 8002c60:	2364      	movs	r3, #100	; 0x64
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2301      	movs	r3, #1
 8002c66:	4809      	ldr	r0, [pc, #36]	; (8002c8c <readByte+0x48>)
 8002c68:	f002 f964 	bl	8004f34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS, data, (uint16_t)1, (uint16_t)100);
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	b299      	uxth	r1, r3
 8002c70:	f107 020c 	add.w	r2, r7, #12
 8002c74:	2364      	movs	r3, #100	; 0x64
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	4804      	ldr	r0, [pc, #16]	; (8002c8c <readByte+0x48>)
 8002c7c:	f002 fa58 	bl	8005130 <HAL_I2C_Master_Receive>

	return data[0];
 8002c80:	7b3b      	ldrb	r3, [r7, #12]

}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000428 	.word	0x20000428

08002c90 <readBytes>:
void readBytes(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t count, uint8_t * dest)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	71bb      	strb	r3, [r7, #6]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	717b      	strb	r3, [r7, #5]
	char data[14];
	char data_write[1];
	data_write[0] = RegAddr;
 8002ca4:	79bb      	ldrb	r3, [r7, #6]
 8002ca6:	723b      	strb	r3, [r7, #8]
	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	b299      	uxth	r1, r3
 8002cac:	f107 0208 	add.w	r2, r7, #8
 8002cb0:	2364      	movs	r3, #100	; 0x64
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	4813      	ldr	r0, [pc, #76]	; (8002d04 <readBytes+0x74>)
 8002cb8:	f002 f93c 	bl	8004f34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(I2C_ADDRESS), data, count, (uint16_t)100);
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	b299      	uxth	r1, r3
 8002cc0:	797b      	ldrb	r3, [r7, #5]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f107 020c 	add.w	r2, r7, #12
 8002cc8:	2064      	movs	r0, #100	; 0x64
 8002cca:	9000      	str	r0, [sp, #0]
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <readBytes+0x74>)
 8002cce:	f002 fa2f 	bl	8005130 <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e00b      	b.n	8002cf0 <readBytes+0x60>
			dest[ii] = data[ii];
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f107 010c 	add.w	r1, r7, #12
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	440a      	add	r2, r1
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3301      	adds	r3, #1
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	797b      	ldrb	r3, [r7, #5]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	dbef      	blt.n	8002cd8 <readBytes+0x48>
		}

}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000428 	.word	0x20000428

08002d08 <writeByte>:

void writeByte(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t data){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
 8002d12:	460b      	mov	r3, r1
 8002d14:	71bb      	strb	r3, [r7, #6]
 8002d16:	4613      	mov	r3, r2
 8002d18:	717b      	strb	r3, [r7, #5]
	char data_write[2];
	data_write[0] = RegAddr;
 8002d1a:	79bb      	ldrb	r3, [r7, #6]
 8002d1c:	733b      	strb	r3, [r7, #12]
	data_write[1] = data;
 8002d1e:	797b      	ldrb	r3, [r7, #5]
 8002d20:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 2, 100);
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	b299      	uxth	r1, r3
 8002d26:	f107 020c 	add.w	r2, r7, #12
 8002d2a:	2364      	movs	r3, #100	; 0x64
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	4803      	ldr	r0, [pc, #12]	; (8002d40 <writeByte+0x38>)
 8002d32:	f002 f8ff 	bl	8004f34 <HAL_I2C_Master_Transmit>
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000428 	.word	0x20000428

08002d44 <MPU9250SetDefault>:

void MPU9250SetDefault(MPU9250_t *MPU9250){
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	MPU9250 -> acc_resolution = 0.;                // scale resolutions per LSB for the sensors
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
	MPU9250 -> gyro_resolution = 0.;               // scale resolutions per LSB for the sensors
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	605a      	str	r2, [r3, #4]
	MPU9250 -> mag_resolution = 0.;                // scale resolutions per LSB for the sensors
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]

		// Calibration Parameters
	MPU9250 -> acc_bias[0] = 0.;   // acc calibration value in ACCEL_FS_SEL: 2g
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]
	MPU9250 -> acc_bias[1] = 0.;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	611a      	str	r2, [r3, #16]
	MPU9250 -> acc_bias[2] = 0.;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
	MPU9250 -> gyro_bias[0] = 0.;  // gyro calibration value in GYRO_FS_SEL: 250dps
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	619a      	str	r2, [r3, #24]
	MPU9250 -> gyro_bias[1] = 0.;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	61da      	str	r2, [r3, #28]
	MPU9250 -> gyro_bias[2] = 0.;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	621a      	str	r2, [r3, #32]
	MPU9250 -> mag_bias_factory[0] = 0.;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24
	MPU9250 -> mag_bias_factory[1] = 0.;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250 -> mag_bias_factory[2] = 0.;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c

	MPU9250 -> mag_bias[0] = 0.;  // mag calibration value in MAG_OUTPUT_BITS: 16BITS
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250 -> mag_bias[1] = 0.;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	635a      	str	r2, [r3, #52]	; 0x34
	MPU9250 -> mag_bias[2] = 0.;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
	MPU9250 -> mag_scale[0] = 1.;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dca:	63da      	str	r2, [r3, #60]	; 0x3c
	MPU9250 -> mag_scale[1] = 1.;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
	MPU9250 -> mag_scale[2] = 1.;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44
	MPU9250 -> magnetic_declination  = 10.91;  // Moscow, 24th June
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a54      	ldr	r2, [pc, #336]	; (8002f30 <MPU9250SetDefault+0x1ec>)
 8002de0:	649a      	str	r2, [r3, #72]	; 0x48

		    // Temperature
	MPU9250 -> temperature_count = 0.;  // temperature raw count output
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	MPU9250 -> temperature = 0.;        // Stores the real internal chip temperature in degrees Celsius
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	651a      	str	r2, [r3, #80]	; 0x50

		// Self Test
	MPU9250 -> self_test_result[0] = 0.;  // holds results of gyro and accelerometer self test
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54
	MPU9250 -> self_test_result[1] = 0.;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	659a      	str	r2, [r3, #88]	; 0x58
	MPU9250 -> self_test_result[2] = 0.;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	65da      	str	r2, [r3, #92]	; 0x5c
	MPU9250 -> self_test_result[3] = 0.;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	661a      	str	r2, [r3, #96]	; 0x60
	MPU9250 -> self_test_result[4] = 0.;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	665a      	str	r2, [r3, #100]	; 0x64
	MPU9250 -> self_test_result[5] = 0.;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	669a      	str	r2, [r3, #104]	; 0x68

		// IMU Data
	MPU9250 -> a[0] = 0.;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	66da      	str	r2, [r3, #108]	; 0x6c
	MPU9250 -> a[1] = 0.;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	671a      	str	r2, [r3, #112]	; 0x70
	MPU9250 -> a[2] = 0.;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	675a      	str	r2, [r3, #116]	; 0x74
	MPU9250 -> g[0] = 0.;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	679a      	str	r2, [r3, #120]	; 0x78
	MPU9250 -> g[1] = 0.;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	67da      	str	r2, [r3, #124]	; 0x7c
	MPU9250 -> g[2] = 0.;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MPU9250 -> m[0] = 0.;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	MPU9250 -> m[1] = 0.;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	MPU9250 -> m[2] = 0.;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	MPU9250 -> q[0] = 1.;  // vector to hold quaternion
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	MPU9250 -> q[1] = 0.;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	MPU9250 -> q[2] = 0.;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	MPU9250 -> q[3] = 0.;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	MPU9250 -> rpy[0] = 0.;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	MPU9250 -> rpy[1] = 0.;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	MPU9250 -> rpy[2] = 0.;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	MPU9250 -> lin_acc[0] = 0.;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	MPU9250 -> lin_acc[1] = 0.;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	MPU9250 -> lin_acc[2] = 0.;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	MPU9250 -> earth_acc[0] = 0.;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	MPU9250 -> earth_acc[1] = 0.;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	MPU9250 -> earth_acc[2] = 0.;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	MPU9250 -> earth_gyro[0] = 0.;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	MPU9250 -> earth_gyro[1] = 0.;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	MPU9250 -> earth_gyro[2] = 0.;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc


	MPU9250 -> has_connected = 0;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	MPU9250 -> n_filter_iter = 10;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	220a      	movs	r2, #10
 8002f1e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	412e8f5c 	.word	0x412e8f5c

08002f34 <setMPUSettings>:
	        print_float(str, mx);
	        print_float(str, my);
	        print_float(str, mz);*/
}

void setMPUSettings(MPU9250_t *MPU9250){
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	/*setAccBias(MPU9250, 16.2781, -10.6079, 22.4793);
	setGyroBias(MPU9250, -0.4498, -0.8954, 0.25);
	setMagBias(MPU9250, 42.8906, 47.3438, -189.9922);
	setMagScale(MPU9250, 1.2164, 1.2381, 0.7298);*/

	setAccBias(MPU9250, -1.1047, -15.8875, 10.5774);
 8002f3c:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8002f98 <setMPUSettings+0x64>
 8002f40:	eddf 0a16 	vldr	s1, [pc, #88]	; 8002f9c <setMPUSettings+0x68>
 8002f44:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002fa0 <setMPUSettings+0x6c>
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fae5 	bl	8002518 <setAccBias>
	setGyroBias(MPU9250, -0.6187, -1.2439, 0.7143);
 8002f4e:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8002fa4 <setMPUSettings+0x70>
 8002f52:	eddf 0a15 	vldr	s1, [pc, #84]	; 8002fa8 <setMPUSettings+0x74>
 8002f56:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002fac <setMPUSettings+0x78>
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff faf6 	bl	800254c <setGyroBias>
	setMagBias(MPU9250, 77.4414, 184.6406, -387.9961);
 8002f60:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8002fb0 <setMPUSettings+0x7c>
 8002f64:	eddf 0a13 	vldr	s1, [pc, #76]	; 8002fb4 <setMPUSettings+0x80>
 8002f68:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002fb8 <setMPUSettings+0x84>
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff fb07 	bl	8002580 <setMagBias>
	setMagScale(MPU9250, 1.1365, 1.1623, 0.7938);
 8002f72:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8002fbc <setMPUSettings+0x88>
 8002f76:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002fc0 <setMPUSettings+0x8c>
 8002f7a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002fc4 <setMPUSettings+0x90>
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff fb17 	bl	80025b2 <setMagScale>


	setMagneticDeclination(MPU9250, 10.91);
 8002f84:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002fc8 <setMPUSettings+0x94>
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fb2b 	bl	80025e4 <setMagneticDeclination>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	41293d08 	.word	0x41293d08
 8002f9c:	c17e3333 	.word	0xc17e3333
 8002fa0:	bf8d66cf 	.word	0xbf8d66cf
 8002fa4:	3f36dc5d 	.word	0x3f36dc5d
 8002fa8:	bf9f381d 	.word	0xbf9f381d
 8002fac:	bf1e6320 	.word	0xbf1e6320
 8002fb0:	c3c1ff80 	.word	0xc3c1ff80
 8002fb4:	4338a3fe 	.word	0x4338a3fe
 8002fb8:	429ae1ff 	.word	0x429ae1ff
 8002fbc:	3f4b367a 	.word	0x3f4b367a
 8002fc0:	3f94c63f 	.word	0x3f94c63f
 8002fc4:	3f9178d5 	.word	0x3f9178d5
 8002fc8:	412e8f5c 	.word	0x412e8f5c

08002fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_MspInit+0x4c>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <HAL_MspInit+0x4c>)
 8002fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <HAL_MspInit+0x4c>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_MspInit+0x4c>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a08      	ldr	r2, [pc, #32]	; (8003018 <HAL_MspInit+0x4c>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_MspInit+0x4c>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800

0800301c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <HAL_ADC_MspInit+0xdc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d157      	bne.n	80030ee <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	4b2e      	ldr	r3, [pc, #184]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4a2d      	ldr	r2, [pc, #180]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b24      	ldr	r3, [pc, #144]	; (80030fc <HAL_ADC_MspInit+0xe0>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BAT_LWL_Pin;
 8003076:	2310      	movs	r3, #16
 8003078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800307a:	2303      	movs	r3, #3
 800307c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_LWL_GPIO_Port, &GPIO_InitStruct);
 8003082:	f107 0314 	add.w	r3, r7, #20
 8003086:	4619      	mov	r1, r3
 8003088:	481d      	ldr	r0, [pc, #116]	; (8003100 <HAL_ADC_MspInit+0xe4>)
 800308a:	f001 fc59 	bl	8004940 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 8003090:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <HAL_ADC_MspInit+0xec>)
 8003092:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 8003096:	2200      	movs	r2, #0
 8003098:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030b6:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030cc:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030d2:	480c      	ldr	r0, [pc, #48]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030d4:	f001 f832 	bl	800413c <HAL_DMA_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80030de:	f7ff f957 	bl	8002390 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
 80030e8:	4a06      	ldr	r2, [pc, #24]	; (8003104 <HAL_ADC_MspInit+0xe8>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030ee:	bf00      	nop
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40012000 	.word	0x40012000
 80030fc:	40023800 	.word	0x40023800
 8003100:	40020000 	.word	0x40020000
 8003104:	200009a8 	.word	0x200009a8
 8003108:	40026410 	.word	0x40026410

0800310c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a19      	ldr	r2, [pc, #100]	; (8003190 <HAL_I2C_MspInit+0x84>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d12b      	bne.n	8003186 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_I2C_MspInit+0x88>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a17      	ldr	r2, [pc, #92]	; (8003194 <HAL_I2C_MspInit+0x88>)
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_I2C_MspInit+0x88>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800314a:	23c0      	movs	r3, #192	; 0xc0
 800314c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800314e:	2312      	movs	r3, #18
 8003150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800315a:	2304      	movs	r3, #4
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315e:	f107 0314 	add.w	r3, r7, #20
 8003162:	4619      	mov	r1, r3
 8003164:	480c      	ldr	r0, [pc, #48]	; (8003198 <HAL_I2C_MspInit+0x8c>)
 8003166:	f001 fbeb 	bl	8004940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_I2C_MspInit+0x88>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <HAL_I2C_MspInit+0x88>)
 8003174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_I2C_MspInit+0x88>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003186:	bf00      	nop
 8003188:	3728      	adds	r7, #40	; 0x28
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40005400 	.word	0x40005400
 8003194:	40023800 	.word	0x40023800
 8003198:	40020400 	.word	0x40020400

0800319c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a34      	ldr	r2, [pc, #208]	; (800328c <HAL_SPI_MspInit+0xf0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d161      	bne.n	8003282 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	4b33      	ldr	r3, [pc, #204]	; (8003290 <HAL_SPI_MspInit+0xf4>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	4a32      	ldr	r2, [pc, #200]	; (8003290 <HAL_SPI_MspInit+0xf4>)
 80031c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031cc:	6453      	str	r3, [r2, #68]	; 0x44
 80031ce:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_SPI_MspInit+0xf4>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b2c      	ldr	r3, [pc, #176]	; (8003290 <HAL_SPI_MspInit+0xf4>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <HAL_SPI_MspInit+0xf4>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_SPI_MspInit+0xf4>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80031f6:	23a0      	movs	r3, #160	; 0xa0
 80031f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003202:	2303      	movs	r3, #3
 8003204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003206:	2305      	movs	r3, #5
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	4820      	ldr	r0, [pc, #128]	; (8003294 <HAL_SPI_MspInit+0xf8>)
 8003212:	f001 fb95 	bl	8004940 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 8003218:	4a20      	ldr	r2, [pc, #128]	; (800329c <HAL_SPI_MspInit+0x100>)
 800321a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 800321e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003222:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003224:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 8003226:	2240      	movs	r2, #64	; 0x40
 8003228:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800322a:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 800322c:	2200      	movs	r2, #0
 800322e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 8003232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003236:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003238:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 800323a:	2200      	movs	r2, #0
 800323c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 800324c:	2200      	movs	r2, #0
 800324e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 8003252:	2200      	movs	r2, #0
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003256:	4810      	ldr	r0, [pc, #64]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 8003258:	f000 ff70 	bl	800413c <HAL_DMA_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003262:	f7ff f895 	bl	8002390 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a0b      	ldr	r2, [pc, #44]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 800326a:	649a      	str	r2, [r3, #72]	; 0x48
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <HAL_SPI_MspInit+0xfc>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2100      	movs	r1, #0
 8003276:	2023      	movs	r0, #35	; 0x23
 8003278:	f000 ff29 	bl	80040ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800327c:	2023      	movs	r0, #35	; 0x23
 800327e:	f000 ff42 	bl	8004106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003282:	bf00      	nop
 8003284:	3728      	adds	r7, #40	; 0x28
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40013000 	.word	0x40013000
 8003290:	40023800 	.word	0x40023800
 8003294:	40020000 	.word	0x40020000
 8003298:	20000b28 	.word	0x20000b28
 800329c:	40026488 	.word	0x40026488

080032a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_UART_MspInit+0x94>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d133      	bne.n	800332a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_UART_MspInit+0x98>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <HAL_UART_MspInit+0x98>)
 80032cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_UART_MspInit+0x98>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <HAL_UART_MspInit+0x98>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a14      	ldr	r2, [pc, #80]	; (8003338 <HAL_UART_MspInit+0x98>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_UART_MspInit+0x98>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032fa:	230c      	movs	r3, #12
 80032fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800330a:	2307      	movs	r3, #7
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	4809      	ldr	r0, [pc, #36]	; (800333c <HAL_UART_MspInit+0x9c>)
 8003316:	f001 fb13 	bl	8004940 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	2026      	movs	r0, #38	; 0x26
 8003320:	f000 fed5 	bl	80040ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003324:	2026      	movs	r0, #38	; 0x26
 8003326:	f000 feee 	bl	8004106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800332a:	bf00      	nop
 800332c:	3728      	adds	r7, #40	; 0x28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40004400 	.word	0x40004400
 8003338:	40023800 	.word	0x40023800
 800333c:	40020000 	.word	0x40020000

08003340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <NMI_Handler+0x4>

08003346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800334a:	e7fe      	b.n	800334a <HardFault_Handler+0x4>

0800334c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003350:	e7fe      	b.n	8003350 <MemManage_Handler+0x4>

08003352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003356:	e7fe      	b.n	8003356 <BusFault_Handler+0x4>

08003358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800335c:	e7fe      	b.n	800335c <UsageFault_Handler+0x4>

0800335e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800335e:	b480      	push	{r7}
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800338c:	f000 f97e 	bl	800368c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}

08003394 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003398:	4802      	ldr	r0, [pc, #8]	; (80033a4 <SPI1_IRQHandler+0x10>)
 800339a:	f003 fad3 	bl	8006944 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000a8c 	.word	0x20000a8c

080033a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <USART2_IRQHandler+0x10>)
 80033ae:	f003 fdbb 	bl	8006f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000ae4 	.word	0x20000ae4

080033bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033c0:	4802      	ldr	r0, [pc, #8]	; (80033cc <DMA2_Stream0_IRQHandler+0x10>)
 80033c2:	f001 f853 	bl	800446c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200009a8 	.word	0x200009a8

080033d0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <DMA2_Stream5_IRQHandler+0x10>)
 80033d6:	f001 f849 	bl	800446c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000b28 	.word	0x20000b28

080033e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
	return 1;
 80033e8:	2301      	movs	r3, #1
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <_kill>:

int _kill(int pid, int sig)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80033fe:	f004 fbdd 	bl	8007bbc <__errno>
 8003402:	4603      	mov	r3, r0
 8003404:	2216      	movs	r2, #22
 8003406:	601a      	str	r2, [r3, #0]
	return -1;
 8003408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_exit>:

void _exit (int status)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800341c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ffe7 	bl	80033f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003426:	e7fe      	b.n	8003426 <_exit+0x12>

08003428 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	e00a      	b.n	8003450 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800343a:	f3af 8000 	nop.w
 800343e:	4601      	mov	r1, r0
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	60ba      	str	r2, [r7, #8]
 8003446:	b2ca      	uxtb	r2, r1
 8003448:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3301      	adds	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	dbf0      	blt.n	800343a <_read+0x12>
	}

return len;
 8003458:	687b      	ldr	r3, [r7, #4]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e009      	b.n	8003488 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	60ba      	str	r2, [r7, #8]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe ff67 	bl	8002350 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3301      	adds	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	dbf1      	blt.n	8003474 <_write+0x12>
	}
	return len;
 8003490:	687b      	ldr	r3, [r7, #4]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_close>:

int _close(int file)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
	return -1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034c2:	605a      	str	r2, [r3, #4]
	return 0;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <_isatty>:

int _isatty(int file)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
	return 1;
 80034da:	2301      	movs	r3, #1
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
	return 0;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <_sbrk+0x5c>)
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <_sbrk+0x60>)
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <_sbrk+0x64>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <_sbrk+0x64>)
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <_sbrk+0x68>)
 8003524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <_sbrk+0x64>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	429a      	cmp	r2, r3
 8003532:	d207      	bcs.n	8003544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003534:	f004 fb42 	bl	8007bbc <__errno>
 8003538:	4603      	mov	r3, r0
 800353a:	220c      	movs	r2, #12
 800353c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800353e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003542:	e009      	b.n	8003558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <_sbrk+0x64>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800354a:	4b07      	ldr	r3, [pc, #28]	; (8003568 <_sbrk+0x64>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	4a05      	ldr	r2, [pc, #20]	; (8003568 <_sbrk+0x64>)
 8003554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003556:	68fb      	ldr	r3, [r7, #12]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20020000 	.word	0x20020000
 8003564:	00000400 	.word	0x00000400
 8003568:	20000214 	.word	0x20000214
 800356c:	20000d58 	.word	0x20000d58

08003570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <SystemInit+0x20>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	4a05      	ldr	r2, [pc, #20]	; (8003590 <SystemInit+0x20>)
 800357c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003598:	480d      	ldr	r0, [pc, #52]	; (80035d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800359a:	490e      	ldr	r1, [pc, #56]	; (80035d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800359c:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a0:	e002      	b.n	80035a8 <LoopCopyDataInit>

080035a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035a6:	3304      	adds	r3, #4

080035a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035ac:	d3f9      	bcc.n	80035a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ae:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035b0:	4c0b      	ldr	r4, [pc, #44]	; (80035e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035b4:	e001      	b.n	80035ba <LoopFillZerobss>

080035b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035b8:	3204      	adds	r2, #4

080035ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035bc:	d3fb      	bcc.n	80035b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035be:	f7ff ffd7 	bl	8003570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035c2:	f004 fb01 	bl	8007bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035c6:	f7fe fb9f 	bl	8001d08 <main>
  bx  lr    
 80035ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80035cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80035d8:	0800f864 	.word	0x0800f864
  ldr r2, =_sbss
 80035dc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80035e0:	20000d54 	.word	0x20000d54

080035e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035e4:	e7fe      	b.n	80035e4 <ADC_IRQHandler>
	...

080035e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035ec:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_Init+0x40>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <HAL_Init+0x40>)
 80035f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_Init+0x40>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <HAL_Init+0x40>)
 80035fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003602:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <HAL_Init+0x40>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a07      	ldr	r2, [pc, #28]	; (8003628 <HAL_Init+0x40>)
 800360a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003610:	2003      	movs	r0, #3
 8003612:	f000 fd51 	bl	80040b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003616:	200f      	movs	r0, #15
 8003618:	f000 f808 	bl	800362c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800361c:	f7ff fcd6 	bl	8002fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023c00 	.word	0x40023c00

0800362c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_InitTick+0x54>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_InitTick+0x58>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	4619      	mov	r1, r3
 800363e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003642:	fbb3 f3f1 	udiv	r3, r3, r1
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fd69 	bl	8004122 <HAL_SYSTICK_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e00e      	b.n	8003678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b0f      	cmp	r3, #15
 800365e:	d80a      	bhi.n	8003676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003660:	2200      	movs	r2, #0
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003668:	f000 fd31 	bl	80040ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800366c:	4a06      	ldr	r2, [pc, #24]	; (8003688 <HAL_InitTick+0x5c>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	2000000c 	.word	0x2000000c
 8003684:	20000014 	.word	0x20000014
 8003688:	20000010 	.word	0x20000010

0800368c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_IncTick+0x20>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_IncTick+0x24>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4413      	add	r3, r2
 800369c:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <HAL_IncTick+0x24>)
 800369e:	6013      	str	r3, [r2, #0]
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000014 	.word	0x20000014
 80036b0:	20000d40 	.word	0x20000d40

080036b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return uwTick;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_GetTick+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000d40 	.word	0x20000d40

080036cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d4:	f7ff ffee 	bl	80036b4 <HAL_GetTick>
 80036d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e4:	d005      	beq.n	80036f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_Delay+0x44>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036f2:	bf00      	nop
 80036f4:	f7ff ffde 	bl	80036b4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	429a      	cmp	r2, r3
 8003702:	d8f7      	bhi.n	80036f4 <HAL_Delay+0x28>
  {
  }
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000014 	.word	0x20000014

08003714 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e033      	b.n	8003792 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fc72 	bl	800301c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d118      	bne.n	8003784 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800375a:	f023 0302 	bic.w	r3, r3, #2
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa58 	bl	8003c1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	f043 0201 	orr.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
 8003782:	e001      	b.n	8003788 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_Start_DMA+0x1e>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e0ce      	b.n	8003958 <HAL_ADC_Start_DMA+0x1bc>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d018      	beq.n	8003802 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037e0:	4b5f      	ldr	r3, [pc, #380]	; (8003960 <HAL_ADC_Start_DMA+0x1c4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a5f      	ldr	r2, [pc, #380]	; (8003964 <HAL_ADC_Start_DMA+0x1c8>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	0c9a      	lsrs	r2, r3, #18
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80037f4:	e002      	b.n	80037fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f9      	bne.n	80037f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003810:	d107      	bne.n	8003822 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003820:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b01      	cmp	r3, #1
 800382e:	f040 8086 	bne.w	800393e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800385c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800386c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003870:	d106      	bne.n	8003880 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f023 0206 	bic.w	r2, r3, #6
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
 800387e:	e002      	b.n	8003886 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800388e:	4b36      	ldr	r3, [pc, #216]	; (8003968 <HAL_ADC_Start_DMA+0x1cc>)
 8003890:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	4a35      	ldr	r2, [pc, #212]	; (800396c <HAL_ADC_Start_DMA+0x1d0>)
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	4a34      	ldr	r2, [pc, #208]	; (8003970 <HAL_ADC_Start_DMA+0x1d4>)
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	4a33      	ldr	r2, [pc, #204]	; (8003974 <HAL_ADC_Start_DMA+0x1d8>)
 80038a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80038b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80038c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	334c      	adds	r3, #76	; 0x4c
 80038de:	4619      	mov	r1, r3
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f000 fcd8 	bl	8004298 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d129      	bne.n	8003956 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	e020      	b.n	8003956 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a17      	ldr	r2, [pc, #92]	; (8003978 <HAL_ADC_Start_DMA+0x1dc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d11b      	bne.n	8003956 <HAL_ADC_Start_DMA+0x1ba>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d114      	bne.n	8003956 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	e00b      	b.n	8003956 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0210 	orr.w	r2, r3, #16
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	2000000c 	.word	0x2000000c
 8003964:	431bde83 	.word	0x431bde83
 8003968:	40012300 	.word	0x40012300
 800396c:	08003e15 	.word	0x08003e15
 8003970:	08003ecf 	.word	0x08003ecf
 8003974:	08003eeb 	.word	0x08003eeb
 8003978:	40012000 	.word	0x40012000

0800397c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x1c>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e113      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x244>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b09      	cmp	r3, #9
 80039e2:	d925      	bls.n	8003a30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68d9      	ldr	r1, [r3, #12]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	3b1e      	subs	r3, #30
 80039fa:	2207      	movs	r2, #7
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43da      	mvns	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	400a      	ands	r2, r1
 8003a08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68d9      	ldr	r1, [r3, #12]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4403      	add	r3, r0
 8003a22:	3b1e      	subs	r3, #30
 8003a24:	409a      	lsls	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	e022      	b.n	8003a76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6919      	ldr	r1, [r3, #16]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	2207      	movs	r2, #7
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	400a      	ands	r2, r1
 8003a52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6919      	ldr	r1, [r3, #16]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	4618      	mov	r0, r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4403      	add	r3, r0
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d824      	bhi.n	8003ac8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3b05      	subs	r3, #5
 8003a90:	221f      	movs	r2, #31
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	4618      	mov	r0, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3b05      	subs	r3, #5
 8003aba:	fa00 f203 	lsl.w	r2, r0, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ac6:	e04c      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b0c      	cmp	r3, #12
 8003ace:	d824      	bhi.n	8003b1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	3b23      	subs	r3, #35	; 0x23
 8003ae2:	221f      	movs	r2, #31
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	400a      	ands	r2, r1
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	4618      	mov	r0, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	3b23      	subs	r3, #35	; 0x23
 8003b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
 8003b18:	e023      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	3b41      	subs	r3, #65	; 0x41
 8003b2c:	221f      	movs	r2, #31
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43da      	mvns	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	400a      	ands	r2, r1
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	4618      	mov	r0, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	3b41      	subs	r3, #65	; 0x41
 8003b56:	fa00 f203 	lsl.w	r2, r0, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b62:	4b29      	ldr	r3, [pc, #164]	; (8003c08 <HAL_ADC_ConfigChannel+0x250>)
 8003b64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a28      	ldr	r2, [pc, #160]	; (8003c0c <HAL_ADC_ConfigChannel+0x254>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d10f      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x1d8>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b12      	cmp	r3, #18
 8003b76:	d10b      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <HAL_ADC_ConfigChannel+0x254>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d12b      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x23a>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1c      	ldr	r2, [pc, #112]	; (8003c10 <HAL_ADC_ConfigChannel+0x258>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <HAL_ADC_ConfigChannel+0x1f4>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b11      	cmp	r3, #17
 8003baa:	d122      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <HAL_ADC_ConfigChannel+0x258>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d111      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bce:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <HAL_ADC_ConfigChannel+0x25c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a11      	ldr	r2, [pc, #68]	; (8003c18 <HAL_ADC_ConfigChannel+0x260>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	0c9a      	lsrs	r2, r3, #18
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003be4:	e002      	b.n	8003bec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f9      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40012300 	.word	0x40012300
 8003c0c:	40012000 	.word	0x40012000
 8003c10:	10000012 	.word	0x10000012
 8003c14:	2000000c 	.word	0x2000000c
 8003c18:	431bde83 	.word	0x431bde83

08003c1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c24:	4b79      	ldr	r3, [pc, #484]	; (8003e0c <ADC_Init+0x1f0>)
 8003c26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	021a      	lsls	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6859      	ldr	r1, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6899      	ldr	r1, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	4a58      	ldr	r2, [pc, #352]	; (8003e10 <ADC_Init+0x1f4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6899      	ldr	r1, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	e00f      	b.n	8003d1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0202 	bic.w	r2, r2, #2
 8003d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6899      	ldr	r1, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7e1b      	ldrb	r3, [r3, #24]
 8003d34:	005a      	lsls	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01b      	beq.n	8003d80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	3b01      	subs	r3, #1
 8003d74:	035a      	lsls	r2, r3, #13
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	e007      	b.n	8003d90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	051a      	lsls	r2, r3, #20
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6899      	ldr	r1, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dd2:	025a      	lsls	r2, r3, #9
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6899      	ldr	r1, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	029a      	lsls	r2, r3, #10
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40012300 	.word	0x40012300
 8003e10:	0f000001 	.word	0x0f000001

08003e14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d13c      	bne.n	8003ea8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d12b      	bne.n	8003ea0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d127      	bne.n	8003ea0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d006      	beq.n	8003e6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d119      	bne.n	8003ea0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0220 	bic.w	r2, r2, #32
 8003e7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	f043 0201 	orr.w	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff fd6b 	bl	800397c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ea6:	e00e      	b.n	8003ec6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff fd75 	bl	80039a4 <HAL_ADC_ErrorCallback>
}
 8003eba:	e004      	b.n	8003ec6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	4798      	blx	r3
}
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7ff fd57 	bl	8003990 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f043 0204 	orr.w	r2, r3, #4
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fd4a 	bl	80039a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <__NVIC_SetPriorityGrouping>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <__NVIC_SetPriorityGrouping+0x44>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f34:	4013      	ands	r3, r2
 8003f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f4a:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <__NVIC_SetPriorityGrouping+0x44>)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	60d3      	str	r3, [r2, #12]
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000ed00 	.word	0xe000ed00

08003f60 <__NVIC_GetPriorityGrouping>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <__NVIC_GetPriorityGrouping+0x18>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	f003 0307 	and.w	r3, r3, #7
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <__NVIC_EnableIRQ>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	db0b      	blt.n	8003fa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	f003 021f 	and.w	r2, r3, #31
 8003f94:	4907      	ldr	r1, [pc, #28]	; (8003fb4 <__NVIC_EnableIRQ+0x38>)
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	e000e100 	.word	0xe000e100

08003fb8 <__NVIC_SetPriority>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	6039      	str	r1, [r7, #0]
 8003fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	db0a      	blt.n	8003fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	490c      	ldr	r1, [pc, #48]	; (8004004 <__NVIC_SetPriority+0x4c>)
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	0112      	lsls	r2, r2, #4
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	440b      	add	r3, r1
 8003fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fe0:	e00a      	b.n	8003ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	4908      	ldr	r1, [pc, #32]	; (8004008 <__NVIC_SetPriority+0x50>)
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	3b04      	subs	r3, #4
 8003ff0:	0112      	lsls	r2, r2, #4
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	761a      	strb	r2, [r3, #24]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	e000e100 	.word	0xe000e100
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <NVIC_EncodePriority>:
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	; 0x24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f1c3 0307 	rsb	r3, r3, #7
 8004026:	2b04      	cmp	r3, #4
 8004028:	bf28      	it	cs
 800402a:	2304      	movcs	r3, #4
 800402c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3304      	adds	r3, #4
 8004032:	2b06      	cmp	r3, #6
 8004034:	d902      	bls.n	800403c <NVIC_EncodePriority+0x30>
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3b03      	subs	r3, #3
 800403a:	e000      	b.n	800403e <NVIC_EncodePriority+0x32>
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43da      	mvns	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	401a      	ands	r2, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	43d9      	mvns	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004064:	4313      	orrs	r3, r2
}
 8004066:	4618      	mov	r0, r3
 8004068:	3724      	adds	r7, #36	; 0x24
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <SysTick_Config>:
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3b01      	subs	r3, #1
 8004080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004084:	d301      	bcc.n	800408a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004086:	2301      	movs	r3, #1
 8004088:	e00f      	b.n	80040aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <SysTick_Config+0x40>)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3b01      	subs	r3, #1
 8004090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004092:	210f      	movs	r1, #15
 8004094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004098:	f7ff ff8e 	bl	8003fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <SysTick_Config+0x40>)
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040a2:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <SysTick_Config+0x40>)
 80040a4:	2207      	movs	r2, #7
 80040a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	e000e010 	.word	0xe000e010

080040b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff29 	bl	8003f18 <__NVIC_SetPriorityGrouping>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b086      	sub	sp, #24
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	4603      	mov	r3, r0
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040e0:	f7ff ff3e 	bl	8003f60 <__NVIC_GetPriorityGrouping>
 80040e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	6978      	ldr	r0, [r7, #20]
 80040ec:	f7ff ff8e 	bl	800400c <NVIC_EncodePriority>
 80040f0:	4602      	mov	r2, r0
 80040f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff5d 	bl	8003fb8 <__NVIC_SetPriority>
}
 80040fe:	bf00      	nop
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	4603      	mov	r3, r0
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff ff31 	bl	8003f7c <__NVIC_EnableIRQ>
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ffa2 	bl	8004074 <SysTick_Config>
 8004130:	4603      	mov	r3, r0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004148:	f7ff fab4 	bl	80036b4 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e099      	b.n	800428c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004178:	e00f      	b.n	800419a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800417a:	f7ff fa9b 	bl	80036b4 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b05      	cmp	r3, #5
 8004186:	d908      	bls.n	800419a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2203      	movs	r2, #3
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e078      	b.n	800428c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e8      	bne.n	800417a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4b38      	ldr	r3, [pc, #224]	; (8004294 <HAL_DMA_Init+0x158>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d107      	bne.n	8004204 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	4313      	orrs	r3, r2
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0307 	bic.w	r3, r3, #7
 800421a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	2b04      	cmp	r3, #4
 800422c:	d117      	bne.n	800425e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00e      	beq.n	800425e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fb01 	bl	8004848 <DMA_CheckFifoParam>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2240      	movs	r2, #64	; 0x40
 8004250:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800425a:	2301      	movs	r3, #1
 800425c:	e016      	b.n	800428c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fab8 	bl	80047dc <DMA_CalcBaseAndBitshift>
 800426c:	4603      	mov	r3, r0
 800426e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	223f      	movs	r2, #63	; 0x3f
 8004276:	409a      	lsls	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	f010803f 	.word	0xf010803f

08004298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_DMA_Start_IT+0x26>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e040      	b.n	8004340 <HAL_DMA_Start_IT+0xa8>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d12f      	bne.n	8004332 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2202      	movs	r2, #2
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fa4a 	bl	8004780 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f0:	223f      	movs	r2, #63	; 0x3f
 80042f2:	409a      	lsls	r2, r3
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0216 	orr.w	r2, r2, #22
 8004306:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0208 	orr.w	r2, r2, #8
 800431e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e005      	b.n	800433e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800433a:	2302      	movs	r3, #2
 800433c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800433e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004356:	f7ff f9ad 	bl	80036b4 <HAL_GetTick>
 800435a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d008      	beq.n	800437a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e052      	b.n	8004420 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0216 	bic.w	r2, r2, #22
 8004388:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004398:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d103      	bne.n	80043aa <HAL_DMA_Abort+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0208 	bic.w	r2, r2, #8
 80043b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ca:	e013      	b.n	80043f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043cc:	f7ff f972 	bl	80036b4 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	d90c      	bls.n	80043f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2203      	movs	r2, #3
 80043e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e015      	b.n	8004420 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e4      	bne.n	80043cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004406:	223f      	movs	r2, #63	; 0x3f
 8004408:	409a      	lsls	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d004      	beq.n	8004446 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e00c      	b.n	8004460 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2205      	movs	r2, #5
 800444a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004478:	4b92      	ldr	r3, [pc, #584]	; (80046c4 <HAL_DMA_IRQHandler+0x258>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a92      	ldr	r2, [pc, #584]	; (80046c8 <HAL_DMA_IRQHandler+0x25c>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0a9b      	lsrs	r3, r3, #10
 8004484:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	2208      	movs	r2, #8
 8004498:	409a      	lsls	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01a      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d013      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0204 	bic.w	r2, r2, #4
 80044be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	2208      	movs	r2, #8
 80044c6:	409a      	lsls	r2, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044dc:	2201      	movs	r2, #1
 80044de:	409a      	lsls	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d012      	beq.n	800450e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fa:	2201      	movs	r2, #1
 80044fc:	409a      	lsls	r2, r3
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	f043 0202 	orr.w	r2, r3, #2
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004512:	2204      	movs	r2, #4
 8004514:	409a      	lsls	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d012      	beq.n	8004544 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00b      	beq.n	8004544 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004530:	2204      	movs	r2, #4
 8004532:	409a      	lsls	r2, r3
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	f043 0204 	orr.w	r2, r3, #4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004548:	2210      	movs	r2, #16
 800454a:	409a      	lsls	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d043      	beq.n	80045dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d03c      	beq.n	80045dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004566:	2210      	movs	r2, #16
 8004568:	409a      	lsls	r2, r3
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d018      	beq.n	80045ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d024      	beq.n	80045dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
 800459a:	e01f      	b.n	80045dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4798      	blx	r3
 80045ac:	e016      	b.n	80045dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d107      	bne.n	80045cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0208 	bic.w	r2, r2, #8
 80045ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	2220      	movs	r2, #32
 80045e2:	409a      	lsls	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 808e 	beq.w	800470a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8086 	beq.w	800470a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004602:	2220      	movs	r2, #32
 8004604:	409a      	lsls	r2, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b05      	cmp	r3, #5
 8004614:	d136      	bne.n	8004684 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0216 	bic.w	r2, r2, #22
 8004624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004634:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <HAL_DMA_IRQHandler+0x1da>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0208 	bic.w	r2, r2, #8
 8004654:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465a:	223f      	movs	r2, #63	; 0x3f
 800465c:	409a      	lsls	r2, r3
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004676:	2b00      	cmp	r3, #0
 8004678:	d07d      	beq.n	8004776 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
        }
        return;
 8004682:	e078      	b.n	8004776 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01c      	beq.n	80046cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d108      	bne.n	80046b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d030      	beq.n	800470a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4798      	blx	r3
 80046b0:	e02b      	b.n	800470a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d027      	beq.n	800470a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	4798      	blx	r3
 80046c2:	e022      	b.n	800470a <HAL_DMA_IRQHandler+0x29e>
 80046c4:	2000000c 	.word	0x2000000c
 80046c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0210 	bic.w	r2, r2, #16
 80046e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	2b00      	cmp	r3, #0
 8004710:	d032      	beq.n	8004778 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d022      	beq.n	8004764 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2205      	movs	r2, #5
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3301      	adds	r3, #1
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	429a      	cmp	r2, r3
 8004740:	d307      	bcc.n	8004752 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f2      	bne.n	8004736 <HAL_DMA_IRQHandler+0x2ca>
 8004750:	e000      	b.n	8004754 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004752:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
 8004774:	e000      	b.n	8004778 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004776:	bf00      	nop
    }
  }
}
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop

08004780 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800479c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	d108      	bne.n	80047c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047be:	e007      	b.n	80047d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3b10      	subs	r3, #16
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <DMA_CalcBaseAndBitshift+0x64>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047f6:	4a13      	ldr	r2, [pc, #76]	; (8004844 <DMA_CalcBaseAndBitshift+0x68>)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d909      	bls.n	800481e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	1d1a      	adds	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	659a      	str	r2, [r3, #88]	; 0x58
 800481c:	e007      	b.n	800482e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	aaaaaaab 	.word	0xaaaaaaab
 8004844:	0800f394 	.word	0x0800f394

08004848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d11f      	bne.n	80048a2 <DMA_CheckFifoParam+0x5a>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d856      	bhi.n	8004916 <DMA_CheckFifoParam+0xce>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <DMA_CheckFifoParam+0x28>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004881 	.word	0x08004881
 8004874:	08004893 	.word	0x08004893
 8004878:	08004881 	.word	0x08004881
 800487c:	08004917 	.word	0x08004917
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d046      	beq.n	800491a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004890:	e043      	b.n	800491a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800489a:	d140      	bne.n	800491e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a0:	e03d      	b.n	800491e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048aa:	d121      	bne.n	80048f0 <DMA_CheckFifoParam+0xa8>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d837      	bhi.n	8004922 <DMA_CheckFifoParam+0xda>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <DMA_CheckFifoParam+0x70>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048cf 	.word	0x080048cf
 80048c0:	080048c9 	.word	0x080048c9
 80048c4:	080048e1 	.word	0x080048e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
      break;
 80048cc:	e030      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d025      	beq.n	8004926 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048de:	e022      	b.n	8004926 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048e8:	d11f      	bne.n	800492a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048ee:	e01c      	b.n	800492a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d903      	bls.n	80048fe <DMA_CheckFifoParam+0xb6>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d003      	beq.n	8004904 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048fc:	e018      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
      break;
 8004902:	e015      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	e00b      	b.n	800492e <DMA_CheckFifoParam+0xe6>
      break;
 8004916:	bf00      	nop
 8004918:	e00a      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800491a:	bf00      	nop
 800491c:	e008      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800491e:	bf00      	nop
 8004920:	e006      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 8004922:	bf00      	nop
 8004924:	e004      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 8004926:	bf00      	nop
 8004928:	e002      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;   
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800492e:	bf00      	nop
    }
  } 
  
  return status; 
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	; 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e159      	b.n	8004c10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800495c:	2201      	movs	r2, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	429a      	cmp	r2, r3
 8004976:	f040 8148 	bne.w	8004c0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d005      	beq.n	8004992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800498e:	2b02      	cmp	r3, #2
 8004990:	d130      	bne.n	80049f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	2203      	movs	r2, #3
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049c8:	2201      	movs	r2, #1
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 0201 	and.w	r2, r3, #1
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d017      	beq.n	8004a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d123      	bne.n	8004a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	08da      	lsrs	r2, r3, #3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3208      	adds	r2, #8
 8004a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	220f      	movs	r2, #15
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	08da      	lsrs	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3208      	adds	r2, #8
 8004a7e:	69b9      	ldr	r1, [r7, #24]
 8004a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	2203      	movs	r2, #3
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0203 	and.w	r2, r3, #3
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80a2 	beq.w	8004c0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	4b57      	ldr	r3, [pc, #348]	; (8004c28 <HAL_GPIO_Init+0x2e8>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	4a56      	ldr	r2, [pc, #344]	; (8004c28 <HAL_GPIO_Init+0x2e8>)
 8004ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ad6:	4b54      	ldr	r3, [pc, #336]	; (8004c28 <HAL_GPIO_Init+0x2e8>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ae2:	4a52      	ldr	r2, [pc, #328]	; (8004c2c <HAL_GPIO_Init+0x2ec>)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	089b      	lsrs	r3, r3, #2
 8004ae8:	3302      	adds	r3, #2
 8004aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	220f      	movs	r2, #15
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a49      	ldr	r2, [pc, #292]	; (8004c30 <HAL_GPIO_Init+0x2f0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d019      	beq.n	8004b42 <HAL_GPIO_Init+0x202>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a48      	ldr	r2, [pc, #288]	; (8004c34 <HAL_GPIO_Init+0x2f4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_GPIO_Init+0x1fe>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a47      	ldr	r2, [pc, #284]	; (8004c38 <HAL_GPIO_Init+0x2f8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00d      	beq.n	8004b3a <HAL_GPIO_Init+0x1fa>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a46      	ldr	r2, [pc, #280]	; (8004c3c <HAL_GPIO_Init+0x2fc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <HAL_GPIO_Init+0x1f6>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a45      	ldr	r2, [pc, #276]	; (8004c40 <HAL_GPIO_Init+0x300>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d101      	bne.n	8004b32 <HAL_GPIO_Init+0x1f2>
 8004b2e:	2304      	movs	r3, #4
 8004b30:	e008      	b.n	8004b44 <HAL_GPIO_Init+0x204>
 8004b32:	2307      	movs	r3, #7
 8004b34:	e006      	b.n	8004b44 <HAL_GPIO_Init+0x204>
 8004b36:	2303      	movs	r3, #3
 8004b38:	e004      	b.n	8004b44 <HAL_GPIO_Init+0x204>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e002      	b.n	8004b44 <HAL_GPIO_Init+0x204>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_GPIO_Init+0x204>
 8004b42:	2300      	movs	r3, #0
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	f002 0203 	and.w	r2, r2, #3
 8004b4a:	0092      	lsls	r2, r2, #2
 8004b4c:	4093      	lsls	r3, r2
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b54:	4935      	ldr	r1, [pc, #212]	; (8004c2c <HAL_GPIO_Init+0x2ec>)
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	3302      	adds	r3, #2
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b62:	4b38      	ldr	r3, [pc, #224]	; (8004c44 <HAL_GPIO_Init+0x304>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b86:	4a2f      	ldr	r2, [pc, #188]	; (8004c44 <HAL_GPIO_Init+0x304>)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b8c:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <HAL_GPIO_Init+0x304>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bb0:	4a24      	ldr	r2, [pc, #144]	; (8004c44 <HAL_GPIO_Init+0x304>)
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bb6:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <HAL_GPIO_Init+0x304>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <HAL_GPIO_Init+0x304>)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004be0:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <HAL_GPIO_Init+0x304>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c04:	4a0f      	ldr	r2, [pc, #60]	; (8004c44 <HAL_GPIO_Init+0x304>)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b0f      	cmp	r3, #15
 8004c14:	f67f aea2 	bls.w	800495c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	3724      	adds	r7, #36	; 0x24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40013800 	.word	0x40013800
 8004c30:	40020000 	.word	0x40020000
 8004c34:	40020400 	.word	0x40020400
 8004c38:	40020800 	.word	0x40020800
 8004c3c:	40020c00 	.word	0x40020c00
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40013c00 	.word	0x40013c00

08004c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	887b      	ldrh	r3, [r7, #2]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	e001      	b.n	8004c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	807b      	strh	r3, [r7, #2]
 8004c84:	4613      	mov	r3, r2
 8004c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c88:	787b      	ldrb	r3, [r7, #1]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c8e:	887a      	ldrh	r2, [r7, #2]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c94:	e003      	b.n	8004c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c96:	887b      	ldrh	r3, [r7, #2]
 8004c98:	041a      	lsls	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	619a      	str	r2, [r3, #24]
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e12b      	b.n	8004f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fe fa1a 	bl	800310c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2224      	movs	r2, #36	; 0x24
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d10:	f001 fcb0 	bl	8006674 <HAL_RCC_GetPCLK1Freq>
 8004d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4a81      	ldr	r2, [pc, #516]	; (8004f20 <HAL_I2C_Init+0x274>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d807      	bhi.n	8004d30 <HAL_I2C_Init+0x84>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a80      	ldr	r2, [pc, #512]	; (8004f24 <HAL_I2C_Init+0x278>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	bf94      	ite	ls
 8004d28:	2301      	movls	r3, #1
 8004d2a:	2300      	movhi	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e006      	b.n	8004d3e <HAL_I2C_Init+0x92>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a7d      	ldr	r2, [pc, #500]	; (8004f28 <HAL_I2C_Init+0x27c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bf94      	ite	ls
 8004d38:	2301      	movls	r3, #1
 8004d3a:	2300      	movhi	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0e7      	b.n	8004f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a78      	ldr	r2, [pc, #480]	; (8004f2c <HAL_I2C_Init+0x280>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	0c9b      	lsrs	r3, r3, #18
 8004d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a6a      	ldr	r2, [pc, #424]	; (8004f20 <HAL_I2C_Init+0x274>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d802      	bhi.n	8004d80 <HAL_I2C_Init+0xd4>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	e009      	b.n	8004d94 <HAL_I2C_Init+0xe8>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	4a69      	ldr	r2, [pc, #420]	; (8004f30 <HAL_I2C_Init+0x284>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	099b      	lsrs	r3, r3, #6
 8004d92:	3301      	adds	r3, #1
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004da6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	495c      	ldr	r1, [pc, #368]	; (8004f20 <HAL_I2C_Init+0x274>)
 8004db0:	428b      	cmp	r3, r1
 8004db2:	d819      	bhi.n	8004de8 <HAL_I2C_Init+0x13c>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1e59      	subs	r1, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dc2:	1c59      	adds	r1, r3, #1
 8004dc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004dc8:	400b      	ands	r3, r1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_I2C_Init+0x138>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1e59      	subs	r1, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de2:	e051      	b.n	8004e88 <HAL_I2C_Init+0x1dc>
 8004de4:	2304      	movs	r3, #4
 8004de6:	e04f      	b.n	8004e88 <HAL_I2C_Init+0x1dc>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d111      	bne.n	8004e14 <HAL_I2C_Init+0x168>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1e58      	subs	r0, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	440b      	add	r3, r1
 8004dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e02:	3301      	adds	r3, #1
 8004e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e012      	b.n	8004e3a <HAL_I2C_Init+0x18e>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1e58      	subs	r0, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6859      	ldr	r1, [r3, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	0099      	lsls	r1, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf0c      	ite	eq
 8004e34:	2301      	moveq	r3, #1
 8004e36:	2300      	movne	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_I2C_Init+0x196>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e022      	b.n	8004e88 <HAL_I2C_Init+0x1dc>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10e      	bne.n	8004e68 <HAL_I2C_Init+0x1bc>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1e58      	subs	r0, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	460b      	mov	r3, r1
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	440b      	add	r3, r1
 8004e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e66:	e00f      	b.n	8004e88 <HAL_I2C_Init+0x1dc>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1e58      	subs	r0, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6859      	ldr	r1, [r3, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	0099      	lsls	r1, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e7e:	3301      	adds	r3, #1
 8004e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	6809      	ldr	r1, [r1, #0]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6911      	ldr	r1, [r2, #16]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68d2      	ldr	r2, [r2, #12]
 8004ec2:	4311      	orrs	r1, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	000186a0 	.word	0x000186a0
 8004f24:	001e847f 	.word	0x001e847f
 8004f28:	003d08ff 	.word	0x003d08ff
 8004f2c:	431bde83 	.word	0x431bde83
 8004f30:	10624dd3 	.word	0x10624dd3

08004f34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	460b      	mov	r3, r1
 8004f42:	817b      	strh	r3, [r7, #10]
 8004f44:	4613      	mov	r3, r2
 8004f46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f48:	f7fe fbb4 	bl	80036b4 <HAL_GetTick>
 8004f4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	f040 80e0 	bne.w	800511c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	2319      	movs	r3, #25
 8004f62:	2201      	movs	r2, #1
 8004f64:	4970      	ldr	r1, [pc, #448]	; (8005128 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fd86 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f72:	2302      	movs	r3, #2
 8004f74:	e0d3      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_I2C_Master_Transmit+0x50>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e0cc      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d007      	beq.n	8004faa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0201 	orr.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2221      	movs	r2, #33	; 0x21
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	893a      	ldrh	r2, [r7, #8]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a50      	ldr	r2, [pc, #320]	; (800512c <HAL_I2C_Master_Transmit+0x1f8>)
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fec:	8979      	ldrh	r1, [r7, #10]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	6a3a      	ldr	r2, [r7, #32]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fbf0 	bl	80057d8 <I2C_MasterRequestWrite>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e08d      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005018:	e066      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	6a39      	ldr	r1, [r7, #32]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fe00 	bl	8005c24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00d      	beq.n	8005046 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	2b04      	cmp	r3, #4
 8005030:	d107      	bne.n	8005042 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e06b      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	781a      	ldrb	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d11b      	bne.n	80050bc <HAL_I2C_Master_Transmit+0x188>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d017      	beq.n	80050bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	6a39      	ldr	r1, [r7, #32]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 fdf0 	bl	8005ca6 <I2C_WaitOnBTFFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d107      	bne.n	80050e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e01a      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d194      	bne.n	800501a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	e000      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800511c:	2302      	movs	r3, #2
  }
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	00100002 	.word	0x00100002
 800512c:	ffff0000 	.word	0xffff0000

08005130 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	461a      	mov	r2, r3
 800513c:	460b      	mov	r3, r1
 800513e:	817b      	strh	r3, [r7, #10]
 8005140:	4613      	mov	r3, r2
 8005142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005144:	f7fe fab6 	bl	80036b4 <HAL_GetTick>
 8005148:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b20      	cmp	r3, #32
 8005154:	f040 820b 	bne.w	800556e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	2319      	movs	r3, #25
 800515e:	2201      	movs	r2, #1
 8005160:	497c      	ldr	r1, [pc, #496]	; (8005354 <HAL_I2C_Master_Receive+0x224>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fc88 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
 8005170:	e1fe      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_I2C_Master_Receive+0x50>
 800517c:	2302      	movs	r3, #2
 800517e:	e1f7      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	d007      	beq.n	80051a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2222      	movs	r2, #34	; 0x22
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2210      	movs	r2, #16
 80051c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	893a      	ldrh	r2, [r7, #8]
 80051d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a5c      	ldr	r2, [pc, #368]	; (8005358 <HAL_I2C_Master_Receive+0x228>)
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051e8:	8979      	ldrh	r1, [r7, #10]
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fb74 	bl	80058dc <I2C_MasterRequestRead>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e1b8      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d113      	bne.n	800522e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005206:	2300      	movs	r3, #0
 8005208:	623b      	str	r3, [r7, #32]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	623b      	str	r3, [r7, #32]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	623b      	str	r3, [r7, #32]
 800521a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e18c      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	2b01      	cmp	r3, #1
 8005234:	d11b      	bne.n	800526e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	61fb      	str	r3, [r7, #28]
 800525a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e16c      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	2b02      	cmp	r3, #2
 8005274:	d11b      	bne.n	80052ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005284:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005294:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	e14c      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052d4:	e138      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052da:	2b03      	cmp	r3, #3
 80052dc:	f200 80f1 	bhi.w	80054c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d123      	bne.n	8005330 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fd1b 	bl	8005d28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e139      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800532e:	e10b      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005334:	2b02      	cmp	r3, #2
 8005336:	d14e      	bne.n	80053d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	2200      	movs	r2, #0
 8005340:	4906      	ldr	r1, [pc, #24]	; (800535c <HAL_I2C_Master_Receive+0x22c>)
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fb98 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e10e      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
 8005352:	bf00      	nop
 8005354:	00100002 	.word	0x00100002
 8005358:	ffff0000 	.word	0xffff0000
 800535c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053d4:	e0b8      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	2200      	movs	r2, #0
 80053de:	4966      	ldr	r1, [pc, #408]	; (8005578 <HAL_I2C_Master_Receive+0x448>)
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fb49 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0bf      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	2200      	movs	r2, #0
 800543a:	494f      	ldr	r1, [pc, #316]	; (8005578 <HAL_I2C_Master_Receive+0x448>)
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fb1b 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e091      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054c0:	e042      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fc2e 	bl	8005d28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e04c      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d118      	bne.n	8005548 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	2b00      	cmp	r3, #0
 800554e:	f47f aec2 	bne.w	80052d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e000      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
  }
}
 8005570:	4618      	mov	r0, r3
 8005572:	3728      	adds	r7, #40	; 0x28
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	00010004 	.word	0x00010004

0800557c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	460b      	mov	r3, r1
 800558a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800558c:	f7fe f892 	bl	80036b4 <HAL_GetTick>
 8005590:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005592:	2301      	movs	r3, #1
 8005594:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b20      	cmp	r3, #32
 80055a0:	f040 8111 	bne.w	80057c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2319      	movs	r3, #25
 80055aa:	2201      	movs	r2, #1
 80055ac:	4988      	ldr	r1, [pc, #544]	; (80057d0 <HAL_I2C_IsDeviceReady+0x254>)
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fa62 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
 80055bc:	e104      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_I2C_IsDeviceReady+0x50>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e0fd      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x24c>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d007      	beq.n	80055f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0201 	orr.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005600:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2224      	movs	r2, #36	; 0x24
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4a70      	ldr	r2, [pc, #448]	; (80057d4 <HAL_I2C_IsDeviceReady+0x258>)
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005624:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2200      	movs	r2, #0
 800562e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fa20 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00d      	beq.n	800565a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564c:	d103      	bne.n	8005656 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005654:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e0b6      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800565a:	897b      	ldrh	r3, [r7, #10]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005668:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800566a:	f7fe f823 	bl	80036b4 <HAL_GetTick>
 800566e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b02      	cmp	r3, #2
 800567c:	bf0c      	ite	eq
 800567e:	2301      	moveq	r3, #1
 8005680:	2300      	movne	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005694:	bf0c      	ite	eq
 8005696:	2301      	moveq	r3, #1
 8005698:	2300      	movne	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800569e:	e025      	b.n	80056ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056a0:	f7fe f808 	bl	80036b4 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d302      	bcc.n	80056b6 <HAL_I2C_IsDeviceReady+0x13a>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	22a0      	movs	r2, #160	; 0xa0
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	bf0c      	ite	eq
 80056cc:	2301      	moveq	r3, #1
 80056ce:	2300      	movne	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e2:	bf0c      	ite	eq
 80056e4:	2301      	moveq	r3, #1
 80056e6:	2300      	movne	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2ba0      	cmp	r3, #160	; 0xa0
 80056f6:	d005      	beq.n	8005704 <HAL_I2C_IsDeviceReady+0x188>
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <HAL_I2C_IsDeviceReady+0x188>
 80056fe:	7dbb      	ldrb	r3, [r7, #22]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0cd      	beq.n	80056a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b02      	cmp	r3, #2
 8005718:	d129      	bne.n	800576e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005728:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	2300      	movs	r3, #0
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	2319      	movs	r3, #25
 8005746:	2201      	movs	r2, #1
 8005748:	4921      	ldr	r1, [pc, #132]	; (80057d0 <HAL_I2C_IsDeviceReady+0x254>)
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 f994 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e036      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	e02c      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005786:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2319      	movs	r3, #25
 800578e:	2201      	movs	r2, #1
 8005790:	490f      	ldr	r1, [pc, #60]	; (80057d0 <HAL_I2C_IsDeviceReady+0x254>)
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f970 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e012      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	3301      	adds	r3, #1
 80057a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	f4ff af32 	bcc.w	8005616 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	00100002 	.word	0x00100002
 80057d4:	ffff0000 	.word	0xffff0000

080057d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	460b      	mov	r3, r1
 80057e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d006      	beq.n	8005802 <I2C_MasterRequestWrite+0x2a>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d003      	beq.n	8005802 <I2C_MasterRequestWrite+0x2a>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005800:	d108      	bne.n	8005814 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e00b      	b.n	800582c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	2b12      	cmp	r3, #18
 800581a:	d107      	bne.n	800582c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800582a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f91d 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00d      	beq.n	8005860 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005852:	d103      	bne.n	800585c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e035      	b.n	80058cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005868:	d108      	bne.n	800587c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800586a:	897b      	ldrh	r3, [r7, #10]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005878:	611a      	str	r2, [r3, #16]
 800587a:	e01b      	b.n	80058b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800587c:	897b      	ldrh	r3, [r7, #10]
 800587e:	11db      	asrs	r3, r3, #7
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f003 0306 	and.w	r3, r3, #6
 8005886:	b2db      	uxtb	r3, r3
 8005888:	f063 030f 	orn	r3, r3, #15
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	490e      	ldr	r1, [pc, #56]	; (80058d4 <I2C_MasterRequestWrite+0xfc>)
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f943 	bl	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e010      	b.n	80058cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4907      	ldr	r1, [pc, #28]	; (80058d8 <I2C_MasterRequestWrite+0x100>)
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f933 	bl	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	00010008 	.word	0x00010008
 80058d8:	00010002 	.word	0x00010002

080058dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	607a      	str	r2, [r7, #4]
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	460b      	mov	r3, r1
 80058ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005900:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d006      	beq.n	8005916 <I2C_MasterRequestRead+0x3a>
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d003      	beq.n	8005916 <I2C_MasterRequestRead+0x3a>
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005914:	d108      	bne.n	8005928 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e00b      	b.n	8005940 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	2b11      	cmp	r3, #17
 800592e:	d107      	bne.n	8005940 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800593e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f893 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00d      	beq.n	8005974 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005966:	d103      	bne.n	8005970 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e079      	b.n	8005a68 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800597c:	d108      	bne.n	8005990 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800597e:	897b      	ldrh	r3, [r7, #10]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	611a      	str	r2, [r3, #16]
 800598e:	e05f      	b.n	8005a50 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005990:	897b      	ldrh	r3, [r7, #10]
 8005992:	11db      	asrs	r3, r3, #7
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f003 0306 	and.w	r3, r3, #6
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f063 030f 	orn	r3, r3, #15
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4930      	ldr	r1, [pc, #192]	; (8005a70 <I2C_MasterRequestRead+0x194>)
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f8b9 	bl	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e054      	b.n	8005a68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059be:	897b      	ldrh	r3, [r7, #10]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4929      	ldr	r1, [pc, #164]	; (8005a74 <I2C_MasterRequestRead+0x198>)
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f8a9 	bl	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e044      	b.n	8005a68 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a02:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f831 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2a:	d103      	bne.n	8005a34 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e017      	b.n	8005a68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005a38:	897b      	ldrh	r3, [r7, #10]
 8005a3a:	11db      	asrs	r3, r3, #7
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f003 0306 	and.w	r3, r3, #6
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f063 030e 	orn	r3, r3, #14
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	4907      	ldr	r1, [pc, #28]	; (8005a74 <I2C_MasterRequestRead+0x198>)
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 f865 	bl	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	00010008 	.word	0x00010008
 8005a74:	00010002 	.word	0x00010002

08005a78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a88:	e025      	b.n	8005ad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a90:	d021      	beq.n	8005ad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a92:	f7fd fe0f 	bl	80036b4 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d302      	bcc.n	8005aa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d116      	bne.n	8005ad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f043 0220 	orr.w	r2, r3, #32
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e023      	b.n	8005b1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d10d      	bne.n	8005afc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	43da      	mvns	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4013      	ands	r3, r2
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bf0c      	ite	eq
 8005af2:	2301      	moveq	r3, #1
 8005af4:	2300      	movne	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	e00c      	b.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	43da      	mvns	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4013      	ands	r3, r2
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bf0c      	ite	eq
 8005b0e:	2301      	moveq	r3, #1
 8005b10:	2300      	movne	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d0b6      	beq.n	8005a8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b34:	e051      	b.n	8005bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b44:	d123      	bne.n	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f043 0204 	orr.w	r2, r3, #4
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e046      	b.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b94:	d021      	beq.n	8005bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b96:	f7fd fd8d 	bl	80036b4 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d116      	bne.n	8005bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e020      	b.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d10c      	bne.n	8005bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	43da      	mvns	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	bf14      	ite	ne
 8005bf6:	2301      	movne	r3, #1
 8005bf8:	2300      	moveq	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	e00b      	b.n	8005c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	43da      	mvns	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bf14      	ite	ne
 8005c10:	2301      	movne	r3, #1
 8005c12:	2300      	moveq	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d18d      	bne.n	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c30:	e02d      	b.n	8005c8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f8ce 	bl	8005dd4 <I2C_IsAcknowledgeFailed>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e02d      	b.n	8005c9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c48:	d021      	beq.n	8005c8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7fd fd33 	bl	80036b4 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d302      	bcc.n	8005c60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d116      	bne.n	8005c8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f043 0220 	orr.w	r2, r3, #32
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e007      	b.n	8005c9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c98:	2b80      	cmp	r3, #128	; 0x80
 8005c9a:	d1ca      	bne.n	8005c32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cb2:	e02d      	b.n	8005d10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 f88d 	bl	8005dd4 <I2C_IsAcknowledgeFailed>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e02d      	b.n	8005d20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cca:	d021      	beq.n	8005d10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ccc:	f7fd fcf2 	bl	80036b4 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d302      	bcc.n	8005ce2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d116      	bne.n	8005d10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f043 0220 	orr.w	r2, r3, #32
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e007      	b.n	8005d20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d1ca      	bne.n	8005cb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d34:	e042      	b.n	8005dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d119      	bne.n	8005d78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0210 	mvn.w	r2, #16
 8005d4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e029      	b.n	8005dcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d78:	f7fd fc9c 	bl	80036b4 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d302      	bcc.n	8005d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d116      	bne.n	8005dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	f043 0220 	orr.w	r2, r3, #32
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e007      	b.n	8005dcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d1b5      	bne.n	8005d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dea:	d11b      	bne.n	8005e24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005df4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f043 0204 	orr.w	r2, r3, #4
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e264      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d075      	beq.n	8005f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e52:	4ba3      	ldr	r3, [pc, #652]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d00c      	beq.n	8005e78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5e:	4ba0      	ldr	r3, [pc, #640]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d112      	bne.n	8005e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e6a:	4b9d      	ldr	r3, [pc, #628]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e76:	d10b      	bne.n	8005e90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e78:	4b99      	ldr	r3, [pc, #612]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d05b      	beq.n	8005f3c <HAL_RCC_OscConfig+0x108>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d157      	bne.n	8005f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e23f      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e98:	d106      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x74>
 8005e9a:	4b91      	ldr	r3, [pc, #580]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a90      	ldr	r2, [pc, #576]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	e01d      	b.n	8005ee4 <HAL_RCC_OscConfig+0xb0>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005eb0:	d10c      	bne.n	8005ecc <HAL_RCC_OscConfig+0x98>
 8005eb2:	4b8b      	ldr	r3, [pc, #556]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a8a      	ldr	r2, [pc, #552]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	4b88      	ldr	r3, [pc, #544]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a87      	ldr	r2, [pc, #540]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e00b      	b.n	8005ee4 <HAL_RCC_OscConfig+0xb0>
 8005ecc:	4b84      	ldr	r3, [pc, #528]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a83      	ldr	r2, [pc, #524]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	4b81      	ldr	r3, [pc, #516]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a80      	ldr	r2, [pc, #512]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d013      	beq.n	8005f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eec:	f7fd fbe2 	bl	80036b4 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef4:	f7fd fbde 	bl	80036b4 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b64      	cmp	r3, #100	; 0x64
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e204      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f06:	4b76      	ldr	r3, [pc, #472]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0f0      	beq.n	8005ef4 <HAL_RCC_OscConfig+0xc0>
 8005f12:	e014      	b.n	8005f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f14:	f7fd fbce 	bl	80036b4 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f1c:	f7fd fbca 	bl	80036b4 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b64      	cmp	r3, #100	; 0x64
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e1f0      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f2e:	4b6c      	ldr	r3, [pc, #432]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0xe8>
 8005f3a:	e000      	b.n	8005f3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d063      	beq.n	8006012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f4a:	4b65      	ldr	r3, [pc, #404]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f56:	4b62      	ldr	r3, [pc, #392]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d11c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f62:	4b5f      	ldr	r3, [pc, #380]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d116      	bne.n	8005f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6e:	4b5c      	ldr	r3, [pc, #368]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_RCC_OscConfig+0x152>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d001      	beq.n	8005f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e1c4      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f86:	4b56      	ldr	r3, [pc, #344]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4952      	ldr	r1, [pc, #328]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f9a:	e03a      	b.n	8006012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d020      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fa4:	4b4f      	ldr	r3, [pc, #316]	; (80060e4 <HAL_RCC_OscConfig+0x2b0>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005faa:	f7fd fb83 	bl	80036b4 <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fb2:	f7fd fb7f 	bl	80036b4 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e1a5      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc4:	4b46      	ldr	r3, [pc, #280]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0f0      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd0:	4b43      	ldr	r3, [pc, #268]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	4940      	ldr	r1, [pc, #256]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	600b      	str	r3, [r1, #0]
 8005fe4:	e015      	b.n	8006012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fe6:	4b3f      	ldr	r3, [pc, #252]	; (80060e4 <HAL_RCC_OscConfig+0x2b0>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fec:	f7fd fb62 	bl	80036b4 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff4:	f7fd fb5e 	bl	80036b4 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e184      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006006:	4b36      	ldr	r3, [pc, #216]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1f0      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d030      	beq.n	8006080 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d016      	beq.n	8006054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006026:	4b30      	ldr	r3, [pc, #192]	; (80060e8 <HAL_RCC_OscConfig+0x2b4>)
 8006028:	2201      	movs	r2, #1
 800602a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602c:	f7fd fb42 	bl	80036b4 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006034:	f7fd fb3e 	bl	80036b4 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e164      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006046:	4b26      	ldr	r3, [pc, #152]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8006048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x200>
 8006052:	e015      	b.n	8006080 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006054:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <HAL_RCC_OscConfig+0x2b4>)
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800605a:	f7fd fb2b 	bl	80036b4 <HAL_GetTick>
 800605e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006062:	f7fd fb27 	bl	80036b4 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e14d      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006074:	4b1a      	ldr	r3, [pc, #104]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8006076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f0      	bne.n	8006062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80a0 	beq.w	80061ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006092:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10f      	bne.n	80060be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	4a0e      	ldr	r2, [pc, #56]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 80060a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ac:	6413      	str	r3, [r2, #64]	; 0x40
 80060ae:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <HAL_RCC_OscConfig+0x2ac>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b6:	60bb      	str	r3, [r7, #8]
 80060b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ba:	2301      	movs	r3, #1
 80060bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060be:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <HAL_RCC_OscConfig+0x2b8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d121      	bne.n	800610e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ca:	4b08      	ldr	r3, [pc, #32]	; (80060ec <HAL_RCC_OscConfig+0x2b8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a07      	ldr	r2, [pc, #28]	; (80060ec <HAL_RCC_OscConfig+0x2b8>)
 80060d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d6:	f7fd faed 	bl	80036b4 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060dc:	e011      	b.n	8006102 <HAL_RCC_OscConfig+0x2ce>
 80060de:	bf00      	nop
 80060e0:	40023800 	.word	0x40023800
 80060e4:	42470000 	.word	0x42470000
 80060e8:	42470e80 	.word	0x42470e80
 80060ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060f0:	f7fd fae0 	bl	80036b4 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e106      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006102:	4b85      	ldr	r3, [pc, #532]	; (8006318 <HAL_RCC_OscConfig+0x4e4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0f0      	beq.n	80060f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d106      	bne.n	8006124 <HAL_RCC_OscConfig+0x2f0>
 8006116:	4b81      	ldr	r3, [pc, #516]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611a:	4a80      	ldr	r2, [pc, #512]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 800611c:	f043 0301 	orr.w	r3, r3, #1
 8006120:	6713      	str	r3, [r2, #112]	; 0x70
 8006122:	e01c      	b.n	800615e <HAL_RCC_OscConfig+0x32a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b05      	cmp	r3, #5
 800612a:	d10c      	bne.n	8006146 <HAL_RCC_OscConfig+0x312>
 800612c:	4b7b      	ldr	r3, [pc, #492]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 800612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006130:	4a7a      	ldr	r2, [pc, #488]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 8006132:	f043 0304 	orr.w	r3, r3, #4
 8006136:	6713      	str	r3, [r2, #112]	; 0x70
 8006138:	4b78      	ldr	r3, [pc, #480]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	4a77      	ldr	r2, [pc, #476]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	6713      	str	r3, [r2, #112]	; 0x70
 8006144:	e00b      	b.n	800615e <HAL_RCC_OscConfig+0x32a>
 8006146:	4b75      	ldr	r3, [pc, #468]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 8006148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614a:	4a74      	ldr	r2, [pc, #464]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	6713      	str	r3, [r2, #112]	; 0x70
 8006152:	4b72      	ldr	r3, [pc, #456]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	4a71      	ldr	r2, [pc, #452]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 8006158:	f023 0304 	bic.w	r3, r3, #4
 800615c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d015      	beq.n	8006192 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006166:	f7fd faa5 	bl	80036b4 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800616c:	e00a      	b.n	8006184 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616e:	f7fd faa1 	bl	80036b4 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	f241 3288 	movw	r2, #5000	; 0x1388
 800617c:	4293      	cmp	r3, r2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e0c5      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006184:	4b65      	ldr	r3, [pc, #404]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 8006186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0ee      	beq.n	800616e <HAL_RCC_OscConfig+0x33a>
 8006190:	e014      	b.n	80061bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006192:	f7fd fa8f 	bl	80036b4 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006198:	e00a      	b.n	80061b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800619a:	f7fd fa8b 	bl	80036b4 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0af      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061b0:	4b5a      	ldr	r3, [pc, #360]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 80061b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1ee      	bne.n	800619a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d105      	bne.n	80061ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061c2:	4b56      	ldr	r3, [pc, #344]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	4a55      	ldr	r2, [pc, #340]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 80061c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 809b 	beq.w	800630e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061d8:	4b50      	ldr	r3, [pc, #320]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 030c 	and.w	r3, r3, #12
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d05c      	beq.n	800629e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d141      	bne.n	8006270 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ec:	4b4c      	ldr	r3, [pc, #304]	; (8006320 <HAL_RCC_OscConfig+0x4ec>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f2:	f7fd fa5f 	bl	80036b4 <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061fa:	f7fd fa5b 	bl	80036b4 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e081      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800620c:	4b43      	ldr	r3, [pc, #268]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f0      	bne.n	80061fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	019b      	lsls	r3, r3, #6
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	3b01      	subs	r3, #1
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	061b      	lsls	r3, r3, #24
 800623c:	4937      	ldr	r1, [pc, #220]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 800623e:	4313      	orrs	r3, r2
 8006240:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006242:	4b37      	ldr	r3, [pc, #220]	; (8006320 <HAL_RCC_OscConfig+0x4ec>)
 8006244:	2201      	movs	r2, #1
 8006246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fd fa34 	bl	80036b4 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006250:	f7fd fa30 	bl	80036b4 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e056      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006262:	4b2e      	ldr	r3, [pc, #184]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0x41c>
 800626e:	e04e      	b.n	800630e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006270:	4b2b      	ldr	r3, [pc, #172]	; (8006320 <HAL_RCC_OscConfig+0x4ec>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006276:	f7fd fa1d 	bl	80036b4 <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800627e:	f7fd fa19 	bl	80036b4 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e03f      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006290:	4b22      	ldr	r3, [pc, #136]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f0      	bne.n	800627e <HAL_RCC_OscConfig+0x44a>
 800629c:	e037      	b.n	800630e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e032      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062aa:	4b1c      	ldr	r3, [pc, #112]	; (800631c <HAL_RCC_OscConfig+0x4e8>)
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d028      	beq.n	800630a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d121      	bne.n	800630a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d11a      	bne.n	800630a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062da:	4013      	ands	r3, r2
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d111      	bne.n	800630a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	3b01      	subs	r3, #1
 80062f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d107      	bne.n	800630a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006306:	429a      	cmp	r2, r3
 8006308:	d001      	beq.n	800630e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40007000 	.word	0x40007000
 800631c:	40023800 	.word	0x40023800
 8006320:	42470060 	.word	0x42470060

08006324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0cc      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006338:	4b68      	ldr	r3, [pc, #416]	; (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d90c      	bls.n	8006360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006346:	4b65      	ldr	r3, [pc, #404]	; (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800634e:	4b63      	ldr	r3, [pc, #396]	; (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d001      	beq.n	8006360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0b8      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d020      	beq.n	80063ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006378:	4b59      	ldr	r3, [pc, #356]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	4a58      	ldr	r2, [pc, #352]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006390:	4b53      	ldr	r3, [pc, #332]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	4a52      	ldr	r2, [pc, #328]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800639a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800639c:	4b50      	ldr	r3, [pc, #320]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	494d      	ldr	r1, [pc, #308]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d044      	beq.n	8006444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d107      	bne.n	80063d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c2:	4b47      	ldr	r3, [pc, #284]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d119      	bne.n	8006402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e07f      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d003      	beq.n	80063e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d107      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e2:	4b3f      	ldr	r3, [pc, #252]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e06f      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f2:	4b3b      	ldr	r3, [pc, #236]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e067      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006402:	4b37      	ldr	r3, [pc, #220]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f023 0203 	bic.w	r2, r3, #3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	4934      	ldr	r1, [pc, #208]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006410:	4313      	orrs	r3, r2
 8006412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006414:	f7fd f94e 	bl	80036b4 <HAL_GetTick>
 8006418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641a:	e00a      	b.n	8006432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800641c:	f7fd f94a 	bl	80036b4 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	; 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e04f      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006432:	4b2b      	ldr	r3, [pc, #172]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 020c 	and.w	r2, r3, #12
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	429a      	cmp	r2, r3
 8006442:	d1eb      	bne.n	800641c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006444:	4b25      	ldr	r3, [pc, #148]	; (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d20c      	bcs.n	800646c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006452:	4b22      	ldr	r3, [pc, #136]	; (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800645a:	4b20      	ldr	r3, [pc, #128]	; (80064dc <HAL_RCC_ClockConfig+0x1b8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d001      	beq.n	800646c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e032      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006478:	4b19      	ldr	r3, [pc, #100]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4916      	ldr	r1, [pc, #88]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006486:	4313      	orrs	r3, r2
 8006488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006496:	4b12      	ldr	r3, [pc, #72]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	490e      	ldr	r1, [pc, #56]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064aa:	f000 f821 	bl	80064f0 <HAL_RCC_GetSysClockFreq>
 80064ae:	4602      	mov	r2, r0
 80064b0:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	091b      	lsrs	r3, r3, #4
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	490a      	ldr	r1, [pc, #40]	; (80064e4 <HAL_RCC_ClockConfig+0x1c0>)
 80064bc:	5ccb      	ldrb	r3, [r1, r3]
 80064be:	fa22 f303 	lsr.w	r3, r2, r3
 80064c2:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064c6:	4b09      	ldr	r3, [pc, #36]	; (80064ec <HAL_RCC_ClockConfig+0x1c8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fd f8ae 	bl	800362c <HAL_InitTick>

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	40023c00 	.word	0x40023c00
 80064e0:	40023800 	.word	0x40023800
 80064e4:	0800f37c 	.word	0x0800f37c
 80064e8:	2000000c 	.word	0x2000000c
 80064ec:	20000010 	.word	0x20000010

080064f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064f0:	b5b0      	push	{r4, r5, r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064f6:	2100      	movs	r1, #0
 80064f8:	6079      	str	r1, [r7, #4]
 80064fa:	2100      	movs	r1, #0
 80064fc:	60f9      	str	r1, [r7, #12]
 80064fe:	2100      	movs	r1, #0
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006502:	2100      	movs	r1, #0
 8006504:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006506:	4952      	ldr	r1, [pc, #328]	; (8006650 <HAL_RCC_GetSysClockFreq+0x160>)
 8006508:	6889      	ldr	r1, [r1, #8]
 800650a:	f001 010c 	and.w	r1, r1, #12
 800650e:	2908      	cmp	r1, #8
 8006510:	d00d      	beq.n	800652e <HAL_RCC_GetSysClockFreq+0x3e>
 8006512:	2908      	cmp	r1, #8
 8006514:	f200 8094 	bhi.w	8006640 <HAL_RCC_GetSysClockFreq+0x150>
 8006518:	2900      	cmp	r1, #0
 800651a:	d002      	beq.n	8006522 <HAL_RCC_GetSysClockFreq+0x32>
 800651c:	2904      	cmp	r1, #4
 800651e:	d003      	beq.n	8006528 <HAL_RCC_GetSysClockFreq+0x38>
 8006520:	e08e      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006522:	4b4c      	ldr	r3, [pc, #304]	; (8006654 <HAL_RCC_GetSysClockFreq+0x164>)
 8006524:	60bb      	str	r3, [r7, #8]
       break;
 8006526:	e08e      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006528:	4b4b      	ldr	r3, [pc, #300]	; (8006658 <HAL_RCC_GetSysClockFreq+0x168>)
 800652a:	60bb      	str	r3, [r7, #8]
      break;
 800652c:	e08b      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800652e:	4948      	ldr	r1, [pc, #288]	; (8006650 <HAL_RCC_GetSysClockFreq+0x160>)
 8006530:	6849      	ldr	r1, [r1, #4]
 8006532:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006536:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006538:	4945      	ldr	r1, [pc, #276]	; (8006650 <HAL_RCC_GetSysClockFreq+0x160>)
 800653a:	6849      	ldr	r1, [r1, #4]
 800653c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006540:	2900      	cmp	r1, #0
 8006542:	d024      	beq.n	800658e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006544:	4942      	ldr	r1, [pc, #264]	; (8006650 <HAL_RCC_GetSysClockFreq+0x160>)
 8006546:	6849      	ldr	r1, [r1, #4]
 8006548:	0989      	lsrs	r1, r1, #6
 800654a:	4608      	mov	r0, r1
 800654c:	f04f 0100 	mov.w	r1, #0
 8006550:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006554:	f04f 0500 	mov.w	r5, #0
 8006558:	ea00 0204 	and.w	r2, r0, r4
 800655c:	ea01 0305 	and.w	r3, r1, r5
 8006560:	493d      	ldr	r1, [pc, #244]	; (8006658 <HAL_RCC_GetSysClockFreq+0x168>)
 8006562:	fb01 f003 	mul.w	r0, r1, r3
 8006566:	2100      	movs	r1, #0
 8006568:	fb01 f102 	mul.w	r1, r1, r2
 800656c:	1844      	adds	r4, r0, r1
 800656e:	493a      	ldr	r1, [pc, #232]	; (8006658 <HAL_RCC_GetSysClockFreq+0x168>)
 8006570:	fba2 0101 	umull	r0, r1, r2, r1
 8006574:	1863      	adds	r3, r4, r1
 8006576:	4619      	mov	r1, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	461a      	mov	r2, r3
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	f7fa fb8a 	bl	8000c98 <__aeabi_uldivmod>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4613      	mov	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	e04a      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800658e:	4b30      	ldr	r3, [pc, #192]	; (8006650 <HAL_RCC_GetSysClockFreq+0x160>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	099b      	lsrs	r3, r3, #6
 8006594:	461a      	mov	r2, r3
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800659e:	f04f 0100 	mov.w	r1, #0
 80065a2:	ea02 0400 	and.w	r4, r2, r0
 80065a6:	ea03 0501 	and.w	r5, r3, r1
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	014b      	lsls	r3, r1, #5
 80065b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065bc:	0142      	lsls	r2, r0, #5
 80065be:	4610      	mov	r0, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	1b00      	subs	r0, r0, r4
 80065c4:	eb61 0105 	sbc.w	r1, r1, r5
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	f04f 0300 	mov.w	r3, #0
 80065d0:	018b      	lsls	r3, r1, #6
 80065d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065d6:	0182      	lsls	r2, r0, #6
 80065d8:	1a12      	subs	r2, r2, r0
 80065da:	eb63 0301 	sbc.w	r3, r3, r1
 80065de:	f04f 0000 	mov.w	r0, #0
 80065e2:	f04f 0100 	mov.w	r1, #0
 80065e6:	00d9      	lsls	r1, r3, #3
 80065e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065ec:	00d0      	lsls	r0, r2, #3
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	1912      	adds	r2, r2, r4
 80065f4:	eb45 0303 	adc.w	r3, r5, r3
 80065f8:	f04f 0000 	mov.w	r0, #0
 80065fc:	f04f 0100 	mov.w	r1, #0
 8006600:	0299      	lsls	r1, r3, #10
 8006602:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006606:	0290      	lsls	r0, r2, #10
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4610      	mov	r0, r2
 800660e:	4619      	mov	r1, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	461a      	mov	r2, r3
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	f7fa fb3e 	bl	8000c98 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4613      	mov	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <HAL_RCC_GetSysClockFreq+0x160>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	0c1b      	lsrs	r3, r3, #16
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	3301      	adds	r3, #1
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	fbb2 f3f3 	udiv	r3, r2, r3
 800663c:	60bb      	str	r3, [r7, #8]
      break;
 800663e:	e002      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006640:	4b04      	ldr	r3, [pc, #16]	; (8006654 <HAL_RCC_GetSysClockFreq+0x164>)
 8006642:	60bb      	str	r3, [r7, #8]
      break;
 8006644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006646:	68bb      	ldr	r3, [r7, #8]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bdb0      	pop	{r4, r5, r7, pc}
 8006650:	40023800 	.word	0x40023800
 8006654:	00f42400 	.word	0x00f42400
 8006658:	017d7840 	.word	0x017d7840

0800665c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006660:	4b03      	ldr	r3, [pc, #12]	; (8006670 <HAL_RCC_GetHCLKFreq+0x14>)
 8006662:	681b      	ldr	r3, [r3, #0]
}
 8006664:	4618      	mov	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	2000000c 	.word	0x2000000c

08006674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006678:	f7ff fff0 	bl	800665c <HAL_RCC_GetHCLKFreq>
 800667c:	4602      	mov	r2, r0
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	0a9b      	lsrs	r3, r3, #10
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	4903      	ldr	r1, [pc, #12]	; (8006698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800668a:	5ccb      	ldrb	r3, [r1, r3]
 800668c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006690:	4618      	mov	r0, r3
 8006692:	bd80      	pop	{r7, pc}
 8006694:	40023800 	.word	0x40023800
 8006698:	0800f38c 	.word	0x0800f38c

0800669c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066a0:	f7ff ffdc 	bl	800665c <HAL_RCC_GetHCLKFreq>
 80066a4:	4602      	mov	r2, r0
 80066a6:	4b05      	ldr	r3, [pc, #20]	; (80066bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	0b5b      	lsrs	r3, r3, #13
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	4903      	ldr	r1, [pc, #12]	; (80066c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066b2:	5ccb      	ldrb	r3, [r1, r3]
 80066b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	40023800 	.word	0x40023800
 80066c0:	0800f38c 	.word	0x0800f38c

080066c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e07b      	b.n	80067ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d108      	bne.n	80066f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066e6:	d009      	beq.n	80066fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	61da      	str	r2, [r3, #28]
 80066ee:	e005      	b.n	80066fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fc fd40 	bl	800319c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006780:	ea42 0103 	orr.w	r1, r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	0c1b      	lsrs	r3, r3, #16
 800679a:	f003 0104 	and.w	r1, r3, #4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	f003 0210 	and.w	r2, r3, #16
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69da      	ldr	r2, [r3, #28]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_SPI_Transmit_DMA+0x20>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e09b      	b.n	8006930 <HAL_SPI_Transmit_DMA+0x158>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b01      	cmp	r3, #1
 800680a:	d002      	beq.n	8006812 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800680c:	2302      	movs	r3, #2
 800680e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006810:	e089      	b.n	8006926 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <HAL_SPI_Transmit_DMA+0x46>
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006822:	e080      	b.n	8006926 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2203      	movs	r2, #3
 8006828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	88fa      	ldrh	r2, [r7, #6]
 800683c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	88fa      	ldrh	r2, [r7, #6]
 8006842:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800686a:	d10f      	bne.n	800688c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800687a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800688a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006890:	4a29      	ldr	r2, [pc, #164]	; (8006938 <HAL_SPI_Transmit_DMA+0x160>)
 8006892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006898:	4a28      	ldr	r2, [pc, #160]	; (800693c <HAL_SPI_Transmit_DMA+0x164>)
 800689a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a0:	4a27      	ldr	r2, [pc, #156]	; (8006940 <HAL_SPI_Transmit_DMA+0x168>)
 80068a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a8:	2200      	movs	r2, #0
 80068aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	4619      	mov	r1, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068c4:	f7fd fce8 	bl	8004298 <HAL_DMA_Start_IT>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00c      	beq.n	80068e8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d2:	f043 0210 	orr.w	r2, r3, #16
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80068e6:	e01e      	b.n	8006926 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b40      	cmp	r3, #64	; 0x40
 80068f4:	d007      	beq.n	8006906 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006904:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0220 	orr.w	r2, r2, #32
 8006914:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0202 	orr.w	r2, r2, #2
 8006924:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800692e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	08006c15 	.word	0x08006c15
 800693c:	08006b6d 	.word	0x08006b6d
 8006940:	08006c31 	.word	0x08006c31

08006944 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	099b      	lsrs	r3, r3, #6
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10f      	bne.n	8006988 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	099b      	lsrs	r3, r3, #6
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
    return;
 8006986:	e0d7      	b.n	8006b38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <HAL_SPI_IRQHandler+0x66>
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	09db      	lsrs	r3, r3, #7
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
    return;
 80069a8:	e0c6      	b.n	8006b38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10c      	bne.n	80069d0 <HAL_SPI_IRQHandler+0x8c>
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	099b      	lsrs	r3, r3, #6
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	0a1b      	lsrs	r3, r3, #8
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 80b4 	beq.w	8006b38 <HAL_SPI_IRQHandler+0x1f4>
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80ad 	beq.w	8006b38 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	099b      	lsrs	r3, r3, #6
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d023      	beq.n	8006a32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d011      	beq.n	8006a1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fa:	f043 0204 	orr.w	r2, r3, #4
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	e00b      	b.n	8006a32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	613b      	str	r3, [r7, #16]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	693b      	ldr	r3, [r7, #16]
        return;
 8006a30:	e082      	b.n	8006b38 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	095b      	lsrs	r3, r3, #5
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d014      	beq.n	8006a68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a42:	f043 0201 	orr.w	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00c      	beq.n	8006a8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	f043 0208 	orr.w	r2, r3, #8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a80:	2300      	movs	r3, #0
 8006a82:	60bb      	str	r3, [r7, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d04f      	beq.n	8006b36 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006aa4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <HAL_SPI_IRQHandler+0x17e>
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d034      	beq.n	8006b2c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0203 	bic.w	r2, r2, #3
 8006ad0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d011      	beq.n	8006afe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ade:	4a18      	ldr	r2, [pc, #96]	; (8006b40 <HAL_SPI_IRQHandler+0x1fc>)
 8006ae0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fd fc9e 	bl	8004428 <HAL_DMA_Abort_IT>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0a:	4a0d      	ldr	r2, [pc, #52]	; (8006b40 <HAL_SPI_IRQHandler+0x1fc>)
 8006b0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fd fc88 	bl	8004428 <HAL_DMA_Abort_IT>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006b2a:	e003      	b.n	8006b34 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f813 	bl	8006b58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006b32:	e000      	b.n	8006b36 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006b34:	bf00      	nop
    return;
 8006b36:	bf00      	nop
  }
}
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	08006c71 	.word	0x08006c71

08006b44 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b7a:	f7fc fd9b 	bl	80036b4 <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8e:	d03b      	beq.n	8006c08 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0220 	bic.w	r2, r2, #32
 8006b9e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0202 	bic.w	r2, r2, #2
 8006bae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	2164      	movs	r1, #100	; 0x64
 8006bb4:	6978      	ldr	r0, [r7, #20]
 8006bb6:	f000 f8f7 	bl	8006da8 <SPI_EndRxTxTransaction>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc4:	f043 0220 	orr.w	r2, r3, #32
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2200      	movs	r2, #0
 8006bee:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006c00:	6978      	ldr	r0, [r7, #20]
 8006c02:	f7ff ffa9 	bl	8006b58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006c06:	e002      	b.n	8006c0e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006c08:	6978      	ldr	r0, [r7, #20]
 8006c0a:	f7fb f86d 	bl	8001ce8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f7ff ff8e 	bl	8006b44 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0203 	bic.w	r2, r2, #3
 8006c4c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c52:	f043 0210 	orr.w	r2, r3, #16
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f7ff ff78 	bl	8006b58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f7ff ff64 	bl	8006b58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c90:	bf00      	nop
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ca8:	f7fc fd04 	bl	80036b4 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	1a9b      	subs	r3, r3, r2
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cb8:	f7fc fcfc 	bl	80036b4 <HAL_GetTick>
 8006cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cbe:	4b39      	ldr	r3, [pc, #228]	; (8006da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	015b      	lsls	r3, r3, #5
 8006cc4:	0d1b      	lsrs	r3, r3, #20
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	fb02 f303 	mul.w	r3, r2, r3
 8006ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cce:	e054      	b.n	8006d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd6:	d050      	beq.n	8006d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cd8:	f7fc fcec 	bl	80036b4 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d902      	bls.n	8006cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d13d      	bne.n	8006d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d06:	d111      	bne.n	8006d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d10:	d004      	beq.n	8006d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d1a:	d107      	bne.n	8006d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d34:	d10f      	bne.n	8006d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e017      	b.n	8006d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4013      	ands	r3, r2
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	bf0c      	ite	eq
 8006d8a:	2301      	moveq	r3, #1
 8006d8c:	2300      	movne	r3, #0
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d19b      	bne.n	8006cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	2000000c 	.word	0x2000000c

08006da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af02      	add	r7, sp, #8
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006db4:	4b1b      	ldr	r3, [pc, #108]	; (8006e24 <SPI_EndRxTxTransaction+0x7c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <SPI_EndRxTxTransaction+0x80>)
 8006dba:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbe:	0d5b      	lsrs	r3, r3, #21
 8006dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006dc4:	fb02 f303 	mul.w	r3, r2, r3
 8006dc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd2:	d112      	bne.n	8006dfa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2180      	movs	r1, #128	; 0x80
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f7ff ff5a 	bl	8006c98 <SPI_WaitFlagStateUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d016      	beq.n	8006e18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dee:	f043 0220 	orr.w	r2, r3, #32
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e00f      	b.n	8006e1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e10:	2b80      	cmp	r3, #128	; 0x80
 8006e12:	d0f2      	beq.n	8006dfa <SPI_EndRxTxTransaction+0x52>
 8006e14:	e000      	b.n	8006e18 <SPI_EndRxTxTransaction+0x70>
        break;
 8006e16:	bf00      	nop
  }

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	2000000c 	.word	0x2000000c
 8006e28:	165e9f81 	.word	0x165e9f81

08006e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e03f      	b.n	8006ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fc fa24 	bl	80032a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2224      	movs	r2, #36	; 0x24
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fcdb 	bl	800782c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d11d      	bne.n	8006f1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_UART_Receive_IT+0x26>
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e016      	b.n	8006f1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_UART_Receive_IT+0x38>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e00f      	b.n	8006f1e <HAL_UART_Receive_IT+0x58>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 fab6 	bl	8007484 <UART_Start_Receive_IT>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	e000      	b.n	8006f1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f1c:	2302      	movs	r3, #2
  }
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b0ba      	sub	sp, #232	; 0xe8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10f      	bne.n	8006f8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <HAL_UART_IRQHandler+0x66>
 8006f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fb95 	bl	80076b6 <UART_Receive_IT>
      return;
 8006f8c:	e256      	b.n	800743c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 80de 	beq.w	8007154 <HAL_UART_IRQHandler+0x22c>
 8006f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 80d1 	beq.w	8007154 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <HAL_UART_IRQHandler+0xae>
 8006fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f043 0201 	orr.w	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00b      	beq.n	8006ffa <HAL_UART_IRQHandler+0xd2>
 8006fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	f043 0202 	orr.w	r2, r3, #2
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <HAL_UART_IRQHandler+0xf6>
 8007006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f043 0204 	orr.w	r2, r3, #4
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800701e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d011      	beq.n	800704e <HAL_UART_IRQHandler+0x126>
 800702a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d105      	bne.n	8007042 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	f043 0208 	orr.w	r2, r3, #8
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 81ed 	beq.w	8007432 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <HAL_UART_IRQHandler+0x14e>
 8007064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fb20 	bl	80076b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007080:	2b40      	cmp	r3, #64	; 0x40
 8007082:	bf0c      	ite	eq
 8007084:	2301      	moveq	r3, #1
 8007086:	2300      	movne	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	f003 0308 	and.w	r3, r3, #8
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <HAL_UART_IRQHandler+0x17a>
 800709a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d04f      	beq.n	8007142 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa28 	bl	80074f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d141      	bne.n	800713a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3314      	adds	r3, #20
 80070bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80070cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3314      	adds	r3, #20
 80070de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1d9      	bne.n	80070b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	2b00      	cmp	r3, #0
 8007108:	d013      	beq.n	8007132 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710e:	4a7d      	ldr	r2, [pc, #500]	; (8007304 <HAL_UART_IRQHandler+0x3dc>)
 8007110:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	4618      	mov	r0, r3
 8007118:	f7fd f986 	bl	8004428 <HAL_DMA_Abort_IT>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d016      	beq.n	8007150 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800712c:	4610      	mov	r0, r2
 800712e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007130:	e00e      	b.n	8007150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f990 	bl	8007458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007138:	e00a      	b.n	8007150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f98c 	bl	8007458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007140:	e006      	b.n	8007150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f988 	bl	8007458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800714e:	e170      	b.n	8007432 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007150:	bf00      	nop
    return;
 8007152:	e16e      	b.n	8007432 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007158:	2b01      	cmp	r3, #1
 800715a:	f040 814a 	bne.w	80073f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800715e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007162:	f003 0310 	and.w	r3, r3, #16
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 8143 	beq.w	80073f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800716c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 813c 	beq.w	80073f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800717a:	2300      	movs	r3, #0
 800717c:	60bb      	str	r3, [r7, #8]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60bb      	str	r3, [r7, #8]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	60bb      	str	r3, [r7, #8]
 800718e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	f040 80b4 	bne.w	8007308 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8140 	beq.w	8007436 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071be:	429a      	cmp	r2, r3
 80071c0:	f080 8139 	bcs.w	8007436 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d6:	f000 8088 	beq.w	80072ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	330c      	adds	r3, #12
 80071e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	330c      	adds	r3, #12
 8007202:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007206:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800720a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007212:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800721e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1d9      	bne.n	80071da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3314      	adds	r3, #20
 800722c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007238:	f023 0301 	bic.w	r3, r3, #1
 800723c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3314      	adds	r3, #20
 8007246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800724a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800724e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007252:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800725c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e1      	bne.n	8007226 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3314      	adds	r3, #20
 8007268:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3314      	adds	r3, #20
 8007282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007286:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007288:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800728c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e3      	bne.n	8007262 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2220      	movs	r2, #32
 800729e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	330c      	adds	r3, #12
 80072ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ba:	f023 0310 	bic.w	r3, r3, #16
 80072be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	330c      	adds	r3, #12
 80072c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80072cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80072ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e3      	bne.n	80072a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fd f82f 	bl	8004348 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f8b6 	bl	800746c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007300:	e099      	b.n	8007436 <HAL_UART_IRQHandler+0x50e>
 8007302:	bf00      	nop
 8007304:	080075bf 	.word	0x080075bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007310:	b29b      	uxth	r3, r3
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 808b 	beq.w	800743a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8086 	beq.w	800743a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007344:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007352:	647a      	str	r2, [r7, #68]	; 0x44
 8007354:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e3      	bne.n	800732e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3314      	adds	r3, #20
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	623b      	str	r3, [r7, #32]
   return(result);
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	f023 0301 	bic.w	r3, r3, #1
 800737c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3314      	adds	r3, #20
 8007386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800738a:	633a      	str	r2, [r7, #48]	; 0x30
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e3      	bne.n	8007366 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	330c      	adds	r3, #12
 80073b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0310 	bic.w	r3, r3, #16
 80073c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80073d0:	61fa      	str	r2, [r7, #28]
 80073d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	69b9      	ldr	r1, [r7, #24]
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	617b      	str	r3, [r7, #20]
   return(result);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e3      	bne.n	80073ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f83e 	bl	800746c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073f0:	e023      	b.n	800743a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <HAL_UART_IRQHandler+0x4ea>
 80073fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f8eb 	bl	80075e6 <UART_Transmit_IT>
    return;
 8007410:	e014      	b.n	800743c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00e      	beq.n	800743c <HAL_UART_IRQHandler+0x514>
 800741e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007426:	2b00      	cmp	r3, #0
 8007428:	d008      	beq.n	800743c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f92b 	bl	8007686 <UART_EndTransmit_IT>
    return;
 8007430:	e004      	b.n	800743c <HAL_UART_IRQHandler+0x514>
    return;
 8007432:	bf00      	nop
 8007434:	e002      	b.n	800743c <HAL_UART_IRQHandler+0x514>
      return;
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <HAL_UART_IRQHandler+0x514>
      return;
 800743a:	bf00      	nop
  }
}
 800743c:	37e8      	adds	r7, #232	; 0xe8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop

08007444 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	88fa      	ldrh	r2, [r7, #6]
 800749c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	88fa      	ldrh	r2, [r7, #6]
 80074a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2222      	movs	r2, #34	; 0x22
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	695a      	ldr	r2, [r3, #20]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f042 0201 	orr.w	r2, r2, #1
 80074d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0220 	orr.w	r2, r2, #32
 80074e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b095      	sub	sp, #84	; 0x54
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007520:	643a      	str	r2, [r7, #64]	; 0x40
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e5      	bne.n	8007500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3314      	adds	r3, #20
 800753a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	61fb      	str	r3, [r7, #28]
   return(result);
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f023 0301 	bic.w	r3, r3, #1
 800754a:	64bb      	str	r3, [r7, #72]	; 0x48
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3314      	adds	r3, #20
 8007552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800755a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e5      	bne.n	8007534 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756c:	2b01      	cmp	r3, #1
 800756e:	d119      	bne.n	80075a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f023 0310 	bic.w	r3, r3, #16
 8007586:	647b      	str	r3, [r7, #68]	; 0x44
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	330c      	adds	r3, #12
 800758e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007590:	61ba      	str	r2, [r7, #24]
 8007592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6979      	ldr	r1, [r7, #20]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	613b      	str	r3, [r7, #16]
   return(result);
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e5      	bne.n	8007570 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80075b2:	bf00      	nop
 80075b4:	3754      	adds	r7, #84	; 0x54
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f7ff ff3d 	bl	8007458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075de:	bf00      	nop
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b085      	sub	sp, #20
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b21      	cmp	r3, #33	; 0x21
 80075f8:	d13e      	bne.n	8007678 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007602:	d114      	bne.n	800762e <UART_Transmit_IT+0x48>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d110      	bne.n	800762e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007620:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	1c9a      	adds	r2, r3, #2
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	621a      	str	r2, [r3, #32]
 800762c:	e008      	b.n	8007640 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	1c59      	adds	r1, r3, #1
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6211      	str	r1, [r2, #32]
 8007638:	781a      	ldrb	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007644:	b29b      	uxth	r3, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	b29b      	uxth	r3, r3
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	4619      	mov	r1, r3
 800764e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10f      	bne.n	8007674 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007662:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007672:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e000      	b.n	800767a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007678:	2302      	movs	r3, #2
  }
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800769c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff fecc 	bl	8007444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b08c      	sub	sp, #48	; 0x30
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b22      	cmp	r3, #34	; 0x22
 80076c8:	f040 80ab 	bne.w	8007822 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d4:	d117      	bne.n	8007706 <UART_Receive_IT+0x50>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d113      	bne.n	8007706 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fe:	1c9a      	adds	r2, r3, #2
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	629a      	str	r2, [r3, #40]	; 0x28
 8007704:	e026      	b.n	8007754 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800770c:	2300      	movs	r3, #0
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007718:	d007      	beq.n	800772a <UART_Receive_IT+0x74>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10a      	bne.n	8007738 <UART_Receive_IT+0x82>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	b2da      	uxtb	r2, r3
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	e008      	b.n	800774a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007744:	b2da      	uxtb	r2, r3
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29b      	uxth	r3, r3
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	4619      	mov	r1, r3
 8007762:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007764:	2b00      	cmp	r3, #0
 8007766:	d15a      	bne.n	800781e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0220 	bic.w	r2, r2, #32
 8007776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695a      	ldr	r2, [r3, #20]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0201 	bic.w	r2, r2, #1
 8007796:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d135      	bne.n	8007814 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	613b      	str	r3, [r7, #16]
   return(result);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f023 0310 	bic.w	r3, r3, #16
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	330c      	adds	r3, #12
 80077cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ce:	623a      	str	r2, [r7, #32]
 80077d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	69f9      	ldr	r1, [r7, #28]
 80077d4:	6a3a      	ldr	r2, [r7, #32]
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	61bb      	str	r3, [r7, #24]
   return(result);
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e5      	bne.n	80077ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0310 	and.w	r3, r3, #16
 80077ec:	2b10      	cmp	r3, #16
 80077ee:	d10a      	bne.n	8007806 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff fe2d 	bl	800746c <HAL_UARTEx_RxEventCallback>
 8007812:	e002      	b.n	800781a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7fa fda9 	bl	800236c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	e002      	b.n	8007824 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	e000      	b.n	8007824 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007822:	2302      	movs	r3, #2
  }
}
 8007824:	4618      	mov	r0, r3
 8007826:	3730      	adds	r7, #48	; 0x30
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007830:	b09f      	sub	sp, #124	; 0x7c
 8007832:	af00      	add	r7, sp, #0
 8007834:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007842:	68d9      	ldr	r1, [r3, #12]
 8007844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	ea40 0301 	orr.w	r3, r0, r1
 800784c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800784e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	431a      	orrs	r2, r3
 8007858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	431a      	orrs	r2, r3
 800785e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	4313      	orrs	r3, r2
 8007864:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007870:	f021 010c 	bic.w	r1, r1, #12
 8007874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800787a:	430b      	orrs	r3, r1
 800787c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800787e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788a:	6999      	ldr	r1, [r3, #24]
 800788c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	ea40 0301 	orr.w	r3, r0, r1
 8007894:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4bc5      	ldr	r3, [pc, #788]	; (8007bb0 <UART_SetConfig+0x384>)
 800789c:	429a      	cmp	r2, r3
 800789e:	d004      	beq.n	80078aa <UART_SetConfig+0x7e>
 80078a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4bc3      	ldr	r3, [pc, #780]	; (8007bb4 <UART_SetConfig+0x388>)
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d103      	bne.n	80078b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078aa:	f7fe fef7 	bl	800669c <HAL_RCC_GetPCLK2Freq>
 80078ae:	6778      	str	r0, [r7, #116]	; 0x74
 80078b0:	e002      	b.n	80078b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078b2:	f7fe fedf 	bl	8006674 <HAL_RCC_GetPCLK1Freq>
 80078b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078c0:	f040 80b6 	bne.w	8007a30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c6:	461c      	mov	r4, r3
 80078c8:	f04f 0500 	mov.w	r5, #0
 80078cc:	4622      	mov	r2, r4
 80078ce:	462b      	mov	r3, r5
 80078d0:	1891      	adds	r1, r2, r2
 80078d2:	6439      	str	r1, [r7, #64]	; 0x40
 80078d4:	415b      	adcs	r3, r3
 80078d6:	647b      	str	r3, [r7, #68]	; 0x44
 80078d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078dc:	1912      	adds	r2, r2, r4
 80078de:	eb45 0303 	adc.w	r3, r5, r3
 80078e2:	f04f 0000 	mov.w	r0, #0
 80078e6:	f04f 0100 	mov.w	r1, #0
 80078ea:	00d9      	lsls	r1, r3, #3
 80078ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078f0:	00d0      	lsls	r0, r2, #3
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	1911      	adds	r1, r2, r4
 80078f8:	6639      	str	r1, [r7, #96]	; 0x60
 80078fa:	416b      	adcs	r3, r5
 80078fc:	667b      	str	r3, [r7, #100]	; 0x64
 80078fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	461a      	mov	r2, r3
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	1891      	adds	r1, r2, r2
 800790a:	63b9      	str	r1, [r7, #56]	; 0x38
 800790c:	415b      	adcs	r3, r3
 800790e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007914:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007918:	f7f9 f9be 	bl	8000c98 <__aeabi_uldivmod>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4ba5      	ldr	r3, [pc, #660]	; (8007bb8 <UART_SetConfig+0x38c>)
 8007922:	fba3 2302 	umull	r2, r3, r3, r2
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	011e      	lsls	r6, r3, #4
 800792a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800792c:	461c      	mov	r4, r3
 800792e:	f04f 0500 	mov.w	r5, #0
 8007932:	4622      	mov	r2, r4
 8007934:	462b      	mov	r3, r5
 8007936:	1891      	adds	r1, r2, r2
 8007938:	6339      	str	r1, [r7, #48]	; 0x30
 800793a:	415b      	adcs	r3, r3
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
 800793e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007942:	1912      	adds	r2, r2, r4
 8007944:	eb45 0303 	adc.w	r3, r5, r3
 8007948:	f04f 0000 	mov.w	r0, #0
 800794c:	f04f 0100 	mov.w	r1, #0
 8007950:	00d9      	lsls	r1, r3, #3
 8007952:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007956:	00d0      	lsls	r0, r2, #3
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	1911      	adds	r1, r2, r4
 800795e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007960:	416b      	adcs	r3, r5
 8007962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	461a      	mov	r2, r3
 800796a:	f04f 0300 	mov.w	r3, #0
 800796e:	1891      	adds	r1, r2, r2
 8007970:	62b9      	str	r1, [r7, #40]	; 0x28
 8007972:	415b      	adcs	r3, r3
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800797a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800797e:	f7f9 f98b 	bl	8000c98 <__aeabi_uldivmod>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4b8c      	ldr	r3, [pc, #560]	; (8007bb8 <UART_SetConfig+0x38c>)
 8007988:	fba3 1302 	umull	r1, r3, r3, r2
 800798c:	095b      	lsrs	r3, r3, #5
 800798e:	2164      	movs	r1, #100	; 0x64
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	3332      	adds	r3, #50	; 0x32
 800799a:	4a87      	ldr	r2, [pc, #540]	; (8007bb8 <UART_SetConfig+0x38c>)
 800799c:	fba2 2303 	umull	r2, r3, r2, r3
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079a8:	441e      	add	r6, r3
 80079aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ac:	4618      	mov	r0, r3
 80079ae:	f04f 0100 	mov.w	r1, #0
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	1894      	adds	r4, r2, r2
 80079b8:	623c      	str	r4, [r7, #32]
 80079ba:	415b      	adcs	r3, r3
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
 80079be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079c2:	1812      	adds	r2, r2, r0
 80079c4:	eb41 0303 	adc.w	r3, r1, r3
 80079c8:	f04f 0400 	mov.w	r4, #0
 80079cc:	f04f 0500 	mov.w	r5, #0
 80079d0:	00dd      	lsls	r5, r3, #3
 80079d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079d6:	00d4      	lsls	r4, r2, #3
 80079d8:	4622      	mov	r2, r4
 80079da:	462b      	mov	r3, r5
 80079dc:	1814      	adds	r4, r2, r0
 80079de:	653c      	str	r4, [r7, #80]	; 0x50
 80079e0:	414b      	adcs	r3, r1
 80079e2:	657b      	str	r3, [r7, #84]	; 0x54
 80079e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	461a      	mov	r2, r3
 80079ea:	f04f 0300 	mov.w	r3, #0
 80079ee:	1891      	adds	r1, r2, r2
 80079f0:	61b9      	str	r1, [r7, #24]
 80079f2:	415b      	adcs	r3, r3
 80079f4:	61fb      	str	r3, [r7, #28]
 80079f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079fe:	f7f9 f94b 	bl	8000c98 <__aeabi_uldivmod>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4b6c      	ldr	r3, [pc, #432]	; (8007bb8 <UART_SetConfig+0x38c>)
 8007a08:	fba3 1302 	umull	r1, r3, r3, r2
 8007a0c:	095b      	lsrs	r3, r3, #5
 8007a0e:	2164      	movs	r1, #100	; 0x64
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	3332      	adds	r3, #50	; 0x32
 8007a1a:	4a67      	ldr	r2, [pc, #412]	; (8007bb8 <UART_SetConfig+0x38c>)
 8007a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	f003 0207 	and.w	r2, r3, #7
 8007a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4432      	add	r2, r6
 8007a2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a2e:	e0b9      	b.n	8007ba4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a32:	461c      	mov	r4, r3
 8007a34:	f04f 0500 	mov.w	r5, #0
 8007a38:	4622      	mov	r2, r4
 8007a3a:	462b      	mov	r3, r5
 8007a3c:	1891      	adds	r1, r2, r2
 8007a3e:	6139      	str	r1, [r7, #16]
 8007a40:	415b      	adcs	r3, r3
 8007a42:	617b      	str	r3, [r7, #20]
 8007a44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a48:	1912      	adds	r2, r2, r4
 8007a4a:	eb45 0303 	adc.w	r3, r5, r3
 8007a4e:	f04f 0000 	mov.w	r0, #0
 8007a52:	f04f 0100 	mov.w	r1, #0
 8007a56:	00d9      	lsls	r1, r3, #3
 8007a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a5c:	00d0      	lsls	r0, r2, #3
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	eb12 0804 	adds.w	r8, r2, r4
 8007a66:	eb43 0905 	adc.w	r9, r3, r5
 8007a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f04f 0100 	mov.w	r1, #0
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	008b      	lsls	r3, r1, #2
 8007a7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a82:	0082      	lsls	r2, r0, #2
 8007a84:	4640      	mov	r0, r8
 8007a86:	4649      	mov	r1, r9
 8007a88:	f7f9 f906 	bl	8000c98 <__aeabi_uldivmod>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4b49      	ldr	r3, [pc, #292]	; (8007bb8 <UART_SetConfig+0x38c>)
 8007a92:	fba3 2302 	umull	r2, r3, r3, r2
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	011e      	lsls	r6, r3, #4
 8007a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f04f 0100 	mov.w	r1, #0
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	1894      	adds	r4, r2, r2
 8007aa8:	60bc      	str	r4, [r7, #8]
 8007aaa:	415b      	adcs	r3, r3
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ab2:	1812      	adds	r2, r2, r0
 8007ab4:	eb41 0303 	adc.w	r3, r1, r3
 8007ab8:	f04f 0400 	mov.w	r4, #0
 8007abc:	f04f 0500 	mov.w	r5, #0
 8007ac0:	00dd      	lsls	r5, r3, #3
 8007ac2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ac6:	00d4      	lsls	r4, r2, #3
 8007ac8:	4622      	mov	r2, r4
 8007aca:	462b      	mov	r3, r5
 8007acc:	1814      	adds	r4, r2, r0
 8007ace:	64bc      	str	r4, [r7, #72]	; 0x48
 8007ad0:	414b      	adcs	r3, r1
 8007ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f04f 0100 	mov.w	r1, #0
 8007ade:	f04f 0200 	mov.w	r2, #0
 8007ae2:	f04f 0300 	mov.w	r3, #0
 8007ae6:	008b      	lsls	r3, r1, #2
 8007ae8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007aec:	0082      	lsls	r2, r0, #2
 8007aee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007af2:	f7f9 f8d1 	bl	8000c98 <__aeabi_uldivmod>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4b2f      	ldr	r3, [pc, #188]	; (8007bb8 <UART_SetConfig+0x38c>)
 8007afc:	fba3 1302 	umull	r1, r3, r3, r2
 8007b00:	095b      	lsrs	r3, r3, #5
 8007b02:	2164      	movs	r1, #100	; 0x64
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	3332      	adds	r3, #50	; 0x32
 8007b0e:	4a2a      	ldr	r2, [pc, #168]	; (8007bb8 <UART_SetConfig+0x38c>)
 8007b10:	fba2 2303 	umull	r2, r3, r2, r3
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b1a:	441e      	add	r6, r3
 8007b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f04f 0100 	mov.w	r1, #0
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	1894      	adds	r4, r2, r2
 8007b2a:	603c      	str	r4, [r7, #0]
 8007b2c:	415b      	adcs	r3, r3
 8007b2e:	607b      	str	r3, [r7, #4]
 8007b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b34:	1812      	adds	r2, r2, r0
 8007b36:	eb41 0303 	adc.w	r3, r1, r3
 8007b3a:	f04f 0400 	mov.w	r4, #0
 8007b3e:	f04f 0500 	mov.w	r5, #0
 8007b42:	00dd      	lsls	r5, r3, #3
 8007b44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b48:	00d4      	lsls	r4, r2, #3
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	eb12 0a00 	adds.w	sl, r2, r0
 8007b52:	eb43 0b01 	adc.w	fp, r3, r1
 8007b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f04f 0100 	mov.w	r1, #0
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	008b      	lsls	r3, r1, #2
 8007b6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b6e:	0082      	lsls	r2, r0, #2
 8007b70:	4650      	mov	r0, sl
 8007b72:	4659      	mov	r1, fp
 8007b74:	f7f9 f890 	bl	8000c98 <__aeabi_uldivmod>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4b0e      	ldr	r3, [pc, #56]	; (8007bb8 <UART_SetConfig+0x38c>)
 8007b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8007b82:	095b      	lsrs	r3, r3, #5
 8007b84:	2164      	movs	r1, #100	; 0x64
 8007b86:	fb01 f303 	mul.w	r3, r1, r3
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	3332      	adds	r3, #50	; 0x32
 8007b90:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <UART_SetConfig+0x38c>)
 8007b92:	fba2 2303 	umull	r2, r3, r2, r3
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	f003 020f 	and.w	r2, r3, #15
 8007b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4432      	add	r2, r6
 8007ba2:	609a      	str	r2, [r3, #8]
}
 8007ba4:	bf00      	nop
 8007ba6:	377c      	adds	r7, #124	; 0x7c
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bae:	bf00      	nop
 8007bb0:	40011000 	.word	0x40011000
 8007bb4:	40011400 	.word	0x40011400
 8007bb8:	51eb851f 	.word	0x51eb851f

08007bbc <__errno>:
 8007bbc:	4b01      	ldr	r3, [pc, #4]	; (8007bc4 <__errno+0x8>)
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20000018 	.word	0x20000018

08007bc8 <__libc_init_array>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	4d0d      	ldr	r5, [pc, #52]	; (8007c00 <__libc_init_array+0x38>)
 8007bcc:	4c0d      	ldr	r4, [pc, #52]	; (8007c04 <__libc_init_array+0x3c>)
 8007bce:	1b64      	subs	r4, r4, r5
 8007bd0:	10a4      	asrs	r4, r4, #2
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	42a6      	cmp	r6, r4
 8007bd6:	d109      	bne.n	8007bec <__libc_init_array+0x24>
 8007bd8:	4d0b      	ldr	r5, [pc, #44]	; (8007c08 <__libc_init_array+0x40>)
 8007bda:	4c0c      	ldr	r4, [pc, #48]	; (8007c0c <__libc_init_array+0x44>)
 8007bdc:	f004 fcbe 	bl	800c55c <_init>
 8007be0:	1b64      	subs	r4, r4, r5
 8007be2:	10a4      	asrs	r4, r4, #2
 8007be4:	2600      	movs	r6, #0
 8007be6:	42a6      	cmp	r6, r4
 8007be8:	d105      	bne.n	8007bf6 <__libc_init_array+0x2e>
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
 8007bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bf0:	4798      	blx	r3
 8007bf2:	3601      	adds	r6, #1
 8007bf4:	e7ee      	b.n	8007bd4 <__libc_init_array+0xc>
 8007bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bfa:	4798      	blx	r3
 8007bfc:	3601      	adds	r6, #1
 8007bfe:	e7f2      	b.n	8007be6 <__libc_init_array+0x1e>
 8007c00:	0800f85c 	.word	0x0800f85c
 8007c04:	0800f85c 	.word	0x0800f85c
 8007c08:	0800f85c 	.word	0x0800f85c
 8007c0c:	0800f860 	.word	0x0800f860

08007c10 <malloc>:
 8007c10:	4b02      	ldr	r3, [pc, #8]	; (8007c1c <malloc+0xc>)
 8007c12:	4601      	mov	r1, r0
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	f000 b869 	b.w	8007cec <_malloc_r>
 8007c1a:	bf00      	nop
 8007c1c:	20000018 	.word	0x20000018

08007c20 <memcpy>:
 8007c20:	440a      	add	r2, r1
 8007c22:	4291      	cmp	r1, r2
 8007c24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c28:	d100      	bne.n	8007c2c <memcpy+0xc>
 8007c2a:	4770      	bx	lr
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c36:	4291      	cmp	r1, r2
 8007c38:	d1f9      	bne.n	8007c2e <memcpy+0xe>
 8007c3a:	bd10      	pop	{r4, pc}

08007c3c <memset>:
 8007c3c:	4402      	add	r2, r0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d100      	bne.n	8007c46 <memset+0xa>
 8007c44:	4770      	bx	lr
 8007c46:	f803 1b01 	strb.w	r1, [r3], #1
 8007c4a:	e7f9      	b.n	8007c40 <memset+0x4>

08007c4c <_free_r>:
 8007c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	d048      	beq.n	8007ce4 <_free_r+0x98>
 8007c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c56:	9001      	str	r0, [sp, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c5e:	bfb8      	it	lt
 8007c60:	18e4      	addlt	r4, r4, r3
 8007c62:	f003 f927 	bl	800aeb4 <__malloc_lock>
 8007c66:	4a20      	ldr	r2, [pc, #128]	; (8007ce8 <_free_r+0x9c>)
 8007c68:	9801      	ldr	r0, [sp, #4]
 8007c6a:	6813      	ldr	r3, [r2, #0]
 8007c6c:	4615      	mov	r5, r2
 8007c6e:	b933      	cbnz	r3, 8007c7e <_free_r+0x32>
 8007c70:	6063      	str	r3, [r4, #4]
 8007c72:	6014      	str	r4, [r2, #0]
 8007c74:	b003      	add	sp, #12
 8007c76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c7a:	f003 b921 	b.w	800aec0 <__malloc_unlock>
 8007c7e:	42a3      	cmp	r3, r4
 8007c80:	d90b      	bls.n	8007c9a <_free_r+0x4e>
 8007c82:	6821      	ldr	r1, [r4, #0]
 8007c84:	1862      	adds	r2, r4, r1
 8007c86:	4293      	cmp	r3, r2
 8007c88:	bf04      	itt	eq
 8007c8a:	681a      	ldreq	r2, [r3, #0]
 8007c8c:	685b      	ldreq	r3, [r3, #4]
 8007c8e:	6063      	str	r3, [r4, #4]
 8007c90:	bf04      	itt	eq
 8007c92:	1852      	addeq	r2, r2, r1
 8007c94:	6022      	streq	r2, [r4, #0]
 8007c96:	602c      	str	r4, [r5, #0]
 8007c98:	e7ec      	b.n	8007c74 <_free_r+0x28>
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	b10b      	cbz	r3, 8007ca4 <_free_r+0x58>
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	d9fa      	bls.n	8007c9a <_free_r+0x4e>
 8007ca4:	6811      	ldr	r1, [r2, #0]
 8007ca6:	1855      	adds	r5, r2, r1
 8007ca8:	42a5      	cmp	r5, r4
 8007caa:	d10b      	bne.n	8007cc4 <_free_r+0x78>
 8007cac:	6824      	ldr	r4, [r4, #0]
 8007cae:	4421      	add	r1, r4
 8007cb0:	1854      	adds	r4, r2, r1
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	6011      	str	r1, [r2, #0]
 8007cb6:	d1dd      	bne.n	8007c74 <_free_r+0x28>
 8007cb8:	681c      	ldr	r4, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	6053      	str	r3, [r2, #4]
 8007cbe:	4421      	add	r1, r4
 8007cc0:	6011      	str	r1, [r2, #0]
 8007cc2:	e7d7      	b.n	8007c74 <_free_r+0x28>
 8007cc4:	d902      	bls.n	8007ccc <_free_r+0x80>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	6003      	str	r3, [r0, #0]
 8007cca:	e7d3      	b.n	8007c74 <_free_r+0x28>
 8007ccc:	6825      	ldr	r5, [r4, #0]
 8007cce:	1961      	adds	r1, r4, r5
 8007cd0:	428b      	cmp	r3, r1
 8007cd2:	bf04      	itt	eq
 8007cd4:	6819      	ldreq	r1, [r3, #0]
 8007cd6:	685b      	ldreq	r3, [r3, #4]
 8007cd8:	6063      	str	r3, [r4, #4]
 8007cda:	bf04      	itt	eq
 8007cdc:	1949      	addeq	r1, r1, r5
 8007cde:	6021      	streq	r1, [r4, #0]
 8007ce0:	6054      	str	r4, [r2, #4]
 8007ce2:	e7c7      	b.n	8007c74 <_free_r+0x28>
 8007ce4:	b003      	add	sp, #12
 8007ce6:	bd30      	pop	{r4, r5, pc}
 8007ce8:	20000218 	.word	0x20000218

08007cec <_malloc_r>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	1ccd      	adds	r5, r1, #3
 8007cf0:	f025 0503 	bic.w	r5, r5, #3
 8007cf4:	3508      	adds	r5, #8
 8007cf6:	2d0c      	cmp	r5, #12
 8007cf8:	bf38      	it	cc
 8007cfa:	250c      	movcc	r5, #12
 8007cfc:	2d00      	cmp	r5, #0
 8007cfe:	4606      	mov	r6, r0
 8007d00:	db01      	blt.n	8007d06 <_malloc_r+0x1a>
 8007d02:	42a9      	cmp	r1, r5
 8007d04:	d903      	bls.n	8007d0e <_malloc_r+0x22>
 8007d06:	230c      	movs	r3, #12
 8007d08:	6033      	str	r3, [r6, #0]
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d0e:	f003 f8d1 	bl	800aeb4 <__malloc_lock>
 8007d12:	4921      	ldr	r1, [pc, #132]	; (8007d98 <_malloc_r+0xac>)
 8007d14:	680a      	ldr	r2, [r1, #0]
 8007d16:	4614      	mov	r4, r2
 8007d18:	b99c      	cbnz	r4, 8007d42 <_malloc_r+0x56>
 8007d1a:	4f20      	ldr	r7, [pc, #128]	; (8007d9c <_malloc_r+0xb0>)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	b923      	cbnz	r3, 8007d2a <_malloc_r+0x3e>
 8007d20:	4621      	mov	r1, r4
 8007d22:	4630      	mov	r0, r6
 8007d24:	f000 fee4 	bl	8008af0 <_sbrk_r>
 8007d28:	6038      	str	r0, [r7, #0]
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 fedf 	bl	8008af0 <_sbrk_r>
 8007d32:	1c43      	adds	r3, r0, #1
 8007d34:	d123      	bne.n	8007d7e <_malloc_r+0x92>
 8007d36:	230c      	movs	r3, #12
 8007d38:	6033      	str	r3, [r6, #0]
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f003 f8c0 	bl	800aec0 <__malloc_unlock>
 8007d40:	e7e3      	b.n	8007d0a <_malloc_r+0x1e>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	1b5b      	subs	r3, r3, r5
 8007d46:	d417      	bmi.n	8007d78 <_malloc_r+0x8c>
 8007d48:	2b0b      	cmp	r3, #11
 8007d4a:	d903      	bls.n	8007d54 <_malloc_r+0x68>
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	441c      	add	r4, r3
 8007d50:	6025      	str	r5, [r4, #0]
 8007d52:	e004      	b.n	8007d5e <_malloc_r+0x72>
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	42a2      	cmp	r2, r4
 8007d58:	bf0c      	ite	eq
 8007d5a:	600b      	streq	r3, [r1, #0]
 8007d5c:	6053      	strne	r3, [r2, #4]
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f003 f8ae 	bl	800aec0 <__malloc_unlock>
 8007d64:	f104 000b 	add.w	r0, r4, #11
 8007d68:	1d23      	adds	r3, r4, #4
 8007d6a:	f020 0007 	bic.w	r0, r0, #7
 8007d6e:	1ac2      	subs	r2, r0, r3
 8007d70:	d0cc      	beq.n	8007d0c <_malloc_r+0x20>
 8007d72:	1a1b      	subs	r3, r3, r0
 8007d74:	50a3      	str	r3, [r4, r2]
 8007d76:	e7c9      	b.n	8007d0c <_malloc_r+0x20>
 8007d78:	4622      	mov	r2, r4
 8007d7a:	6864      	ldr	r4, [r4, #4]
 8007d7c:	e7cc      	b.n	8007d18 <_malloc_r+0x2c>
 8007d7e:	1cc4      	adds	r4, r0, #3
 8007d80:	f024 0403 	bic.w	r4, r4, #3
 8007d84:	42a0      	cmp	r0, r4
 8007d86:	d0e3      	beq.n	8007d50 <_malloc_r+0x64>
 8007d88:	1a21      	subs	r1, r4, r0
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f000 feb0 	bl	8008af0 <_sbrk_r>
 8007d90:	3001      	adds	r0, #1
 8007d92:	d1dd      	bne.n	8007d50 <_malloc_r+0x64>
 8007d94:	e7cf      	b.n	8007d36 <_malloc_r+0x4a>
 8007d96:	bf00      	nop
 8007d98:	20000218 	.word	0x20000218
 8007d9c:	2000021c 	.word	0x2000021c

08007da0 <__cvt>:
 8007da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007da4:	ec55 4b10 	vmov	r4, r5, d0
 8007da8:	2d00      	cmp	r5, #0
 8007daa:	460e      	mov	r6, r1
 8007dac:	4619      	mov	r1, r3
 8007dae:	462b      	mov	r3, r5
 8007db0:	bfbb      	ittet	lt
 8007db2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007db6:	461d      	movlt	r5, r3
 8007db8:	2300      	movge	r3, #0
 8007dba:	232d      	movlt	r3, #45	; 0x2d
 8007dbc:	700b      	strb	r3, [r1, #0]
 8007dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007dc4:	4691      	mov	r9, r2
 8007dc6:	f023 0820 	bic.w	r8, r3, #32
 8007dca:	bfbc      	itt	lt
 8007dcc:	4622      	movlt	r2, r4
 8007dce:	4614      	movlt	r4, r2
 8007dd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dd4:	d005      	beq.n	8007de2 <__cvt+0x42>
 8007dd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dda:	d100      	bne.n	8007dde <__cvt+0x3e>
 8007ddc:	3601      	adds	r6, #1
 8007dde:	2102      	movs	r1, #2
 8007de0:	e000      	b.n	8007de4 <__cvt+0x44>
 8007de2:	2103      	movs	r1, #3
 8007de4:	ab03      	add	r3, sp, #12
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	ab02      	add	r3, sp, #8
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	ec45 4b10 	vmov	d0, r4, r5
 8007df0:	4653      	mov	r3, sl
 8007df2:	4632      	mov	r2, r6
 8007df4:	f001 fdf4 	bl	80099e0 <_dtoa_r>
 8007df8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	d102      	bne.n	8007e06 <__cvt+0x66>
 8007e00:	f019 0f01 	tst.w	r9, #1
 8007e04:	d022      	beq.n	8007e4c <__cvt+0xac>
 8007e06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e0a:	eb07 0906 	add.w	r9, r7, r6
 8007e0e:	d110      	bne.n	8007e32 <__cvt+0x92>
 8007e10:	783b      	ldrb	r3, [r7, #0]
 8007e12:	2b30      	cmp	r3, #48	; 0x30
 8007e14:	d10a      	bne.n	8007e2c <__cvt+0x8c>
 8007e16:	2200      	movs	r2, #0
 8007e18:	2300      	movs	r3, #0
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fe5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e22:	b918      	cbnz	r0, 8007e2c <__cvt+0x8c>
 8007e24:	f1c6 0601 	rsb	r6, r6, #1
 8007e28:	f8ca 6000 	str.w	r6, [sl]
 8007e2c:	f8da 3000 	ldr.w	r3, [sl]
 8007e30:	4499      	add	r9, r3
 8007e32:	2200      	movs	r2, #0
 8007e34:	2300      	movs	r3, #0
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 fe4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e3e:	b108      	cbz	r0, 8007e44 <__cvt+0xa4>
 8007e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e44:	2230      	movs	r2, #48	; 0x30
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	454b      	cmp	r3, r9
 8007e4a:	d307      	bcc.n	8007e5c <__cvt+0xbc>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e50:	1bdb      	subs	r3, r3, r7
 8007e52:	4638      	mov	r0, r7
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	b004      	add	sp, #16
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	1c59      	adds	r1, r3, #1
 8007e5e:	9103      	str	r1, [sp, #12]
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e7f0      	b.n	8007e46 <__cvt+0xa6>

08007e64 <__exponent>:
 8007e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e66:	4603      	mov	r3, r0
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	bfb8      	it	lt
 8007e6c:	4249      	neglt	r1, r1
 8007e6e:	f803 2b02 	strb.w	r2, [r3], #2
 8007e72:	bfb4      	ite	lt
 8007e74:	222d      	movlt	r2, #45	; 0x2d
 8007e76:	222b      	movge	r2, #43	; 0x2b
 8007e78:	2909      	cmp	r1, #9
 8007e7a:	7042      	strb	r2, [r0, #1]
 8007e7c:	dd2a      	ble.n	8007ed4 <__exponent+0x70>
 8007e7e:	f10d 0407 	add.w	r4, sp, #7
 8007e82:	46a4      	mov	ip, r4
 8007e84:	270a      	movs	r7, #10
 8007e86:	46a6      	mov	lr, r4
 8007e88:	460a      	mov	r2, r1
 8007e8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e8e:	fb07 1516 	mls	r5, r7, r6, r1
 8007e92:	3530      	adds	r5, #48	; 0x30
 8007e94:	2a63      	cmp	r2, #99	; 0x63
 8007e96:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007e9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	dcf1      	bgt.n	8007e86 <__exponent+0x22>
 8007ea2:	3130      	adds	r1, #48	; 0x30
 8007ea4:	f1ae 0502 	sub.w	r5, lr, #2
 8007ea8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007eac:	1c44      	adds	r4, r0, #1
 8007eae:	4629      	mov	r1, r5
 8007eb0:	4561      	cmp	r1, ip
 8007eb2:	d30a      	bcc.n	8007eca <__exponent+0x66>
 8007eb4:	f10d 0209 	add.w	r2, sp, #9
 8007eb8:	eba2 020e 	sub.w	r2, r2, lr
 8007ebc:	4565      	cmp	r5, ip
 8007ebe:	bf88      	it	hi
 8007ec0:	2200      	movhi	r2, #0
 8007ec2:	4413      	add	r3, r2
 8007ec4:	1a18      	subs	r0, r3, r0
 8007ec6:	b003      	add	sp, #12
 8007ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ece:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ed2:	e7ed      	b.n	8007eb0 <__exponent+0x4c>
 8007ed4:	2330      	movs	r3, #48	; 0x30
 8007ed6:	3130      	adds	r1, #48	; 0x30
 8007ed8:	7083      	strb	r3, [r0, #2]
 8007eda:	70c1      	strb	r1, [r0, #3]
 8007edc:	1d03      	adds	r3, r0, #4
 8007ede:	e7f1      	b.n	8007ec4 <__exponent+0x60>

08007ee0 <_printf_float>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	ed2d 8b02 	vpush	{d8}
 8007ee8:	b08d      	sub	sp, #52	; 0x34
 8007eea:	460c      	mov	r4, r1
 8007eec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	461f      	mov	r7, r3
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	f002 ffc3 	bl	800ae80 <_localeconv_r>
 8007efa:	f8d0 a000 	ldr.w	sl, [r0]
 8007efe:	4650      	mov	r0, sl
 8007f00:	f7f8 f96e 	bl	80001e0 <strlen>
 8007f04:	2300      	movs	r3, #0
 8007f06:	930a      	str	r3, [sp, #40]	; 0x28
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	9305      	str	r3, [sp, #20]
 8007f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f14:	3307      	adds	r3, #7
 8007f16:	f023 0307 	bic.w	r3, r3, #7
 8007f1a:	f103 0208 	add.w	r2, r3, #8
 8007f1e:	f8c8 2000 	str.w	r2, [r8]
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f32:	9307      	str	r3, [sp, #28]
 8007f34:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f38:	ee08 0a10 	vmov	s16, r0
 8007f3c:	4b9f      	ldr	r3, [pc, #636]	; (80081bc <_printf_float+0x2dc>)
 8007f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f46:	f7f8 fdf9 	bl	8000b3c <__aeabi_dcmpun>
 8007f4a:	bb88      	cbnz	r0, 8007fb0 <_printf_float+0xd0>
 8007f4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f50:	4b9a      	ldr	r3, [pc, #616]	; (80081bc <_printf_float+0x2dc>)
 8007f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f56:	f7f8 fdd3 	bl	8000b00 <__aeabi_dcmple>
 8007f5a:	bb48      	cbnz	r0, 8007fb0 <_printf_float+0xd0>
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4640      	mov	r0, r8
 8007f62:	4649      	mov	r1, r9
 8007f64:	f7f8 fdc2 	bl	8000aec <__aeabi_dcmplt>
 8007f68:	b110      	cbz	r0, 8007f70 <_printf_float+0x90>
 8007f6a:	232d      	movs	r3, #45	; 0x2d
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f70:	4b93      	ldr	r3, [pc, #588]	; (80081c0 <_printf_float+0x2e0>)
 8007f72:	4894      	ldr	r0, [pc, #592]	; (80081c4 <_printf_float+0x2e4>)
 8007f74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f78:	bf94      	ite	ls
 8007f7a:	4698      	movls	r8, r3
 8007f7c:	4680      	movhi	r8, r0
 8007f7e:	2303      	movs	r3, #3
 8007f80:	6123      	str	r3, [r4, #16]
 8007f82:	9b05      	ldr	r3, [sp, #20]
 8007f84:	f023 0204 	bic.w	r2, r3, #4
 8007f88:	6022      	str	r2, [r4, #0]
 8007f8a:	f04f 0900 	mov.w	r9, #0
 8007f8e:	9700      	str	r7, [sp, #0]
 8007f90:	4633      	mov	r3, r6
 8007f92:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f94:	4621      	mov	r1, r4
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 f9d8 	bl	800834c <_printf_common>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f040 8090 	bne.w	80080c2 <_printf_float+0x1e2>
 8007fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fa6:	b00d      	add	sp, #52	; 0x34
 8007fa8:	ecbd 8b02 	vpop	{d8}
 8007fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	f7f8 fdc0 	bl	8000b3c <__aeabi_dcmpun>
 8007fbc:	b140      	cbz	r0, 8007fd0 <_printf_float+0xf0>
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bfbc      	itt	lt
 8007fc4:	232d      	movlt	r3, #45	; 0x2d
 8007fc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fca:	487f      	ldr	r0, [pc, #508]	; (80081c8 <_printf_float+0x2e8>)
 8007fcc:	4b7f      	ldr	r3, [pc, #508]	; (80081cc <_printf_float+0x2ec>)
 8007fce:	e7d1      	b.n	8007f74 <_printf_float+0x94>
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fd6:	9206      	str	r2, [sp, #24]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	d13f      	bne.n	800805c <_printf_float+0x17c>
 8007fdc:	2306      	movs	r3, #6
 8007fde:	6063      	str	r3, [r4, #4]
 8007fe0:	9b05      	ldr	r3, [sp, #20]
 8007fe2:	6861      	ldr	r1, [r4, #4]
 8007fe4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9303      	str	r3, [sp, #12]
 8007fec:	ab0a      	add	r3, sp, #40	; 0x28
 8007fee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ff2:	ab09      	add	r3, sp, #36	; 0x24
 8007ff4:	ec49 8b10 	vmov	d0, r8, r9
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	6022      	str	r2, [r4, #0]
 8007ffc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008000:	4628      	mov	r0, r5
 8008002:	f7ff fecd 	bl	8007da0 <__cvt>
 8008006:	9b06      	ldr	r3, [sp, #24]
 8008008:	9909      	ldr	r1, [sp, #36]	; 0x24
 800800a:	2b47      	cmp	r3, #71	; 0x47
 800800c:	4680      	mov	r8, r0
 800800e:	d108      	bne.n	8008022 <_printf_float+0x142>
 8008010:	1cc8      	adds	r0, r1, #3
 8008012:	db02      	blt.n	800801a <_printf_float+0x13a>
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	4299      	cmp	r1, r3
 8008018:	dd41      	ble.n	800809e <_printf_float+0x1be>
 800801a:	f1ab 0b02 	sub.w	fp, fp, #2
 800801e:	fa5f fb8b 	uxtb.w	fp, fp
 8008022:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008026:	d820      	bhi.n	800806a <_printf_float+0x18a>
 8008028:	3901      	subs	r1, #1
 800802a:	465a      	mov	r2, fp
 800802c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008030:	9109      	str	r1, [sp, #36]	; 0x24
 8008032:	f7ff ff17 	bl	8007e64 <__exponent>
 8008036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008038:	1813      	adds	r3, r2, r0
 800803a:	2a01      	cmp	r2, #1
 800803c:	4681      	mov	r9, r0
 800803e:	6123      	str	r3, [r4, #16]
 8008040:	dc02      	bgt.n	8008048 <_printf_float+0x168>
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	07d2      	lsls	r2, r2, #31
 8008046:	d501      	bpl.n	800804c <_printf_float+0x16c>
 8008048:	3301      	adds	r3, #1
 800804a:	6123      	str	r3, [r4, #16]
 800804c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008050:	2b00      	cmp	r3, #0
 8008052:	d09c      	beq.n	8007f8e <_printf_float+0xae>
 8008054:	232d      	movs	r3, #45	; 0x2d
 8008056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800805a:	e798      	b.n	8007f8e <_printf_float+0xae>
 800805c:	9a06      	ldr	r2, [sp, #24]
 800805e:	2a47      	cmp	r2, #71	; 0x47
 8008060:	d1be      	bne.n	8007fe0 <_printf_float+0x100>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1bc      	bne.n	8007fe0 <_printf_float+0x100>
 8008066:	2301      	movs	r3, #1
 8008068:	e7b9      	b.n	8007fde <_printf_float+0xfe>
 800806a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800806e:	d118      	bne.n	80080a2 <_printf_float+0x1c2>
 8008070:	2900      	cmp	r1, #0
 8008072:	6863      	ldr	r3, [r4, #4]
 8008074:	dd0b      	ble.n	800808e <_printf_float+0x1ae>
 8008076:	6121      	str	r1, [r4, #16]
 8008078:	b913      	cbnz	r3, 8008080 <_printf_float+0x1a0>
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	07d0      	lsls	r0, r2, #31
 800807e:	d502      	bpl.n	8008086 <_printf_float+0x1a6>
 8008080:	3301      	adds	r3, #1
 8008082:	440b      	add	r3, r1
 8008084:	6123      	str	r3, [r4, #16]
 8008086:	65a1      	str	r1, [r4, #88]	; 0x58
 8008088:	f04f 0900 	mov.w	r9, #0
 800808c:	e7de      	b.n	800804c <_printf_float+0x16c>
 800808e:	b913      	cbnz	r3, 8008096 <_printf_float+0x1b6>
 8008090:	6822      	ldr	r2, [r4, #0]
 8008092:	07d2      	lsls	r2, r2, #31
 8008094:	d501      	bpl.n	800809a <_printf_float+0x1ba>
 8008096:	3302      	adds	r3, #2
 8008098:	e7f4      	b.n	8008084 <_printf_float+0x1a4>
 800809a:	2301      	movs	r3, #1
 800809c:	e7f2      	b.n	8008084 <_printf_float+0x1a4>
 800809e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80080a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a4:	4299      	cmp	r1, r3
 80080a6:	db05      	blt.n	80080b4 <_printf_float+0x1d4>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	6121      	str	r1, [r4, #16]
 80080ac:	07d8      	lsls	r0, r3, #31
 80080ae:	d5ea      	bpl.n	8008086 <_printf_float+0x1a6>
 80080b0:	1c4b      	adds	r3, r1, #1
 80080b2:	e7e7      	b.n	8008084 <_printf_float+0x1a4>
 80080b4:	2900      	cmp	r1, #0
 80080b6:	bfd4      	ite	le
 80080b8:	f1c1 0202 	rsble	r2, r1, #2
 80080bc:	2201      	movgt	r2, #1
 80080be:	4413      	add	r3, r2
 80080c0:	e7e0      	b.n	8008084 <_printf_float+0x1a4>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	055a      	lsls	r2, r3, #21
 80080c6:	d407      	bmi.n	80080d8 <_printf_float+0x1f8>
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	4642      	mov	r2, r8
 80080cc:	4631      	mov	r1, r6
 80080ce:	4628      	mov	r0, r5
 80080d0:	47b8      	blx	r7
 80080d2:	3001      	adds	r0, #1
 80080d4:	d12c      	bne.n	8008130 <_printf_float+0x250>
 80080d6:	e764      	b.n	8007fa2 <_printf_float+0xc2>
 80080d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080dc:	f240 80e0 	bls.w	80082a0 <_printf_float+0x3c0>
 80080e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080e4:	2200      	movs	r2, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	f7f8 fcf6 	bl	8000ad8 <__aeabi_dcmpeq>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d034      	beq.n	800815a <_printf_float+0x27a>
 80080f0:	4a37      	ldr	r2, [pc, #220]	; (80081d0 <_printf_float+0x2f0>)
 80080f2:	2301      	movs	r3, #1
 80080f4:	4631      	mov	r1, r6
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	f43f af51 	beq.w	8007fa2 <_printf_float+0xc2>
 8008100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008104:	429a      	cmp	r2, r3
 8008106:	db02      	blt.n	800810e <_printf_float+0x22e>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	07d8      	lsls	r0, r3, #31
 800810c:	d510      	bpl.n	8008130 <_printf_float+0x250>
 800810e:	ee18 3a10 	vmov	r3, s16
 8008112:	4652      	mov	r2, sl
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f af41 	beq.w	8007fa2 <_printf_float+0xc2>
 8008120:	f04f 0800 	mov.w	r8, #0
 8008124:	f104 091a 	add.w	r9, r4, #26
 8008128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800812a:	3b01      	subs	r3, #1
 800812c:	4543      	cmp	r3, r8
 800812e:	dc09      	bgt.n	8008144 <_printf_float+0x264>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	079b      	lsls	r3, r3, #30
 8008134:	f100 8105 	bmi.w	8008342 <_printf_float+0x462>
 8008138:	68e0      	ldr	r0, [r4, #12]
 800813a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800813c:	4298      	cmp	r0, r3
 800813e:	bfb8      	it	lt
 8008140:	4618      	movlt	r0, r3
 8008142:	e730      	b.n	8007fa6 <_printf_float+0xc6>
 8008144:	2301      	movs	r3, #1
 8008146:	464a      	mov	r2, r9
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f43f af27 	beq.w	8007fa2 <_printf_float+0xc2>
 8008154:	f108 0801 	add.w	r8, r8, #1
 8008158:	e7e6      	b.n	8008128 <_printf_float+0x248>
 800815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815c:	2b00      	cmp	r3, #0
 800815e:	dc39      	bgt.n	80081d4 <_printf_float+0x2f4>
 8008160:	4a1b      	ldr	r2, [pc, #108]	; (80081d0 <_printf_float+0x2f0>)
 8008162:	2301      	movs	r3, #1
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	f43f af19 	beq.w	8007fa2 <_printf_float+0xc2>
 8008170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008174:	4313      	orrs	r3, r2
 8008176:	d102      	bne.n	800817e <_printf_float+0x29e>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	07d9      	lsls	r1, r3, #31
 800817c:	d5d8      	bpl.n	8008130 <_printf_float+0x250>
 800817e:	ee18 3a10 	vmov	r3, s16
 8008182:	4652      	mov	r2, sl
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f af09 	beq.w	8007fa2 <_printf_float+0xc2>
 8008190:	f04f 0900 	mov.w	r9, #0
 8008194:	f104 0a1a 	add.w	sl, r4, #26
 8008198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819a:	425b      	negs	r3, r3
 800819c:	454b      	cmp	r3, r9
 800819e:	dc01      	bgt.n	80081a4 <_printf_float+0x2c4>
 80081a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a2:	e792      	b.n	80080ca <_printf_float+0x1ea>
 80081a4:	2301      	movs	r3, #1
 80081a6:	4652      	mov	r2, sl
 80081a8:	4631      	mov	r1, r6
 80081aa:	4628      	mov	r0, r5
 80081ac:	47b8      	blx	r7
 80081ae:	3001      	adds	r0, #1
 80081b0:	f43f aef7 	beq.w	8007fa2 <_printf_float+0xc2>
 80081b4:	f109 0901 	add.w	r9, r9, #1
 80081b8:	e7ee      	b.n	8008198 <_printf_float+0x2b8>
 80081ba:	bf00      	nop
 80081bc:	7fefffff 	.word	0x7fefffff
 80081c0:	0800f3a0 	.word	0x0800f3a0
 80081c4:	0800f3a4 	.word	0x0800f3a4
 80081c8:	0800f3ac 	.word	0x0800f3ac
 80081cc:	0800f3a8 	.word	0x0800f3a8
 80081d0:	0800f3b0 	.word	0x0800f3b0
 80081d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081d8:	429a      	cmp	r2, r3
 80081da:	bfa8      	it	ge
 80081dc:	461a      	movge	r2, r3
 80081de:	2a00      	cmp	r2, #0
 80081e0:	4691      	mov	r9, r2
 80081e2:	dc37      	bgt.n	8008254 <_printf_float+0x374>
 80081e4:	f04f 0b00 	mov.w	fp, #0
 80081e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ec:	f104 021a 	add.w	r2, r4, #26
 80081f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	eba3 0309 	sub.w	r3, r3, r9
 80081f8:	455b      	cmp	r3, fp
 80081fa:	dc33      	bgt.n	8008264 <_printf_float+0x384>
 80081fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008200:	429a      	cmp	r2, r3
 8008202:	db3b      	blt.n	800827c <_printf_float+0x39c>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	07da      	lsls	r2, r3, #31
 8008208:	d438      	bmi.n	800827c <_printf_float+0x39c>
 800820a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800820c:	9b05      	ldr	r3, [sp, #20]
 800820e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	eba2 0901 	sub.w	r9, r2, r1
 8008216:	4599      	cmp	r9, r3
 8008218:	bfa8      	it	ge
 800821a:	4699      	movge	r9, r3
 800821c:	f1b9 0f00 	cmp.w	r9, #0
 8008220:	dc35      	bgt.n	800828e <_printf_float+0x3ae>
 8008222:	f04f 0800 	mov.w	r8, #0
 8008226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800822a:	f104 0a1a 	add.w	sl, r4, #26
 800822e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008232:	1a9b      	subs	r3, r3, r2
 8008234:	eba3 0309 	sub.w	r3, r3, r9
 8008238:	4543      	cmp	r3, r8
 800823a:	f77f af79 	ble.w	8008130 <_printf_float+0x250>
 800823e:	2301      	movs	r3, #1
 8008240:	4652      	mov	r2, sl
 8008242:	4631      	mov	r1, r6
 8008244:	4628      	mov	r0, r5
 8008246:	47b8      	blx	r7
 8008248:	3001      	adds	r0, #1
 800824a:	f43f aeaa 	beq.w	8007fa2 <_printf_float+0xc2>
 800824e:	f108 0801 	add.w	r8, r8, #1
 8008252:	e7ec      	b.n	800822e <_printf_float+0x34e>
 8008254:	4613      	mov	r3, r2
 8008256:	4631      	mov	r1, r6
 8008258:	4642      	mov	r2, r8
 800825a:	4628      	mov	r0, r5
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	d1c0      	bne.n	80081e4 <_printf_float+0x304>
 8008262:	e69e      	b.n	8007fa2 <_printf_float+0xc2>
 8008264:	2301      	movs	r3, #1
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	9205      	str	r2, [sp, #20]
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f ae97 	beq.w	8007fa2 <_printf_float+0xc2>
 8008274:	9a05      	ldr	r2, [sp, #20]
 8008276:	f10b 0b01 	add.w	fp, fp, #1
 800827a:	e7b9      	b.n	80081f0 <_printf_float+0x310>
 800827c:	ee18 3a10 	vmov	r3, s16
 8008280:	4652      	mov	r2, sl
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	d1be      	bne.n	800820a <_printf_float+0x32a>
 800828c:	e689      	b.n	8007fa2 <_printf_float+0xc2>
 800828e:	9a05      	ldr	r2, [sp, #20]
 8008290:	464b      	mov	r3, r9
 8008292:	4442      	add	r2, r8
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	47b8      	blx	r7
 800829a:	3001      	adds	r0, #1
 800829c:	d1c1      	bne.n	8008222 <_printf_float+0x342>
 800829e:	e680      	b.n	8007fa2 <_printf_float+0xc2>
 80082a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082a2:	2a01      	cmp	r2, #1
 80082a4:	dc01      	bgt.n	80082aa <_printf_float+0x3ca>
 80082a6:	07db      	lsls	r3, r3, #31
 80082a8:	d538      	bpl.n	800831c <_printf_float+0x43c>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4642      	mov	r2, r8
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	f43f ae74 	beq.w	8007fa2 <_printf_float+0xc2>
 80082ba:	ee18 3a10 	vmov	r3, s16
 80082be:	4652      	mov	r2, sl
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	f43f ae6b 	beq.w	8007fa2 <_printf_float+0xc2>
 80082cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082d0:	2200      	movs	r2, #0
 80082d2:	2300      	movs	r3, #0
 80082d4:	f7f8 fc00 	bl	8000ad8 <__aeabi_dcmpeq>
 80082d8:	b9d8      	cbnz	r0, 8008312 <_printf_float+0x432>
 80082da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082dc:	f108 0201 	add.w	r2, r8, #1
 80082e0:	3b01      	subs	r3, #1
 80082e2:	4631      	mov	r1, r6
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b8      	blx	r7
 80082e8:	3001      	adds	r0, #1
 80082ea:	d10e      	bne.n	800830a <_printf_float+0x42a>
 80082ec:	e659      	b.n	8007fa2 <_printf_float+0xc2>
 80082ee:	2301      	movs	r3, #1
 80082f0:	4652      	mov	r2, sl
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	f43f ae52 	beq.w	8007fa2 <_printf_float+0xc2>
 80082fe:	f108 0801 	add.w	r8, r8, #1
 8008302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008304:	3b01      	subs	r3, #1
 8008306:	4543      	cmp	r3, r8
 8008308:	dcf1      	bgt.n	80082ee <_printf_float+0x40e>
 800830a:	464b      	mov	r3, r9
 800830c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008310:	e6dc      	b.n	80080cc <_printf_float+0x1ec>
 8008312:	f04f 0800 	mov.w	r8, #0
 8008316:	f104 0a1a 	add.w	sl, r4, #26
 800831a:	e7f2      	b.n	8008302 <_printf_float+0x422>
 800831c:	2301      	movs	r3, #1
 800831e:	4642      	mov	r2, r8
 8008320:	e7df      	b.n	80082e2 <_printf_float+0x402>
 8008322:	2301      	movs	r3, #1
 8008324:	464a      	mov	r2, r9
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	f43f ae38 	beq.w	8007fa2 <_printf_float+0xc2>
 8008332:	f108 0801 	add.w	r8, r8, #1
 8008336:	68e3      	ldr	r3, [r4, #12]
 8008338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800833a:	1a5b      	subs	r3, r3, r1
 800833c:	4543      	cmp	r3, r8
 800833e:	dcf0      	bgt.n	8008322 <_printf_float+0x442>
 8008340:	e6fa      	b.n	8008138 <_printf_float+0x258>
 8008342:	f04f 0800 	mov.w	r8, #0
 8008346:	f104 0919 	add.w	r9, r4, #25
 800834a:	e7f4      	b.n	8008336 <_printf_float+0x456>

0800834c <_printf_common>:
 800834c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008350:	4616      	mov	r6, r2
 8008352:	4699      	mov	r9, r3
 8008354:	688a      	ldr	r2, [r1, #8]
 8008356:	690b      	ldr	r3, [r1, #16]
 8008358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800835c:	4293      	cmp	r3, r2
 800835e:	bfb8      	it	lt
 8008360:	4613      	movlt	r3, r2
 8008362:	6033      	str	r3, [r6, #0]
 8008364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008368:	4607      	mov	r7, r0
 800836a:	460c      	mov	r4, r1
 800836c:	b10a      	cbz	r2, 8008372 <_printf_common+0x26>
 800836e:	3301      	adds	r3, #1
 8008370:	6033      	str	r3, [r6, #0]
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	0699      	lsls	r1, r3, #26
 8008376:	bf42      	ittt	mi
 8008378:	6833      	ldrmi	r3, [r6, #0]
 800837a:	3302      	addmi	r3, #2
 800837c:	6033      	strmi	r3, [r6, #0]
 800837e:	6825      	ldr	r5, [r4, #0]
 8008380:	f015 0506 	ands.w	r5, r5, #6
 8008384:	d106      	bne.n	8008394 <_printf_common+0x48>
 8008386:	f104 0a19 	add.w	sl, r4, #25
 800838a:	68e3      	ldr	r3, [r4, #12]
 800838c:	6832      	ldr	r2, [r6, #0]
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	42ab      	cmp	r3, r5
 8008392:	dc26      	bgt.n	80083e2 <_printf_common+0x96>
 8008394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008398:	1e13      	subs	r3, r2, #0
 800839a:	6822      	ldr	r2, [r4, #0]
 800839c:	bf18      	it	ne
 800839e:	2301      	movne	r3, #1
 80083a0:	0692      	lsls	r2, r2, #26
 80083a2:	d42b      	bmi.n	80083fc <_printf_common+0xb0>
 80083a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083a8:	4649      	mov	r1, r9
 80083aa:	4638      	mov	r0, r7
 80083ac:	47c0      	blx	r8
 80083ae:	3001      	adds	r0, #1
 80083b0:	d01e      	beq.n	80083f0 <_printf_common+0xa4>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	68e5      	ldr	r5, [r4, #12]
 80083b6:	6832      	ldr	r2, [r6, #0]
 80083b8:	f003 0306 	and.w	r3, r3, #6
 80083bc:	2b04      	cmp	r3, #4
 80083be:	bf08      	it	eq
 80083c0:	1aad      	subeq	r5, r5, r2
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	6922      	ldr	r2, [r4, #16]
 80083c6:	bf0c      	ite	eq
 80083c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083cc:	2500      	movne	r5, #0
 80083ce:	4293      	cmp	r3, r2
 80083d0:	bfc4      	itt	gt
 80083d2:	1a9b      	subgt	r3, r3, r2
 80083d4:	18ed      	addgt	r5, r5, r3
 80083d6:	2600      	movs	r6, #0
 80083d8:	341a      	adds	r4, #26
 80083da:	42b5      	cmp	r5, r6
 80083dc:	d11a      	bne.n	8008414 <_printf_common+0xc8>
 80083de:	2000      	movs	r0, #0
 80083e0:	e008      	b.n	80083f4 <_printf_common+0xa8>
 80083e2:	2301      	movs	r3, #1
 80083e4:	4652      	mov	r2, sl
 80083e6:	4649      	mov	r1, r9
 80083e8:	4638      	mov	r0, r7
 80083ea:	47c0      	blx	r8
 80083ec:	3001      	adds	r0, #1
 80083ee:	d103      	bne.n	80083f8 <_printf_common+0xac>
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f8:	3501      	adds	r5, #1
 80083fa:	e7c6      	b.n	800838a <_printf_common+0x3e>
 80083fc:	18e1      	adds	r1, r4, r3
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	2030      	movs	r0, #48	; 0x30
 8008402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008406:	4422      	add	r2, r4
 8008408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800840c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008410:	3302      	adds	r3, #2
 8008412:	e7c7      	b.n	80083a4 <_printf_common+0x58>
 8008414:	2301      	movs	r3, #1
 8008416:	4622      	mov	r2, r4
 8008418:	4649      	mov	r1, r9
 800841a:	4638      	mov	r0, r7
 800841c:	47c0      	blx	r8
 800841e:	3001      	adds	r0, #1
 8008420:	d0e6      	beq.n	80083f0 <_printf_common+0xa4>
 8008422:	3601      	adds	r6, #1
 8008424:	e7d9      	b.n	80083da <_printf_common+0x8e>
	...

08008428 <_printf_i>:
 8008428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	460c      	mov	r4, r1
 800842e:	4691      	mov	r9, r2
 8008430:	7e27      	ldrb	r7, [r4, #24]
 8008432:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008434:	2f78      	cmp	r7, #120	; 0x78
 8008436:	4680      	mov	r8, r0
 8008438:	469a      	mov	sl, r3
 800843a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800843e:	d807      	bhi.n	8008450 <_printf_i+0x28>
 8008440:	2f62      	cmp	r7, #98	; 0x62
 8008442:	d80a      	bhi.n	800845a <_printf_i+0x32>
 8008444:	2f00      	cmp	r7, #0
 8008446:	f000 80d8 	beq.w	80085fa <_printf_i+0x1d2>
 800844a:	2f58      	cmp	r7, #88	; 0x58
 800844c:	f000 80a3 	beq.w	8008596 <_printf_i+0x16e>
 8008450:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008458:	e03a      	b.n	80084d0 <_printf_i+0xa8>
 800845a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800845e:	2b15      	cmp	r3, #21
 8008460:	d8f6      	bhi.n	8008450 <_printf_i+0x28>
 8008462:	a001      	add	r0, pc, #4	; (adr r0, 8008468 <_printf_i+0x40>)
 8008464:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008468:	080084c1 	.word	0x080084c1
 800846c:	080084d5 	.word	0x080084d5
 8008470:	08008451 	.word	0x08008451
 8008474:	08008451 	.word	0x08008451
 8008478:	08008451 	.word	0x08008451
 800847c:	08008451 	.word	0x08008451
 8008480:	080084d5 	.word	0x080084d5
 8008484:	08008451 	.word	0x08008451
 8008488:	08008451 	.word	0x08008451
 800848c:	08008451 	.word	0x08008451
 8008490:	08008451 	.word	0x08008451
 8008494:	080085e1 	.word	0x080085e1
 8008498:	08008505 	.word	0x08008505
 800849c:	080085c3 	.word	0x080085c3
 80084a0:	08008451 	.word	0x08008451
 80084a4:	08008451 	.word	0x08008451
 80084a8:	08008603 	.word	0x08008603
 80084ac:	08008451 	.word	0x08008451
 80084b0:	08008505 	.word	0x08008505
 80084b4:	08008451 	.word	0x08008451
 80084b8:	08008451 	.word	0x08008451
 80084bc:	080085cb 	.word	0x080085cb
 80084c0:	680b      	ldr	r3, [r1, #0]
 80084c2:	1d1a      	adds	r2, r3, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	600a      	str	r2, [r1, #0]
 80084c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084d0:	2301      	movs	r3, #1
 80084d2:	e0a3      	b.n	800861c <_printf_i+0x1f4>
 80084d4:	6825      	ldr	r5, [r4, #0]
 80084d6:	6808      	ldr	r0, [r1, #0]
 80084d8:	062e      	lsls	r6, r5, #24
 80084da:	f100 0304 	add.w	r3, r0, #4
 80084de:	d50a      	bpl.n	80084f6 <_printf_i+0xce>
 80084e0:	6805      	ldr	r5, [r0, #0]
 80084e2:	600b      	str	r3, [r1, #0]
 80084e4:	2d00      	cmp	r5, #0
 80084e6:	da03      	bge.n	80084f0 <_printf_i+0xc8>
 80084e8:	232d      	movs	r3, #45	; 0x2d
 80084ea:	426d      	negs	r5, r5
 80084ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084f0:	485e      	ldr	r0, [pc, #376]	; (800866c <_printf_i+0x244>)
 80084f2:	230a      	movs	r3, #10
 80084f4:	e019      	b.n	800852a <_printf_i+0x102>
 80084f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084fa:	6805      	ldr	r5, [r0, #0]
 80084fc:	600b      	str	r3, [r1, #0]
 80084fe:	bf18      	it	ne
 8008500:	b22d      	sxthne	r5, r5
 8008502:	e7ef      	b.n	80084e4 <_printf_i+0xbc>
 8008504:	680b      	ldr	r3, [r1, #0]
 8008506:	6825      	ldr	r5, [r4, #0]
 8008508:	1d18      	adds	r0, r3, #4
 800850a:	6008      	str	r0, [r1, #0]
 800850c:	0628      	lsls	r0, r5, #24
 800850e:	d501      	bpl.n	8008514 <_printf_i+0xec>
 8008510:	681d      	ldr	r5, [r3, #0]
 8008512:	e002      	b.n	800851a <_printf_i+0xf2>
 8008514:	0669      	lsls	r1, r5, #25
 8008516:	d5fb      	bpl.n	8008510 <_printf_i+0xe8>
 8008518:	881d      	ldrh	r5, [r3, #0]
 800851a:	4854      	ldr	r0, [pc, #336]	; (800866c <_printf_i+0x244>)
 800851c:	2f6f      	cmp	r7, #111	; 0x6f
 800851e:	bf0c      	ite	eq
 8008520:	2308      	moveq	r3, #8
 8008522:	230a      	movne	r3, #10
 8008524:	2100      	movs	r1, #0
 8008526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800852a:	6866      	ldr	r6, [r4, #4]
 800852c:	60a6      	str	r6, [r4, #8]
 800852e:	2e00      	cmp	r6, #0
 8008530:	bfa2      	ittt	ge
 8008532:	6821      	ldrge	r1, [r4, #0]
 8008534:	f021 0104 	bicge.w	r1, r1, #4
 8008538:	6021      	strge	r1, [r4, #0]
 800853a:	b90d      	cbnz	r5, 8008540 <_printf_i+0x118>
 800853c:	2e00      	cmp	r6, #0
 800853e:	d04d      	beq.n	80085dc <_printf_i+0x1b4>
 8008540:	4616      	mov	r6, r2
 8008542:	fbb5 f1f3 	udiv	r1, r5, r3
 8008546:	fb03 5711 	mls	r7, r3, r1, r5
 800854a:	5dc7      	ldrb	r7, [r0, r7]
 800854c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008550:	462f      	mov	r7, r5
 8008552:	42bb      	cmp	r3, r7
 8008554:	460d      	mov	r5, r1
 8008556:	d9f4      	bls.n	8008542 <_printf_i+0x11a>
 8008558:	2b08      	cmp	r3, #8
 800855a:	d10b      	bne.n	8008574 <_printf_i+0x14c>
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	07df      	lsls	r7, r3, #31
 8008560:	d508      	bpl.n	8008574 <_printf_i+0x14c>
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	6861      	ldr	r1, [r4, #4]
 8008566:	4299      	cmp	r1, r3
 8008568:	bfde      	ittt	le
 800856a:	2330      	movle	r3, #48	; 0x30
 800856c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008570:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008574:	1b92      	subs	r2, r2, r6
 8008576:	6122      	str	r2, [r4, #16]
 8008578:	f8cd a000 	str.w	sl, [sp]
 800857c:	464b      	mov	r3, r9
 800857e:	aa03      	add	r2, sp, #12
 8008580:	4621      	mov	r1, r4
 8008582:	4640      	mov	r0, r8
 8008584:	f7ff fee2 	bl	800834c <_printf_common>
 8008588:	3001      	adds	r0, #1
 800858a:	d14c      	bne.n	8008626 <_printf_i+0x1fe>
 800858c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008590:	b004      	add	sp, #16
 8008592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008596:	4835      	ldr	r0, [pc, #212]	; (800866c <_printf_i+0x244>)
 8008598:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	680e      	ldr	r6, [r1, #0]
 80085a0:	061f      	lsls	r7, r3, #24
 80085a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80085a6:	600e      	str	r6, [r1, #0]
 80085a8:	d514      	bpl.n	80085d4 <_printf_i+0x1ac>
 80085aa:	07d9      	lsls	r1, r3, #31
 80085ac:	bf44      	itt	mi
 80085ae:	f043 0320 	orrmi.w	r3, r3, #32
 80085b2:	6023      	strmi	r3, [r4, #0]
 80085b4:	b91d      	cbnz	r5, 80085be <_printf_i+0x196>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	f023 0320 	bic.w	r3, r3, #32
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	2310      	movs	r3, #16
 80085c0:	e7b0      	b.n	8008524 <_printf_i+0xfc>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	f043 0320 	orr.w	r3, r3, #32
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	2378      	movs	r3, #120	; 0x78
 80085cc:	4828      	ldr	r0, [pc, #160]	; (8008670 <_printf_i+0x248>)
 80085ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085d2:	e7e3      	b.n	800859c <_printf_i+0x174>
 80085d4:	065e      	lsls	r6, r3, #25
 80085d6:	bf48      	it	mi
 80085d8:	b2ad      	uxthmi	r5, r5
 80085da:	e7e6      	b.n	80085aa <_printf_i+0x182>
 80085dc:	4616      	mov	r6, r2
 80085de:	e7bb      	b.n	8008558 <_printf_i+0x130>
 80085e0:	680b      	ldr	r3, [r1, #0]
 80085e2:	6826      	ldr	r6, [r4, #0]
 80085e4:	6960      	ldr	r0, [r4, #20]
 80085e6:	1d1d      	adds	r5, r3, #4
 80085e8:	600d      	str	r5, [r1, #0]
 80085ea:	0635      	lsls	r5, r6, #24
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	d501      	bpl.n	80085f4 <_printf_i+0x1cc>
 80085f0:	6018      	str	r0, [r3, #0]
 80085f2:	e002      	b.n	80085fa <_printf_i+0x1d2>
 80085f4:	0671      	lsls	r1, r6, #25
 80085f6:	d5fb      	bpl.n	80085f0 <_printf_i+0x1c8>
 80085f8:	8018      	strh	r0, [r3, #0]
 80085fa:	2300      	movs	r3, #0
 80085fc:	6123      	str	r3, [r4, #16]
 80085fe:	4616      	mov	r6, r2
 8008600:	e7ba      	b.n	8008578 <_printf_i+0x150>
 8008602:	680b      	ldr	r3, [r1, #0]
 8008604:	1d1a      	adds	r2, r3, #4
 8008606:	600a      	str	r2, [r1, #0]
 8008608:	681e      	ldr	r6, [r3, #0]
 800860a:	6862      	ldr	r2, [r4, #4]
 800860c:	2100      	movs	r1, #0
 800860e:	4630      	mov	r0, r6
 8008610:	f7f7 fdee 	bl	80001f0 <memchr>
 8008614:	b108      	cbz	r0, 800861a <_printf_i+0x1f2>
 8008616:	1b80      	subs	r0, r0, r6
 8008618:	6060      	str	r0, [r4, #4]
 800861a:	6863      	ldr	r3, [r4, #4]
 800861c:	6123      	str	r3, [r4, #16]
 800861e:	2300      	movs	r3, #0
 8008620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008624:	e7a8      	b.n	8008578 <_printf_i+0x150>
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	4632      	mov	r2, r6
 800862a:	4649      	mov	r1, r9
 800862c:	4640      	mov	r0, r8
 800862e:	47d0      	blx	sl
 8008630:	3001      	adds	r0, #1
 8008632:	d0ab      	beq.n	800858c <_printf_i+0x164>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	079b      	lsls	r3, r3, #30
 8008638:	d413      	bmi.n	8008662 <_printf_i+0x23a>
 800863a:	68e0      	ldr	r0, [r4, #12]
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	4298      	cmp	r0, r3
 8008640:	bfb8      	it	lt
 8008642:	4618      	movlt	r0, r3
 8008644:	e7a4      	b.n	8008590 <_printf_i+0x168>
 8008646:	2301      	movs	r3, #1
 8008648:	4632      	mov	r2, r6
 800864a:	4649      	mov	r1, r9
 800864c:	4640      	mov	r0, r8
 800864e:	47d0      	blx	sl
 8008650:	3001      	adds	r0, #1
 8008652:	d09b      	beq.n	800858c <_printf_i+0x164>
 8008654:	3501      	adds	r5, #1
 8008656:	68e3      	ldr	r3, [r4, #12]
 8008658:	9903      	ldr	r1, [sp, #12]
 800865a:	1a5b      	subs	r3, r3, r1
 800865c:	42ab      	cmp	r3, r5
 800865e:	dcf2      	bgt.n	8008646 <_printf_i+0x21e>
 8008660:	e7eb      	b.n	800863a <_printf_i+0x212>
 8008662:	2500      	movs	r5, #0
 8008664:	f104 0619 	add.w	r6, r4, #25
 8008668:	e7f5      	b.n	8008656 <_printf_i+0x22e>
 800866a:	bf00      	nop
 800866c:	0800f3b2 	.word	0x0800f3b2
 8008670:	0800f3c3 	.word	0x0800f3c3

08008674 <_scanf_float>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	b087      	sub	sp, #28
 800867a:	4617      	mov	r7, r2
 800867c:	9303      	str	r3, [sp, #12]
 800867e:	688b      	ldr	r3, [r1, #8]
 8008680:	1e5a      	subs	r2, r3, #1
 8008682:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008686:	bf83      	ittte	hi
 8008688:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800868c:	195b      	addhi	r3, r3, r5
 800868e:	9302      	strhi	r3, [sp, #8]
 8008690:	2300      	movls	r3, #0
 8008692:	bf86      	itte	hi
 8008694:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008698:	608b      	strhi	r3, [r1, #8]
 800869a:	9302      	strls	r3, [sp, #8]
 800869c:	680b      	ldr	r3, [r1, #0]
 800869e:	468b      	mov	fp, r1
 80086a0:	2500      	movs	r5, #0
 80086a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80086a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80086aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80086ae:	4680      	mov	r8, r0
 80086b0:	460c      	mov	r4, r1
 80086b2:	465e      	mov	r6, fp
 80086b4:	46aa      	mov	sl, r5
 80086b6:	46a9      	mov	r9, r5
 80086b8:	9501      	str	r5, [sp, #4]
 80086ba:	68a2      	ldr	r2, [r4, #8]
 80086bc:	b152      	cbz	r2, 80086d4 <_scanf_float+0x60>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	2b4e      	cmp	r3, #78	; 0x4e
 80086c4:	d864      	bhi.n	8008790 <_scanf_float+0x11c>
 80086c6:	2b40      	cmp	r3, #64	; 0x40
 80086c8:	d83c      	bhi.n	8008744 <_scanf_float+0xd0>
 80086ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80086ce:	b2c8      	uxtb	r0, r1
 80086d0:	280e      	cmp	r0, #14
 80086d2:	d93a      	bls.n	800874a <_scanf_float+0xd6>
 80086d4:	f1b9 0f00 	cmp.w	r9, #0
 80086d8:	d003      	beq.n	80086e2 <_scanf_float+0x6e>
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80086e6:	f1ba 0f01 	cmp.w	sl, #1
 80086ea:	f200 8113 	bhi.w	8008914 <_scanf_float+0x2a0>
 80086ee:	455e      	cmp	r6, fp
 80086f0:	f200 8105 	bhi.w	80088fe <_scanf_float+0x28a>
 80086f4:	2501      	movs	r5, #1
 80086f6:	4628      	mov	r0, r5
 80086f8:	b007      	add	sp, #28
 80086fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008702:	2a0d      	cmp	r2, #13
 8008704:	d8e6      	bhi.n	80086d4 <_scanf_float+0x60>
 8008706:	a101      	add	r1, pc, #4	; (adr r1, 800870c <_scanf_float+0x98>)
 8008708:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800870c:	0800884b 	.word	0x0800884b
 8008710:	080086d5 	.word	0x080086d5
 8008714:	080086d5 	.word	0x080086d5
 8008718:	080086d5 	.word	0x080086d5
 800871c:	080088ab 	.word	0x080088ab
 8008720:	08008883 	.word	0x08008883
 8008724:	080086d5 	.word	0x080086d5
 8008728:	080086d5 	.word	0x080086d5
 800872c:	08008859 	.word	0x08008859
 8008730:	080086d5 	.word	0x080086d5
 8008734:	080086d5 	.word	0x080086d5
 8008738:	080086d5 	.word	0x080086d5
 800873c:	080086d5 	.word	0x080086d5
 8008740:	08008811 	.word	0x08008811
 8008744:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008748:	e7db      	b.n	8008702 <_scanf_float+0x8e>
 800874a:	290e      	cmp	r1, #14
 800874c:	d8c2      	bhi.n	80086d4 <_scanf_float+0x60>
 800874e:	a001      	add	r0, pc, #4	; (adr r0, 8008754 <_scanf_float+0xe0>)
 8008750:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008754:	08008803 	.word	0x08008803
 8008758:	080086d5 	.word	0x080086d5
 800875c:	08008803 	.word	0x08008803
 8008760:	08008897 	.word	0x08008897
 8008764:	080086d5 	.word	0x080086d5
 8008768:	080087b1 	.word	0x080087b1
 800876c:	080087ed 	.word	0x080087ed
 8008770:	080087ed 	.word	0x080087ed
 8008774:	080087ed 	.word	0x080087ed
 8008778:	080087ed 	.word	0x080087ed
 800877c:	080087ed 	.word	0x080087ed
 8008780:	080087ed 	.word	0x080087ed
 8008784:	080087ed 	.word	0x080087ed
 8008788:	080087ed 	.word	0x080087ed
 800878c:	080087ed 	.word	0x080087ed
 8008790:	2b6e      	cmp	r3, #110	; 0x6e
 8008792:	d809      	bhi.n	80087a8 <_scanf_float+0x134>
 8008794:	2b60      	cmp	r3, #96	; 0x60
 8008796:	d8b2      	bhi.n	80086fe <_scanf_float+0x8a>
 8008798:	2b54      	cmp	r3, #84	; 0x54
 800879a:	d077      	beq.n	800888c <_scanf_float+0x218>
 800879c:	2b59      	cmp	r3, #89	; 0x59
 800879e:	d199      	bne.n	80086d4 <_scanf_float+0x60>
 80087a0:	2d07      	cmp	r5, #7
 80087a2:	d197      	bne.n	80086d4 <_scanf_float+0x60>
 80087a4:	2508      	movs	r5, #8
 80087a6:	e029      	b.n	80087fc <_scanf_float+0x188>
 80087a8:	2b74      	cmp	r3, #116	; 0x74
 80087aa:	d06f      	beq.n	800888c <_scanf_float+0x218>
 80087ac:	2b79      	cmp	r3, #121	; 0x79
 80087ae:	e7f6      	b.n	800879e <_scanf_float+0x12a>
 80087b0:	6821      	ldr	r1, [r4, #0]
 80087b2:	05c8      	lsls	r0, r1, #23
 80087b4:	d51a      	bpl.n	80087ec <_scanf_float+0x178>
 80087b6:	9b02      	ldr	r3, [sp, #8]
 80087b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80087bc:	6021      	str	r1, [r4, #0]
 80087be:	f109 0901 	add.w	r9, r9, #1
 80087c2:	b11b      	cbz	r3, 80087cc <_scanf_float+0x158>
 80087c4:	3b01      	subs	r3, #1
 80087c6:	3201      	adds	r2, #1
 80087c8:	9302      	str	r3, [sp, #8]
 80087ca:	60a2      	str	r2, [r4, #8]
 80087cc:	68a3      	ldr	r3, [r4, #8]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	60a3      	str	r3, [r4, #8]
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	3301      	adds	r3, #1
 80087d6:	6123      	str	r3, [r4, #16]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3b01      	subs	r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	607b      	str	r3, [r7, #4]
 80087e0:	f340 8084 	ble.w	80088ec <_scanf_float+0x278>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	3301      	adds	r3, #1
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	e766      	b.n	80086ba <_scanf_float+0x46>
 80087ec:	eb1a 0f05 	cmn.w	sl, r5
 80087f0:	f47f af70 	bne.w	80086d4 <_scanf_float+0x60>
 80087f4:	6822      	ldr	r2, [r4, #0]
 80087f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80087fa:	6022      	str	r2, [r4, #0]
 80087fc:	f806 3b01 	strb.w	r3, [r6], #1
 8008800:	e7e4      	b.n	80087cc <_scanf_float+0x158>
 8008802:	6822      	ldr	r2, [r4, #0]
 8008804:	0610      	lsls	r0, r2, #24
 8008806:	f57f af65 	bpl.w	80086d4 <_scanf_float+0x60>
 800880a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800880e:	e7f4      	b.n	80087fa <_scanf_float+0x186>
 8008810:	f1ba 0f00 	cmp.w	sl, #0
 8008814:	d10e      	bne.n	8008834 <_scanf_float+0x1c0>
 8008816:	f1b9 0f00 	cmp.w	r9, #0
 800881a:	d10e      	bne.n	800883a <_scanf_float+0x1c6>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008822:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008826:	d108      	bne.n	800883a <_scanf_float+0x1c6>
 8008828:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800882c:	6022      	str	r2, [r4, #0]
 800882e:	f04f 0a01 	mov.w	sl, #1
 8008832:	e7e3      	b.n	80087fc <_scanf_float+0x188>
 8008834:	f1ba 0f02 	cmp.w	sl, #2
 8008838:	d055      	beq.n	80088e6 <_scanf_float+0x272>
 800883a:	2d01      	cmp	r5, #1
 800883c:	d002      	beq.n	8008844 <_scanf_float+0x1d0>
 800883e:	2d04      	cmp	r5, #4
 8008840:	f47f af48 	bne.w	80086d4 <_scanf_float+0x60>
 8008844:	3501      	adds	r5, #1
 8008846:	b2ed      	uxtb	r5, r5
 8008848:	e7d8      	b.n	80087fc <_scanf_float+0x188>
 800884a:	f1ba 0f01 	cmp.w	sl, #1
 800884e:	f47f af41 	bne.w	80086d4 <_scanf_float+0x60>
 8008852:	f04f 0a02 	mov.w	sl, #2
 8008856:	e7d1      	b.n	80087fc <_scanf_float+0x188>
 8008858:	b97d      	cbnz	r5, 800887a <_scanf_float+0x206>
 800885a:	f1b9 0f00 	cmp.w	r9, #0
 800885e:	f47f af3c 	bne.w	80086da <_scanf_float+0x66>
 8008862:	6822      	ldr	r2, [r4, #0]
 8008864:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008868:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800886c:	f47f af39 	bne.w	80086e2 <_scanf_float+0x6e>
 8008870:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008874:	6022      	str	r2, [r4, #0]
 8008876:	2501      	movs	r5, #1
 8008878:	e7c0      	b.n	80087fc <_scanf_float+0x188>
 800887a:	2d03      	cmp	r5, #3
 800887c:	d0e2      	beq.n	8008844 <_scanf_float+0x1d0>
 800887e:	2d05      	cmp	r5, #5
 8008880:	e7de      	b.n	8008840 <_scanf_float+0x1cc>
 8008882:	2d02      	cmp	r5, #2
 8008884:	f47f af26 	bne.w	80086d4 <_scanf_float+0x60>
 8008888:	2503      	movs	r5, #3
 800888a:	e7b7      	b.n	80087fc <_scanf_float+0x188>
 800888c:	2d06      	cmp	r5, #6
 800888e:	f47f af21 	bne.w	80086d4 <_scanf_float+0x60>
 8008892:	2507      	movs	r5, #7
 8008894:	e7b2      	b.n	80087fc <_scanf_float+0x188>
 8008896:	6822      	ldr	r2, [r4, #0]
 8008898:	0591      	lsls	r1, r2, #22
 800889a:	f57f af1b 	bpl.w	80086d4 <_scanf_float+0x60>
 800889e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80088a2:	6022      	str	r2, [r4, #0]
 80088a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80088a8:	e7a8      	b.n	80087fc <_scanf_float+0x188>
 80088aa:	6822      	ldr	r2, [r4, #0]
 80088ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80088b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80088b4:	d006      	beq.n	80088c4 <_scanf_float+0x250>
 80088b6:	0550      	lsls	r0, r2, #21
 80088b8:	f57f af0c 	bpl.w	80086d4 <_scanf_float+0x60>
 80088bc:	f1b9 0f00 	cmp.w	r9, #0
 80088c0:	f43f af0f 	beq.w	80086e2 <_scanf_float+0x6e>
 80088c4:	0591      	lsls	r1, r2, #22
 80088c6:	bf58      	it	pl
 80088c8:	9901      	ldrpl	r1, [sp, #4]
 80088ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80088ce:	bf58      	it	pl
 80088d0:	eba9 0101 	subpl.w	r1, r9, r1
 80088d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80088d8:	bf58      	it	pl
 80088da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088de:	6022      	str	r2, [r4, #0]
 80088e0:	f04f 0900 	mov.w	r9, #0
 80088e4:	e78a      	b.n	80087fc <_scanf_float+0x188>
 80088e6:	f04f 0a03 	mov.w	sl, #3
 80088ea:	e787      	b.n	80087fc <_scanf_float+0x188>
 80088ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80088f0:	4639      	mov	r1, r7
 80088f2:	4640      	mov	r0, r8
 80088f4:	4798      	blx	r3
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f43f aedf 	beq.w	80086ba <_scanf_float+0x46>
 80088fc:	e6ea      	b.n	80086d4 <_scanf_float+0x60>
 80088fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008906:	463a      	mov	r2, r7
 8008908:	4640      	mov	r0, r8
 800890a:	4798      	blx	r3
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	3b01      	subs	r3, #1
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	e6ec      	b.n	80086ee <_scanf_float+0x7a>
 8008914:	1e6b      	subs	r3, r5, #1
 8008916:	2b06      	cmp	r3, #6
 8008918:	d825      	bhi.n	8008966 <_scanf_float+0x2f2>
 800891a:	2d02      	cmp	r5, #2
 800891c:	d836      	bhi.n	800898c <_scanf_float+0x318>
 800891e:	455e      	cmp	r6, fp
 8008920:	f67f aee8 	bls.w	80086f4 <_scanf_float+0x80>
 8008924:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008928:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800892c:	463a      	mov	r2, r7
 800892e:	4640      	mov	r0, r8
 8008930:	4798      	blx	r3
 8008932:	6923      	ldr	r3, [r4, #16]
 8008934:	3b01      	subs	r3, #1
 8008936:	6123      	str	r3, [r4, #16]
 8008938:	e7f1      	b.n	800891e <_scanf_float+0x2aa>
 800893a:	9802      	ldr	r0, [sp, #8]
 800893c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008940:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008944:	9002      	str	r0, [sp, #8]
 8008946:	463a      	mov	r2, r7
 8008948:	4640      	mov	r0, r8
 800894a:	4798      	blx	r3
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	3b01      	subs	r3, #1
 8008950:	6123      	str	r3, [r4, #16]
 8008952:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008956:	fa5f fa8a 	uxtb.w	sl, sl
 800895a:	f1ba 0f02 	cmp.w	sl, #2
 800895e:	d1ec      	bne.n	800893a <_scanf_float+0x2c6>
 8008960:	3d03      	subs	r5, #3
 8008962:	b2ed      	uxtb	r5, r5
 8008964:	1b76      	subs	r6, r6, r5
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	05da      	lsls	r2, r3, #23
 800896a:	d52f      	bpl.n	80089cc <_scanf_float+0x358>
 800896c:	055b      	lsls	r3, r3, #21
 800896e:	d510      	bpl.n	8008992 <_scanf_float+0x31e>
 8008970:	455e      	cmp	r6, fp
 8008972:	f67f aebf 	bls.w	80086f4 <_scanf_float+0x80>
 8008976:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800897a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800897e:	463a      	mov	r2, r7
 8008980:	4640      	mov	r0, r8
 8008982:	4798      	blx	r3
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	3b01      	subs	r3, #1
 8008988:	6123      	str	r3, [r4, #16]
 800898a:	e7f1      	b.n	8008970 <_scanf_float+0x2fc>
 800898c:	46aa      	mov	sl, r5
 800898e:	9602      	str	r6, [sp, #8]
 8008990:	e7df      	b.n	8008952 <_scanf_float+0x2de>
 8008992:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	2965      	cmp	r1, #101	; 0x65
 800899a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800899e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80089a2:	6123      	str	r3, [r4, #16]
 80089a4:	d00c      	beq.n	80089c0 <_scanf_float+0x34c>
 80089a6:	2945      	cmp	r1, #69	; 0x45
 80089a8:	d00a      	beq.n	80089c0 <_scanf_float+0x34c>
 80089aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089ae:	463a      	mov	r2, r7
 80089b0:	4640      	mov	r0, r8
 80089b2:	4798      	blx	r3
 80089b4:	6923      	ldr	r3, [r4, #16]
 80089b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	1eb5      	subs	r5, r6, #2
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089c4:	463a      	mov	r2, r7
 80089c6:	4640      	mov	r0, r8
 80089c8:	4798      	blx	r3
 80089ca:	462e      	mov	r6, r5
 80089cc:	6825      	ldr	r5, [r4, #0]
 80089ce:	f015 0510 	ands.w	r5, r5, #16
 80089d2:	d158      	bne.n	8008a86 <_scanf_float+0x412>
 80089d4:	7035      	strb	r5, [r6, #0]
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e0:	d11c      	bne.n	8008a1c <_scanf_float+0x3a8>
 80089e2:	9b01      	ldr	r3, [sp, #4]
 80089e4:	454b      	cmp	r3, r9
 80089e6:	eba3 0209 	sub.w	r2, r3, r9
 80089ea:	d124      	bne.n	8008a36 <_scanf_float+0x3c2>
 80089ec:	2200      	movs	r2, #0
 80089ee:	4659      	mov	r1, fp
 80089f0:	4640      	mov	r0, r8
 80089f2:	f000 fedb 	bl	80097ac <_strtod_r>
 80089f6:	9b03      	ldr	r3, [sp, #12]
 80089f8:	6821      	ldr	r1, [r4, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f011 0f02 	tst.w	r1, #2
 8008a00:	ec57 6b10 	vmov	r6, r7, d0
 8008a04:	f103 0204 	add.w	r2, r3, #4
 8008a08:	d020      	beq.n	8008a4c <_scanf_float+0x3d8>
 8008a0a:	9903      	ldr	r1, [sp, #12]
 8008a0c:	600a      	str	r2, [r1, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	e9c3 6700 	strd	r6, r7, [r3]
 8008a14:	68e3      	ldr	r3, [r4, #12]
 8008a16:	3301      	adds	r3, #1
 8008a18:	60e3      	str	r3, [r4, #12]
 8008a1a:	e66c      	b.n	80086f6 <_scanf_float+0x82>
 8008a1c:	9b04      	ldr	r3, [sp, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0e4      	beq.n	80089ec <_scanf_float+0x378>
 8008a22:	9905      	ldr	r1, [sp, #20]
 8008a24:	230a      	movs	r3, #10
 8008a26:	462a      	mov	r2, r5
 8008a28:	3101      	adds	r1, #1
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	f000 ff48 	bl	80098c0 <_strtol_r>
 8008a30:	9b04      	ldr	r3, [sp, #16]
 8008a32:	9e05      	ldr	r6, [sp, #20]
 8008a34:	1ac2      	subs	r2, r0, r3
 8008a36:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008a3a:	429e      	cmp	r6, r3
 8008a3c:	bf28      	it	cs
 8008a3e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008a42:	4912      	ldr	r1, [pc, #72]	; (8008a8c <_scanf_float+0x418>)
 8008a44:	4630      	mov	r0, r6
 8008a46:	f000 f869 	bl	8008b1c <siprintf>
 8008a4a:	e7cf      	b.n	80089ec <_scanf_float+0x378>
 8008a4c:	f011 0f04 	tst.w	r1, #4
 8008a50:	9903      	ldr	r1, [sp, #12]
 8008a52:	600a      	str	r2, [r1, #0]
 8008a54:	d1db      	bne.n	8008a0e <_scanf_float+0x39a>
 8008a56:	f8d3 8000 	ldr.w	r8, [r3]
 8008a5a:	ee10 2a10 	vmov	r2, s0
 8008a5e:	ee10 0a10 	vmov	r0, s0
 8008a62:	463b      	mov	r3, r7
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f8 f869 	bl	8000b3c <__aeabi_dcmpun>
 8008a6a:	b128      	cbz	r0, 8008a78 <_scanf_float+0x404>
 8008a6c:	4808      	ldr	r0, [pc, #32]	; (8008a90 <_scanf_float+0x41c>)
 8008a6e:	f000 f84f 	bl	8008b10 <nanf>
 8008a72:	ed88 0a00 	vstr	s0, [r8]
 8008a76:	e7cd      	b.n	8008a14 <_scanf_float+0x3a0>
 8008a78:	4630      	mov	r0, r6
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	f7f8 f8bc 	bl	8000bf8 <__aeabi_d2f>
 8008a80:	f8c8 0000 	str.w	r0, [r8]
 8008a84:	e7c6      	b.n	8008a14 <_scanf_float+0x3a0>
 8008a86:	2500      	movs	r5, #0
 8008a88:	e635      	b.n	80086f6 <_scanf_float+0x82>
 8008a8a:	bf00      	nop
 8008a8c:	0800f3d4 	.word	0x0800f3d4
 8008a90:	0800f850 	.word	0x0800f850

08008a94 <iprintf>:
 8008a94:	b40f      	push	{r0, r1, r2, r3}
 8008a96:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <iprintf+0x2c>)
 8008a98:	b513      	push	{r0, r1, r4, lr}
 8008a9a:	681c      	ldr	r4, [r3, #0]
 8008a9c:	b124      	cbz	r4, 8008aa8 <iprintf+0x14>
 8008a9e:	69a3      	ldr	r3, [r4, #24]
 8008aa0:	b913      	cbnz	r3, 8008aa8 <iprintf+0x14>
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f001 fde0 	bl	800a668 <__sinit>
 8008aa8:	ab05      	add	r3, sp, #20
 8008aaa:	9a04      	ldr	r2, [sp, #16]
 8008aac:	68a1      	ldr	r1, [r4, #8]
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f003 f85b 	bl	800bb6c <_vfiprintf_r>
 8008ab6:	b002      	add	sp, #8
 8008ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008abc:	b004      	add	sp, #16
 8008abe:	4770      	bx	lr
 8008ac0:	20000018 	.word	0x20000018

08008ac4 <putchar>:
 8008ac4:	4b09      	ldr	r3, [pc, #36]	; (8008aec <putchar+0x28>)
 8008ac6:	b513      	push	{r0, r1, r4, lr}
 8008ac8:	681c      	ldr	r4, [r3, #0]
 8008aca:	4601      	mov	r1, r0
 8008acc:	b134      	cbz	r4, 8008adc <putchar+0x18>
 8008ace:	69a3      	ldr	r3, [r4, #24]
 8008ad0:	b923      	cbnz	r3, 8008adc <putchar+0x18>
 8008ad2:	9001      	str	r0, [sp, #4]
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f001 fdc7 	bl	800a668 <__sinit>
 8008ada:	9901      	ldr	r1, [sp, #4]
 8008adc:	68a2      	ldr	r2, [r4, #8]
 8008ade:	4620      	mov	r0, r4
 8008ae0:	b002      	add	sp, #8
 8008ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae6:	f003 b971 	b.w	800bdcc <_putc_r>
 8008aea:	bf00      	nop
 8008aec:	20000018 	.word	0x20000018

08008af0 <_sbrk_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d06      	ldr	r5, [pc, #24]	; (8008b0c <_sbrk_r+0x1c>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	f7fa fd02 	bl	8003504 <_sbrk>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_sbrk_r+0x1a>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_sbrk_r+0x1a>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	20000d50 	.word	0x20000d50

08008b10 <nanf>:
 8008b10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008b18 <nanf+0x8>
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	7fc00000 	.word	0x7fc00000

08008b1c <siprintf>:
 8008b1c:	b40e      	push	{r1, r2, r3}
 8008b1e:	b500      	push	{lr}
 8008b20:	b09c      	sub	sp, #112	; 0x70
 8008b22:	ab1d      	add	r3, sp, #116	; 0x74
 8008b24:	9002      	str	r0, [sp, #8]
 8008b26:	9006      	str	r0, [sp, #24]
 8008b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b2c:	4809      	ldr	r0, [pc, #36]	; (8008b54 <siprintf+0x38>)
 8008b2e:	9107      	str	r1, [sp, #28]
 8008b30:	9104      	str	r1, [sp, #16]
 8008b32:	4909      	ldr	r1, [pc, #36]	; (8008b58 <siprintf+0x3c>)
 8008b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b38:	9105      	str	r1, [sp, #20]
 8008b3a:	6800      	ldr	r0, [r0, #0]
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	a902      	add	r1, sp, #8
 8008b40:	f002 feea 	bl	800b918 <_svfiprintf_r>
 8008b44:	9b02      	ldr	r3, [sp, #8]
 8008b46:	2200      	movs	r2, #0
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	b01c      	add	sp, #112	; 0x70
 8008b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b50:	b003      	add	sp, #12
 8008b52:	4770      	bx	lr
 8008b54:	20000018 	.word	0x20000018
 8008b58:	ffff0208 	.word	0xffff0208

08008b5c <sulp>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460d      	mov	r5, r1
 8008b62:	ec45 4b10 	vmov	d0, r4, r5
 8008b66:	4616      	mov	r6, r2
 8008b68:	f002 fd1c 	bl	800b5a4 <__ulp>
 8008b6c:	ec51 0b10 	vmov	r0, r1, d0
 8008b70:	b17e      	cbz	r6, 8008b92 <sulp+0x36>
 8008b72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008b76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	dd09      	ble.n	8008b92 <sulp+0x36>
 8008b7e:	051b      	lsls	r3, r3, #20
 8008b80:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008b84:	2400      	movs	r4, #0
 8008b86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	f7f7 fd3b 	bl	8000608 <__aeabi_dmul>
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	0000      	movs	r0, r0
	...

08008b98 <_strtod_l>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	b0a3      	sub	sp, #140	; 0x8c
 8008b9e:	461f      	mov	r7, r3
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	931e      	str	r3, [sp, #120]	; 0x78
 8008ba4:	4ba4      	ldr	r3, [pc, #656]	; (8008e38 <_strtod_l+0x2a0>)
 8008ba6:	9219      	str	r2, [sp, #100]	; 0x64
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	9307      	str	r3, [sp, #28]
 8008bac:	4604      	mov	r4, r0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	4688      	mov	r8, r1
 8008bb2:	f7f7 fb15 	bl	80001e0 <strlen>
 8008bb6:	f04f 0a00 	mov.w	sl, #0
 8008bba:	4605      	mov	r5, r0
 8008bbc:	f04f 0b00 	mov.w	fp, #0
 8008bc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bc6:	781a      	ldrb	r2, [r3, #0]
 8008bc8:	2a2b      	cmp	r2, #43	; 0x2b
 8008bca:	d04c      	beq.n	8008c66 <_strtod_l+0xce>
 8008bcc:	d839      	bhi.n	8008c42 <_strtod_l+0xaa>
 8008bce:	2a0d      	cmp	r2, #13
 8008bd0:	d832      	bhi.n	8008c38 <_strtod_l+0xa0>
 8008bd2:	2a08      	cmp	r2, #8
 8008bd4:	d832      	bhi.n	8008c3c <_strtod_l+0xa4>
 8008bd6:	2a00      	cmp	r2, #0
 8008bd8:	d03c      	beq.n	8008c54 <_strtod_l+0xbc>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8008bde:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008be0:	7833      	ldrb	r3, [r6, #0]
 8008be2:	2b30      	cmp	r3, #48	; 0x30
 8008be4:	f040 80b4 	bne.w	8008d50 <_strtod_l+0x1b8>
 8008be8:	7873      	ldrb	r3, [r6, #1]
 8008bea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008bee:	2b58      	cmp	r3, #88	; 0x58
 8008bf0:	d16c      	bne.n	8008ccc <_strtod_l+0x134>
 8008bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	ab1e      	add	r3, sp, #120	; 0x78
 8008bf8:	9702      	str	r7, [sp, #8]
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	4a8f      	ldr	r2, [pc, #572]	; (8008e3c <_strtod_l+0x2a4>)
 8008bfe:	ab1f      	add	r3, sp, #124	; 0x7c
 8008c00:	a91d      	add	r1, sp, #116	; 0x74
 8008c02:	4620      	mov	r0, r4
 8008c04:	f001 fe34 	bl	800a870 <__gethex>
 8008c08:	f010 0707 	ands.w	r7, r0, #7
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	d005      	beq.n	8008c1c <_strtod_l+0x84>
 8008c10:	2f06      	cmp	r7, #6
 8008c12:	d12a      	bne.n	8008c6a <_strtod_l+0xd2>
 8008c14:	3601      	adds	r6, #1
 8008c16:	2300      	movs	r3, #0
 8008c18:	961d      	str	r6, [sp, #116]	; 0x74
 8008c1a:	930e      	str	r3, [sp, #56]	; 0x38
 8008c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f040 8596 	bne.w	8009750 <_strtod_l+0xbb8>
 8008c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c26:	b1db      	cbz	r3, 8008c60 <_strtod_l+0xc8>
 8008c28:	4652      	mov	r2, sl
 8008c2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008c2e:	ec43 2b10 	vmov	d0, r2, r3
 8008c32:	b023      	add	sp, #140	; 0x8c
 8008c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c38:	2a20      	cmp	r2, #32
 8008c3a:	d1ce      	bne.n	8008bda <_strtod_l+0x42>
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	931d      	str	r3, [sp, #116]	; 0x74
 8008c40:	e7c0      	b.n	8008bc4 <_strtod_l+0x2c>
 8008c42:	2a2d      	cmp	r2, #45	; 0x2d
 8008c44:	d1c9      	bne.n	8008bda <_strtod_l+0x42>
 8008c46:	2201      	movs	r2, #1
 8008c48:	920e      	str	r2, [sp, #56]	; 0x38
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	921d      	str	r2, [sp, #116]	; 0x74
 8008c4e:	785b      	ldrb	r3, [r3, #1]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1c4      	bne.n	8008bde <_strtod_l+0x46>
 8008c54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c56:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f040 8576 	bne.w	800974c <_strtod_l+0xbb4>
 8008c60:	4652      	mov	r2, sl
 8008c62:	465b      	mov	r3, fp
 8008c64:	e7e3      	b.n	8008c2e <_strtod_l+0x96>
 8008c66:	2200      	movs	r2, #0
 8008c68:	e7ee      	b.n	8008c48 <_strtod_l+0xb0>
 8008c6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c6c:	b13a      	cbz	r2, 8008c7e <_strtod_l+0xe6>
 8008c6e:	2135      	movs	r1, #53	; 0x35
 8008c70:	a820      	add	r0, sp, #128	; 0x80
 8008c72:	f002 fda2 	bl	800b7ba <__copybits>
 8008c76:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f002 f967 	bl	800af4c <_Bfree>
 8008c7e:	3f01      	subs	r7, #1
 8008c80:	2f05      	cmp	r7, #5
 8008c82:	d807      	bhi.n	8008c94 <_strtod_l+0xfc>
 8008c84:	e8df f007 	tbb	[pc, r7]
 8008c88:	1d180b0e 	.word	0x1d180b0e
 8008c8c:	030e      	.short	0x030e
 8008c8e:	f04f 0b00 	mov.w	fp, #0
 8008c92:	46da      	mov	sl, fp
 8008c94:	0728      	lsls	r0, r5, #28
 8008c96:	d5c1      	bpl.n	8008c1c <_strtod_l+0x84>
 8008c98:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008c9c:	e7be      	b.n	8008c1c <_strtod_l+0x84>
 8008c9e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008ca2:	e7f7      	b.n	8008c94 <_strtod_l+0xfc>
 8008ca4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008ca8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008caa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008cae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008cb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008cb6:	e7ed      	b.n	8008c94 <_strtod_l+0xfc>
 8008cb8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008e40 <_strtod_l+0x2a8>
 8008cbc:	f04f 0a00 	mov.w	sl, #0
 8008cc0:	e7e8      	b.n	8008c94 <_strtod_l+0xfc>
 8008cc2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008cc6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008cca:	e7e3      	b.n	8008c94 <_strtod_l+0xfc>
 8008ccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	921d      	str	r2, [sp, #116]	; 0x74
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	2b30      	cmp	r3, #48	; 0x30
 8008cd6:	d0f9      	beq.n	8008ccc <_strtod_l+0x134>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d09f      	beq.n	8008c1c <_strtod_l+0x84>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f04f 0900 	mov.w	r9, #0
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ce8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008cec:	464f      	mov	r7, r9
 8008cee:	220a      	movs	r2, #10
 8008cf0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008cf2:	7806      	ldrb	r6, [r0, #0]
 8008cf4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008cf8:	b2d9      	uxtb	r1, r3
 8008cfa:	2909      	cmp	r1, #9
 8008cfc:	d92a      	bls.n	8008d54 <_strtod_l+0x1bc>
 8008cfe:	9907      	ldr	r1, [sp, #28]
 8008d00:	462a      	mov	r2, r5
 8008d02:	f003 f8f8 	bl	800bef6 <strncmp>
 8008d06:	b398      	cbz	r0, 8008d70 <_strtod_l+0x1d8>
 8008d08:	2000      	movs	r0, #0
 8008d0a:	4633      	mov	r3, r6
 8008d0c:	463d      	mov	r5, r7
 8008d0e:	9007      	str	r0, [sp, #28]
 8008d10:	4602      	mov	r2, r0
 8008d12:	2b65      	cmp	r3, #101	; 0x65
 8008d14:	d001      	beq.n	8008d1a <_strtod_l+0x182>
 8008d16:	2b45      	cmp	r3, #69	; 0x45
 8008d18:	d118      	bne.n	8008d4c <_strtod_l+0x1b4>
 8008d1a:	b91d      	cbnz	r5, 8008d24 <_strtod_l+0x18c>
 8008d1c:	9b04      	ldr	r3, [sp, #16]
 8008d1e:	4303      	orrs	r3, r0
 8008d20:	d098      	beq.n	8008c54 <_strtod_l+0xbc>
 8008d22:	2500      	movs	r5, #0
 8008d24:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008d28:	f108 0301 	add.w	r3, r8, #1
 8008d2c:	931d      	str	r3, [sp, #116]	; 0x74
 8008d2e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008d32:	2b2b      	cmp	r3, #43	; 0x2b
 8008d34:	d075      	beq.n	8008e22 <_strtod_l+0x28a>
 8008d36:	2b2d      	cmp	r3, #45	; 0x2d
 8008d38:	d07b      	beq.n	8008e32 <_strtod_l+0x29a>
 8008d3a:	f04f 0c00 	mov.w	ip, #0
 8008d3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008d42:	2909      	cmp	r1, #9
 8008d44:	f240 8082 	bls.w	8008e4c <_strtod_l+0x2b4>
 8008d48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008d4c:	2600      	movs	r6, #0
 8008d4e:	e09d      	b.n	8008e8c <_strtod_l+0x2f4>
 8008d50:	2300      	movs	r3, #0
 8008d52:	e7c4      	b.n	8008cde <_strtod_l+0x146>
 8008d54:	2f08      	cmp	r7, #8
 8008d56:	bfd8      	it	le
 8008d58:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008d5a:	f100 0001 	add.w	r0, r0, #1
 8008d5e:	bfda      	itte	le
 8008d60:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d64:	9309      	strle	r3, [sp, #36]	; 0x24
 8008d66:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008d6a:	3701      	adds	r7, #1
 8008d6c:	901d      	str	r0, [sp, #116]	; 0x74
 8008d6e:	e7bf      	b.n	8008cf0 <_strtod_l+0x158>
 8008d70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d72:	195a      	adds	r2, r3, r5
 8008d74:	921d      	str	r2, [sp, #116]	; 0x74
 8008d76:	5d5b      	ldrb	r3, [r3, r5]
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	d037      	beq.n	8008dec <_strtod_l+0x254>
 8008d7c:	9007      	str	r0, [sp, #28]
 8008d7e:	463d      	mov	r5, r7
 8008d80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008d84:	2a09      	cmp	r2, #9
 8008d86:	d912      	bls.n	8008dae <_strtod_l+0x216>
 8008d88:	2201      	movs	r2, #1
 8008d8a:	e7c2      	b.n	8008d12 <_strtod_l+0x17a>
 8008d8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	921d      	str	r2, [sp, #116]	; 0x74
 8008d92:	785b      	ldrb	r3, [r3, #1]
 8008d94:	3001      	adds	r0, #1
 8008d96:	2b30      	cmp	r3, #48	; 0x30
 8008d98:	d0f8      	beq.n	8008d8c <_strtod_l+0x1f4>
 8008d9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008d9e:	2a08      	cmp	r2, #8
 8008da0:	f200 84db 	bhi.w	800975a <_strtod_l+0xbc2>
 8008da4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008da6:	9007      	str	r0, [sp, #28]
 8008da8:	2000      	movs	r0, #0
 8008daa:	920a      	str	r2, [sp, #40]	; 0x28
 8008dac:	4605      	mov	r5, r0
 8008dae:	3b30      	subs	r3, #48	; 0x30
 8008db0:	f100 0201 	add.w	r2, r0, #1
 8008db4:	d014      	beq.n	8008de0 <_strtod_l+0x248>
 8008db6:	9907      	ldr	r1, [sp, #28]
 8008db8:	4411      	add	r1, r2
 8008dba:	9107      	str	r1, [sp, #28]
 8008dbc:	462a      	mov	r2, r5
 8008dbe:	eb00 0e05 	add.w	lr, r0, r5
 8008dc2:	210a      	movs	r1, #10
 8008dc4:	4572      	cmp	r2, lr
 8008dc6:	d113      	bne.n	8008df0 <_strtod_l+0x258>
 8008dc8:	182a      	adds	r2, r5, r0
 8008dca:	2a08      	cmp	r2, #8
 8008dcc:	f105 0501 	add.w	r5, r5, #1
 8008dd0:	4405      	add	r5, r0
 8008dd2:	dc1c      	bgt.n	8008e0e <_strtod_l+0x276>
 8008dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dd6:	220a      	movs	r2, #10
 8008dd8:	fb02 3301 	mla	r3, r2, r1, r3
 8008ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dde:	2200      	movs	r2, #0
 8008de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008de2:	1c59      	adds	r1, r3, #1
 8008de4:	911d      	str	r1, [sp, #116]	; 0x74
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	4610      	mov	r0, r2
 8008dea:	e7c9      	b.n	8008d80 <_strtod_l+0x1e8>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e7d2      	b.n	8008d96 <_strtod_l+0x1fe>
 8008df0:	2a08      	cmp	r2, #8
 8008df2:	dc04      	bgt.n	8008dfe <_strtod_l+0x266>
 8008df4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008df6:	434e      	muls	r6, r1
 8008df8:	9609      	str	r6, [sp, #36]	; 0x24
 8008dfa:	3201      	adds	r2, #1
 8008dfc:	e7e2      	b.n	8008dc4 <_strtod_l+0x22c>
 8008dfe:	f102 0c01 	add.w	ip, r2, #1
 8008e02:	f1bc 0f10 	cmp.w	ip, #16
 8008e06:	bfd8      	it	le
 8008e08:	fb01 f909 	mulle.w	r9, r1, r9
 8008e0c:	e7f5      	b.n	8008dfa <_strtod_l+0x262>
 8008e0e:	2d10      	cmp	r5, #16
 8008e10:	bfdc      	itt	le
 8008e12:	220a      	movle	r2, #10
 8008e14:	fb02 3909 	mlale	r9, r2, r9, r3
 8008e18:	e7e1      	b.n	8008dde <_strtod_l+0x246>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	9307      	str	r3, [sp, #28]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	e77c      	b.n	8008d1c <_strtod_l+0x184>
 8008e22:	f04f 0c00 	mov.w	ip, #0
 8008e26:	f108 0302 	add.w	r3, r8, #2
 8008e2a:	931d      	str	r3, [sp, #116]	; 0x74
 8008e2c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008e30:	e785      	b.n	8008d3e <_strtod_l+0x1a6>
 8008e32:	f04f 0c01 	mov.w	ip, #1
 8008e36:	e7f6      	b.n	8008e26 <_strtod_l+0x28e>
 8008e38:	0800f694 	.word	0x0800f694
 8008e3c:	0800f3dc 	.word	0x0800f3dc
 8008e40:	7ff00000 	.word	0x7ff00000
 8008e44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e46:	1c59      	adds	r1, r3, #1
 8008e48:	911d      	str	r1, [sp, #116]	; 0x74
 8008e4a:	785b      	ldrb	r3, [r3, #1]
 8008e4c:	2b30      	cmp	r3, #48	; 0x30
 8008e4e:	d0f9      	beq.n	8008e44 <_strtod_l+0x2ac>
 8008e50:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008e54:	2908      	cmp	r1, #8
 8008e56:	f63f af79 	bhi.w	8008d4c <_strtod_l+0x1b4>
 8008e5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008e5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e60:	9308      	str	r3, [sp, #32]
 8008e62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e64:	1c59      	adds	r1, r3, #1
 8008e66:	911d      	str	r1, [sp, #116]	; 0x74
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008e6e:	2e09      	cmp	r6, #9
 8008e70:	d937      	bls.n	8008ee2 <_strtod_l+0x34a>
 8008e72:	9e08      	ldr	r6, [sp, #32]
 8008e74:	1b89      	subs	r1, r1, r6
 8008e76:	2908      	cmp	r1, #8
 8008e78:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008e7c:	dc02      	bgt.n	8008e84 <_strtod_l+0x2ec>
 8008e7e:	4576      	cmp	r6, lr
 8008e80:	bfa8      	it	ge
 8008e82:	4676      	movge	r6, lr
 8008e84:	f1bc 0f00 	cmp.w	ip, #0
 8008e88:	d000      	beq.n	8008e8c <_strtod_l+0x2f4>
 8008e8a:	4276      	negs	r6, r6
 8008e8c:	2d00      	cmp	r5, #0
 8008e8e:	d14f      	bne.n	8008f30 <_strtod_l+0x398>
 8008e90:	9904      	ldr	r1, [sp, #16]
 8008e92:	4301      	orrs	r1, r0
 8008e94:	f47f aec2 	bne.w	8008c1c <_strtod_l+0x84>
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	f47f aedb 	bne.w	8008c54 <_strtod_l+0xbc>
 8008e9e:	2b69      	cmp	r3, #105	; 0x69
 8008ea0:	d027      	beq.n	8008ef2 <_strtod_l+0x35a>
 8008ea2:	dc24      	bgt.n	8008eee <_strtod_l+0x356>
 8008ea4:	2b49      	cmp	r3, #73	; 0x49
 8008ea6:	d024      	beq.n	8008ef2 <_strtod_l+0x35a>
 8008ea8:	2b4e      	cmp	r3, #78	; 0x4e
 8008eaa:	f47f aed3 	bne.w	8008c54 <_strtod_l+0xbc>
 8008eae:	499e      	ldr	r1, [pc, #632]	; (8009128 <_strtod_l+0x590>)
 8008eb0:	a81d      	add	r0, sp, #116	; 0x74
 8008eb2:	f001 ff35 	bl	800ad20 <__match>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f43f aecc 	beq.w	8008c54 <_strtod_l+0xbc>
 8008ebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	2b28      	cmp	r3, #40	; 0x28
 8008ec2:	d12d      	bne.n	8008f20 <_strtod_l+0x388>
 8008ec4:	4999      	ldr	r1, [pc, #612]	; (800912c <_strtod_l+0x594>)
 8008ec6:	aa20      	add	r2, sp, #128	; 0x80
 8008ec8:	a81d      	add	r0, sp, #116	; 0x74
 8008eca:	f001 ff3d 	bl	800ad48 <__hexnan>
 8008ece:	2805      	cmp	r0, #5
 8008ed0:	d126      	bne.n	8008f20 <_strtod_l+0x388>
 8008ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ed4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008ed8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008edc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008ee0:	e69c      	b.n	8008c1c <_strtod_l+0x84>
 8008ee2:	210a      	movs	r1, #10
 8008ee4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008ee8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008eec:	e7b9      	b.n	8008e62 <_strtod_l+0x2ca>
 8008eee:	2b6e      	cmp	r3, #110	; 0x6e
 8008ef0:	e7db      	b.n	8008eaa <_strtod_l+0x312>
 8008ef2:	498f      	ldr	r1, [pc, #572]	; (8009130 <_strtod_l+0x598>)
 8008ef4:	a81d      	add	r0, sp, #116	; 0x74
 8008ef6:	f001 ff13 	bl	800ad20 <__match>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	f43f aeaa 	beq.w	8008c54 <_strtod_l+0xbc>
 8008f00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f02:	498c      	ldr	r1, [pc, #560]	; (8009134 <_strtod_l+0x59c>)
 8008f04:	3b01      	subs	r3, #1
 8008f06:	a81d      	add	r0, sp, #116	; 0x74
 8008f08:	931d      	str	r3, [sp, #116]	; 0x74
 8008f0a:	f001 ff09 	bl	800ad20 <__match>
 8008f0e:	b910      	cbnz	r0, 8008f16 <_strtod_l+0x37e>
 8008f10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f12:	3301      	adds	r3, #1
 8008f14:	931d      	str	r3, [sp, #116]	; 0x74
 8008f16:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009144 <_strtod_l+0x5ac>
 8008f1a:	f04f 0a00 	mov.w	sl, #0
 8008f1e:	e67d      	b.n	8008c1c <_strtod_l+0x84>
 8008f20:	4885      	ldr	r0, [pc, #532]	; (8009138 <_strtod_l+0x5a0>)
 8008f22:	f002 ff9d 	bl	800be60 <nan>
 8008f26:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008f2a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008f2e:	e675      	b.n	8008c1c <_strtod_l+0x84>
 8008f30:	9b07      	ldr	r3, [sp, #28]
 8008f32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f34:	1af3      	subs	r3, r6, r3
 8008f36:	2f00      	cmp	r7, #0
 8008f38:	bf08      	it	eq
 8008f3a:	462f      	moveq	r7, r5
 8008f3c:	2d10      	cmp	r5, #16
 8008f3e:	9308      	str	r3, [sp, #32]
 8008f40:	46a8      	mov	r8, r5
 8008f42:	bfa8      	it	ge
 8008f44:	f04f 0810 	movge.w	r8, #16
 8008f48:	f7f7 fae4 	bl	8000514 <__aeabi_ui2d>
 8008f4c:	2d09      	cmp	r5, #9
 8008f4e:	4682      	mov	sl, r0
 8008f50:	468b      	mov	fp, r1
 8008f52:	dd13      	ble.n	8008f7c <_strtod_l+0x3e4>
 8008f54:	4b79      	ldr	r3, [pc, #484]	; (800913c <_strtod_l+0x5a4>)
 8008f56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008f5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008f5e:	f7f7 fb53 	bl	8000608 <__aeabi_dmul>
 8008f62:	4682      	mov	sl, r0
 8008f64:	4648      	mov	r0, r9
 8008f66:	468b      	mov	fp, r1
 8008f68:	f7f7 fad4 	bl	8000514 <__aeabi_ui2d>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4650      	mov	r0, sl
 8008f72:	4659      	mov	r1, fp
 8008f74:	f7f7 f992 	bl	800029c <__adddf3>
 8008f78:	4682      	mov	sl, r0
 8008f7a:	468b      	mov	fp, r1
 8008f7c:	2d0f      	cmp	r5, #15
 8008f7e:	dc38      	bgt.n	8008ff2 <_strtod_l+0x45a>
 8008f80:	9b08      	ldr	r3, [sp, #32]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f43f ae4a 	beq.w	8008c1c <_strtod_l+0x84>
 8008f88:	dd24      	ble.n	8008fd4 <_strtod_l+0x43c>
 8008f8a:	2b16      	cmp	r3, #22
 8008f8c:	dc0b      	bgt.n	8008fa6 <_strtod_l+0x40e>
 8008f8e:	4d6b      	ldr	r5, [pc, #428]	; (800913c <_strtod_l+0x5a4>)
 8008f90:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008f94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008f98:	4652      	mov	r2, sl
 8008f9a:	465b      	mov	r3, fp
 8008f9c:	f7f7 fb34 	bl	8000608 <__aeabi_dmul>
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	468b      	mov	fp, r1
 8008fa4:	e63a      	b.n	8008c1c <_strtod_l+0x84>
 8008fa6:	9a08      	ldr	r2, [sp, #32]
 8008fa8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008fac:	4293      	cmp	r3, r2
 8008fae:	db20      	blt.n	8008ff2 <_strtod_l+0x45a>
 8008fb0:	4c62      	ldr	r4, [pc, #392]	; (800913c <_strtod_l+0x5a4>)
 8008fb2:	f1c5 050f 	rsb	r5, r5, #15
 8008fb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008fba:	4652      	mov	r2, sl
 8008fbc:	465b      	mov	r3, fp
 8008fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fc2:	f7f7 fb21 	bl	8000608 <__aeabi_dmul>
 8008fc6:	9b08      	ldr	r3, [sp, #32]
 8008fc8:	1b5d      	subs	r5, r3, r5
 8008fca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008fce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008fd2:	e7e3      	b.n	8008f9c <_strtod_l+0x404>
 8008fd4:	9b08      	ldr	r3, [sp, #32]
 8008fd6:	3316      	adds	r3, #22
 8008fd8:	db0b      	blt.n	8008ff2 <_strtod_l+0x45a>
 8008fda:	9b07      	ldr	r3, [sp, #28]
 8008fdc:	4a57      	ldr	r2, [pc, #348]	; (800913c <_strtod_l+0x5a4>)
 8008fde:	1b9e      	subs	r6, r3, r6
 8008fe0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008fe4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fe8:	4650      	mov	r0, sl
 8008fea:	4659      	mov	r1, fp
 8008fec:	f7f7 fc36 	bl	800085c <__aeabi_ddiv>
 8008ff0:	e7d6      	b.n	8008fa0 <_strtod_l+0x408>
 8008ff2:	9b08      	ldr	r3, [sp, #32]
 8008ff4:	eba5 0808 	sub.w	r8, r5, r8
 8008ff8:	4498      	add	r8, r3
 8008ffa:	f1b8 0f00 	cmp.w	r8, #0
 8008ffe:	dd71      	ble.n	80090e4 <_strtod_l+0x54c>
 8009000:	f018 030f 	ands.w	r3, r8, #15
 8009004:	d00a      	beq.n	800901c <_strtod_l+0x484>
 8009006:	494d      	ldr	r1, [pc, #308]	; (800913c <_strtod_l+0x5a4>)
 8009008:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800900c:	4652      	mov	r2, sl
 800900e:	465b      	mov	r3, fp
 8009010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009014:	f7f7 faf8 	bl	8000608 <__aeabi_dmul>
 8009018:	4682      	mov	sl, r0
 800901a:	468b      	mov	fp, r1
 800901c:	f038 080f 	bics.w	r8, r8, #15
 8009020:	d04d      	beq.n	80090be <_strtod_l+0x526>
 8009022:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009026:	dd22      	ble.n	800906e <_strtod_l+0x4d6>
 8009028:	2500      	movs	r5, #0
 800902a:	462e      	mov	r6, r5
 800902c:	9509      	str	r5, [sp, #36]	; 0x24
 800902e:	9507      	str	r5, [sp, #28]
 8009030:	2322      	movs	r3, #34	; 0x22
 8009032:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009144 <_strtod_l+0x5ac>
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	f04f 0a00 	mov.w	sl, #0
 800903c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903e:	2b00      	cmp	r3, #0
 8009040:	f43f adec 	beq.w	8008c1c <_strtod_l+0x84>
 8009044:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009046:	4620      	mov	r0, r4
 8009048:	f001 ff80 	bl	800af4c <_Bfree>
 800904c:	9907      	ldr	r1, [sp, #28]
 800904e:	4620      	mov	r0, r4
 8009050:	f001 ff7c 	bl	800af4c <_Bfree>
 8009054:	4631      	mov	r1, r6
 8009056:	4620      	mov	r0, r4
 8009058:	f001 ff78 	bl	800af4c <_Bfree>
 800905c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800905e:	4620      	mov	r0, r4
 8009060:	f001 ff74 	bl	800af4c <_Bfree>
 8009064:	4629      	mov	r1, r5
 8009066:	4620      	mov	r0, r4
 8009068:	f001 ff70 	bl	800af4c <_Bfree>
 800906c:	e5d6      	b.n	8008c1c <_strtod_l+0x84>
 800906e:	2300      	movs	r3, #0
 8009070:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009074:	4650      	mov	r0, sl
 8009076:	4659      	mov	r1, fp
 8009078:	4699      	mov	r9, r3
 800907a:	f1b8 0f01 	cmp.w	r8, #1
 800907e:	dc21      	bgt.n	80090c4 <_strtod_l+0x52c>
 8009080:	b10b      	cbz	r3, 8009086 <_strtod_l+0x4ee>
 8009082:	4682      	mov	sl, r0
 8009084:	468b      	mov	fp, r1
 8009086:	4b2e      	ldr	r3, [pc, #184]	; (8009140 <_strtod_l+0x5a8>)
 8009088:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800908c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009090:	4652      	mov	r2, sl
 8009092:	465b      	mov	r3, fp
 8009094:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009098:	f7f7 fab6 	bl	8000608 <__aeabi_dmul>
 800909c:	4b29      	ldr	r3, [pc, #164]	; (8009144 <_strtod_l+0x5ac>)
 800909e:	460a      	mov	r2, r1
 80090a0:	400b      	ands	r3, r1
 80090a2:	4929      	ldr	r1, [pc, #164]	; (8009148 <_strtod_l+0x5b0>)
 80090a4:	428b      	cmp	r3, r1
 80090a6:	4682      	mov	sl, r0
 80090a8:	d8be      	bhi.n	8009028 <_strtod_l+0x490>
 80090aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80090ae:	428b      	cmp	r3, r1
 80090b0:	bf86      	itte	hi
 80090b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800914c <_strtod_l+0x5b4>
 80090b6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80090ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80090be:	2300      	movs	r3, #0
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	e081      	b.n	80091c8 <_strtod_l+0x630>
 80090c4:	f018 0f01 	tst.w	r8, #1
 80090c8:	d007      	beq.n	80090da <_strtod_l+0x542>
 80090ca:	4b1d      	ldr	r3, [pc, #116]	; (8009140 <_strtod_l+0x5a8>)
 80090cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80090d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d4:	f7f7 fa98 	bl	8000608 <__aeabi_dmul>
 80090d8:	2301      	movs	r3, #1
 80090da:	f109 0901 	add.w	r9, r9, #1
 80090de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80090e2:	e7ca      	b.n	800907a <_strtod_l+0x4e2>
 80090e4:	d0eb      	beq.n	80090be <_strtod_l+0x526>
 80090e6:	f1c8 0800 	rsb	r8, r8, #0
 80090ea:	f018 020f 	ands.w	r2, r8, #15
 80090ee:	d00a      	beq.n	8009106 <_strtod_l+0x56e>
 80090f0:	4b12      	ldr	r3, [pc, #72]	; (800913c <_strtod_l+0x5a4>)
 80090f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090f6:	4650      	mov	r0, sl
 80090f8:	4659      	mov	r1, fp
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f7f7 fbad 	bl	800085c <__aeabi_ddiv>
 8009102:	4682      	mov	sl, r0
 8009104:	468b      	mov	fp, r1
 8009106:	ea5f 1828 	movs.w	r8, r8, asr #4
 800910a:	d0d8      	beq.n	80090be <_strtod_l+0x526>
 800910c:	f1b8 0f1f 	cmp.w	r8, #31
 8009110:	dd1e      	ble.n	8009150 <_strtod_l+0x5b8>
 8009112:	2500      	movs	r5, #0
 8009114:	462e      	mov	r6, r5
 8009116:	9509      	str	r5, [sp, #36]	; 0x24
 8009118:	9507      	str	r5, [sp, #28]
 800911a:	2322      	movs	r3, #34	; 0x22
 800911c:	f04f 0a00 	mov.w	sl, #0
 8009120:	f04f 0b00 	mov.w	fp, #0
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	e789      	b.n	800903c <_strtod_l+0x4a4>
 8009128:	0800f3ad 	.word	0x0800f3ad
 800912c:	0800f3f0 	.word	0x0800f3f0
 8009130:	0800f3a5 	.word	0x0800f3a5
 8009134:	0800f534 	.word	0x0800f534
 8009138:	0800f850 	.word	0x0800f850
 800913c:	0800f730 	.word	0x0800f730
 8009140:	0800f708 	.word	0x0800f708
 8009144:	7ff00000 	.word	0x7ff00000
 8009148:	7ca00000 	.word	0x7ca00000
 800914c:	7fefffff 	.word	0x7fefffff
 8009150:	f018 0310 	ands.w	r3, r8, #16
 8009154:	bf18      	it	ne
 8009156:	236a      	movne	r3, #106	; 0x6a
 8009158:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009510 <_strtod_l+0x978>
 800915c:	9304      	str	r3, [sp, #16]
 800915e:	4650      	mov	r0, sl
 8009160:	4659      	mov	r1, fp
 8009162:	2300      	movs	r3, #0
 8009164:	f018 0f01 	tst.w	r8, #1
 8009168:	d004      	beq.n	8009174 <_strtod_l+0x5dc>
 800916a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800916e:	f7f7 fa4b 	bl	8000608 <__aeabi_dmul>
 8009172:	2301      	movs	r3, #1
 8009174:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009178:	f109 0908 	add.w	r9, r9, #8
 800917c:	d1f2      	bne.n	8009164 <_strtod_l+0x5cc>
 800917e:	b10b      	cbz	r3, 8009184 <_strtod_l+0x5ec>
 8009180:	4682      	mov	sl, r0
 8009182:	468b      	mov	fp, r1
 8009184:	9b04      	ldr	r3, [sp, #16]
 8009186:	b1bb      	cbz	r3, 80091b8 <_strtod_l+0x620>
 8009188:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800918c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009190:	2b00      	cmp	r3, #0
 8009192:	4659      	mov	r1, fp
 8009194:	dd10      	ble.n	80091b8 <_strtod_l+0x620>
 8009196:	2b1f      	cmp	r3, #31
 8009198:	f340 8128 	ble.w	80093ec <_strtod_l+0x854>
 800919c:	2b34      	cmp	r3, #52	; 0x34
 800919e:	bfde      	ittt	le
 80091a0:	3b20      	suble	r3, #32
 80091a2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80091a6:	fa02 f303 	lslle.w	r3, r2, r3
 80091aa:	f04f 0a00 	mov.w	sl, #0
 80091ae:	bfcc      	ite	gt
 80091b0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80091b4:	ea03 0b01 	andle.w	fp, r3, r1
 80091b8:	2200      	movs	r2, #0
 80091ba:	2300      	movs	r3, #0
 80091bc:	4650      	mov	r0, sl
 80091be:	4659      	mov	r1, fp
 80091c0:	f7f7 fc8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d1a4      	bne.n	8009112 <_strtod_l+0x57a>
 80091c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091ce:	462b      	mov	r3, r5
 80091d0:	463a      	mov	r2, r7
 80091d2:	4620      	mov	r0, r4
 80091d4:	f001 ff26 	bl	800b024 <__s2b>
 80091d8:	9009      	str	r0, [sp, #36]	; 0x24
 80091da:	2800      	cmp	r0, #0
 80091dc:	f43f af24 	beq.w	8009028 <_strtod_l+0x490>
 80091e0:	9b07      	ldr	r3, [sp, #28]
 80091e2:	1b9e      	subs	r6, r3, r6
 80091e4:	9b08      	ldr	r3, [sp, #32]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	bfb4      	ite	lt
 80091ea:	4633      	movlt	r3, r6
 80091ec:	2300      	movge	r3, #0
 80091ee:	9310      	str	r3, [sp, #64]	; 0x40
 80091f0:	9b08      	ldr	r3, [sp, #32]
 80091f2:	2500      	movs	r5, #0
 80091f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80091f8:	9318      	str	r3, [sp, #96]	; 0x60
 80091fa:	462e      	mov	r6, r5
 80091fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091fe:	4620      	mov	r0, r4
 8009200:	6859      	ldr	r1, [r3, #4]
 8009202:	f001 fe63 	bl	800aecc <_Balloc>
 8009206:	9007      	str	r0, [sp, #28]
 8009208:	2800      	cmp	r0, #0
 800920a:	f43f af11 	beq.w	8009030 <_strtod_l+0x498>
 800920e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009210:	691a      	ldr	r2, [r3, #16]
 8009212:	3202      	adds	r2, #2
 8009214:	f103 010c 	add.w	r1, r3, #12
 8009218:	0092      	lsls	r2, r2, #2
 800921a:	300c      	adds	r0, #12
 800921c:	f7fe fd00 	bl	8007c20 <memcpy>
 8009220:	ec4b ab10 	vmov	d0, sl, fp
 8009224:	aa20      	add	r2, sp, #128	; 0x80
 8009226:	a91f      	add	r1, sp, #124	; 0x7c
 8009228:	4620      	mov	r0, r4
 800922a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800922e:	f002 fa35 	bl	800b69c <__d2b>
 8009232:	901e      	str	r0, [sp, #120]	; 0x78
 8009234:	2800      	cmp	r0, #0
 8009236:	f43f aefb 	beq.w	8009030 <_strtod_l+0x498>
 800923a:	2101      	movs	r1, #1
 800923c:	4620      	mov	r0, r4
 800923e:	f001 ff8b 	bl	800b158 <__i2b>
 8009242:	4606      	mov	r6, r0
 8009244:	2800      	cmp	r0, #0
 8009246:	f43f aef3 	beq.w	8009030 <_strtod_l+0x498>
 800924a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800924c:	9904      	ldr	r1, [sp, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	bfab      	itete	ge
 8009252:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009254:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009256:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009258:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800925c:	bfac      	ite	ge
 800925e:	eb03 0902 	addge.w	r9, r3, r2
 8009262:	1ad7      	sublt	r7, r2, r3
 8009264:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009266:	eba3 0801 	sub.w	r8, r3, r1
 800926a:	4490      	add	r8, r2
 800926c:	4ba3      	ldr	r3, [pc, #652]	; (80094fc <_strtod_l+0x964>)
 800926e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009272:	4598      	cmp	r8, r3
 8009274:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009278:	f280 80cc 	bge.w	8009414 <_strtod_l+0x87c>
 800927c:	eba3 0308 	sub.w	r3, r3, r8
 8009280:	2b1f      	cmp	r3, #31
 8009282:	eba2 0203 	sub.w	r2, r2, r3
 8009286:	f04f 0101 	mov.w	r1, #1
 800928a:	f300 80b6 	bgt.w	80093fa <_strtod_l+0x862>
 800928e:	fa01 f303 	lsl.w	r3, r1, r3
 8009292:	9311      	str	r3, [sp, #68]	; 0x44
 8009294:	2300      	movs	r3, #0
 8009296:	930c      	str	r3, [sp, #48]	; 0x30
 8009298:	eb09 0802 	add.w	r8, r9, r2
 800929c:	9b04      	ldr	r3, [sp, #16]
 800929e:	45c1      	cmp	r9, r8
 80092a0:	4417      	add	r7, r2
 80092a2:	441f      	add	r7, r3
 80092a4:	464b      	mov	r3, r9
 80092a6:	bfa8      	it	ge
 80092a8:	4643      	movge	r3, r8
 80092aa:	42bb      	cmp	r3, r7
 80092ac:	bfa8      	it	ge
 80092ae:	463b      	movge	r3, r7
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bfc2      	ittt	gt
 80092b4:	eba8 0803 	subgt.w	r8, r8, r3
 80092b8:	1aff      	subgt	r7, r7, r3
 80092ba:	eba9 0903 	subgt.w	r9, r9, r3
 80092be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dd17      	ble.n	80092f4 <_strtod_l+0x75c>
 80092c4:	4631      	mov	r1, r6
 80092c6:	461a      	mov	r2, r3
 80092c8:	4620      	mov	r0, r4
 80092ca:	f002 f801 	bl	800b2d0 <__pow5mult>
 80092ce:	4606      	mov	r6, r0
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f43f aead 	beq.w	8009030 <_strtod_l+0x498>
 80092d6:	4601      	mov	r1, r0
 80092d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80092da:	4620      	mov	r0, r4
 80092dc:	f001 ff52 	bl	800b184 <__multiply>
 80092e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80092e2:	2800      	cmp	r0, #0
 80092e4:	f43f aea4 	beq.w	8009030 <_strtod_l+0x498>
 80092e8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80092ea:	4620      	mov	r0, r4
 80092ec:	f001 fe2e 	bl	800af4c <_Bfree>
 80092f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092f2:	931e      	str	r3, [sp, #120]	; 0x78
 80092f4:	f1b8 0f00 	cmp.w	r8, #0
 80092f8:	f300 8091 	bgt.w	800941e <_strtod_l+0x886>
 80092fc:	9b08      	ldr	r3, [sp, #32]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dd08      	ble.n	8009314 <_strtod_l+0x77c>
 8009302:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009304:	9907      	ldr	r1, [sp, #28]
 8009306:	4620      	mov	r0, r4
 8009308:	f001 ffe2 	bl	800b2d0 <__pow5mult>
 800930c:	9007      	str	r0, [sp, #28]
 800930e:	2800      	cmp	r0, #0
 8009310:	f43f ae8e 	beq.w	8009030 <_strtod_l+0x498>
 8009314:	2f00      	cmp	r7, #0
 8009316:	dd08      	ble.n	800932a <_strtod_l+0x792>
 8009318:	9907      	ldr	r1, [sp, #28]
 800931a:	463a      	mov	r2, r7
 800931c:	4620      	mov	r0, r4
 800931e:	f002 f831 	bl	800b384 <__lshift>
 8009322:	9007      	str	r0, [sp, #28]
 8009324:	2800      	cmp	r0, #0
 8009326:	f43f ae83 	beq.w	8009030 <_strtod_l+0x498>
 800932a:	f1b9 0f00 	cmp.w	r9, #0
 800932e:	dd08      	ble.n	8009342 <_strtod_l+0x7aa>
 8009330:	4631      	mov	r1, r6
 8009332:	464a      	mov	r2, r9
 8009334:	4620      	mov	r0, r4
 8009336:	f002 f825 	bl	800b384 <__lshift>
 800933a:	4606      	mov	r6, r0
 800933c:	2800      	cmp	r0, #0
 800933e:	f43f ae77 	beq.w	8009030 <_strtod_l+0x498>
 8009342:	9a07      	ldr	r2, [sp, #28]
 8009344:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009346:	4620      	mov	r0, r4
 8009348:	f002 f8a4 	bl	800b494 <__mdiff>
 800934c:	4605      	mov	r5, r0
 800934e:	2800      	cmp	r0, #0
 8009350:	f43f ae6e 	beq.w	8009030 <_strtod_l+0x498>
 8009354:	68c3      	ldr	r3, [r0, #12]
 8009356:	930f      	str	r3, [sp, #60]	; 0x3c
 8009358:	2300      	movs	r3, #0
 800935a:	60c3      	str	r3, [r0, #12]
 800935c:	4631      	mov	r1, r6
 800935e:	f002 f87d 	bl	800b45c <__mcmp>
 8009362:	2800      	cmp	r0, #0
 8009364:	da65      	bge.n	8009432 <_strtod_l+0x89a>
 8009366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009368:	ea53 030a 	orrs.w	r3, r3, sl
 800936c:	f040 8087 	bne.w	800947e <_strtod_l+0x8e6>
 8009370:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009374:	2b00      	cmp	r3, #0
 8009376:	f040 8082 	bne.w	800947e <_strtod_l+0x8e6>
 800937a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800937e:	0d1b      	lsrs	r3, r3, #20
 8009380:	051b      	lsls	r3, r3, #20
 8009382:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009386:	d97a      	bls.n	800947e <_strtod_l+0x8e6>
 8009388:	696b      	ldr	r3, [r5, #20]
 800938a:	b913      	cbnz	r3, 8009392 <_strtod_l+0x7fa>
 800938c:	692b      	ldr	r3, [r5, #16]
 800938e:	2b01      	cmp	r3, #1
 8009390:	dd75      	ble.n	800947e <_strtod_l+0x8e6>
 8009392:	4629      	mov	r1, r5
 8009394:	2201      	movs	r2, #1
 8009396:	4620      	mov	r0, r4
 8009398:	f001 fff4 	bl	800b384 <__lshift>
 800939c:	4631      	mov	r1, r6
 800939e:	4605      	mov	r5, r0
 80093a0:	f002 f85c 	bl	800b45c <__mcmp>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	dd6a      	ble.n	800947e <_strtod_l+0x8e6>
 80093a8:	9904      	ldr	r1, [sp, #16]
 80093aa:	4a55      	ldr	r2, [pc, #340]	; (8009500 <_strtod_l+0x968>)
 80093ac:	465b      	mov	r3, fp
 80093ae:	2900      	cmp	r1, #0
 80093b0:	f000 8085 	beq.w	80094be <_strtod_l+0x926>
 80093b4:	ea02 010b 	and.w	r1, r2, fp
 80093b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80093bc:	dc7f      	bgt.n	80094be <_strtod_l+0x926>
 80093be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80093c2:	f77f aeaa 	ble.w	800911a <_strtod_l+0x582>
 80093c6:	4a4f      	ldr	r2, [pc, #316]	; (8009504 <_strtod_l+0x96c>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80093ce:	4650      	mov	r0, sl
 80093d0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80093d4:	4659      	mov	r1, fp
 80093d6:	f7f7 f917 	bl	8000608 <__aeabi_dmul>
 80093da:	460b      	mov	r3, r1
 80093dc:	4303      	orrs	r3, r0
 80093de:	bf08      	it	eq
 80093e0:	2322      	moveq	r3, #34	; 0x22
 80093e2:	4682      	mov	sl, r0
 80093e4:	468b      	mov	fp, r1
 80093e6:	bf08      	it	eq
 80093e8:	6023      	streq	r3, [r4, #0]
 80093ea:	e62b      	b.n	8009044 <_strtod_l+0x4ac>
 80093ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093f0:	fa02 f303 	lsl.w	r3, r2, r3
 80093f4:	ea03 0a0a 	and.w	sl, r3, sl
 80093f8:	e6de      	b.n	80091b8 <_strtod_l+0x620>
 80093fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80093fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009402:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009406:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800940a:	fa01 f308 	lsl.w	r3, r1, r8
 800940e:	930c      	str	r3, [sp, #48]	; 0x30
 8009410:	9111      	str	r1, [sp, #68]	; 0x44
 8009412:	e741      	b.n	8009298 <_strtod_l+0x700>
 8009414:	2300      	movs	r3, #0
 8009416:	930c      	str	r3, [sp, #48]	; 0x30
 8009418:	2301      	movs	r3, #1
 800941a:	9311      	str	r3, [sp, #68]	; 0x44
 800941c:	e73c      	b.n	8009298 <_strtod_l+0x700>
 800941e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009420:	4642      	mov	r2, r8
 8009422:	4620      	mov	r0, r4
 8009424:	f001 ffae 	bl	800b384 <__lshift>
 8009428:	901e      	str	r0, [sp, #120]	; 0x78
 800942a:	2800      	cmp	r0, #0
 800942c:	f47f af66 	bne.w	80092fc <_strtod_l+0x764>
 8009430:	e5fe      	b.n	8009030 <_strtod_l+0x498>
 8009432:	465f      	mov	r7, fp
 8009434:	d16e      	bne.n	8009514 <_strtod_l+0x97c>
 8009436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009438:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800943c:	b342      	cbz	r2, 8009490 <_strtod_l+0x8f8>
 800943e:	4a32      	ldr	r2, [pc, #200]	; (8009508 <_strtod_l+0x970>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d128      	bne.n	8009496 <_strtod_l+0x8fe>
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	4650      	mov	r0, sl
 8009448:	b1eb      	cbz	r3, 8009486 <_strtod_l+0x8ee>
 800944a:	4a2d      	ldr	r2, [pc, #180]	; (8009500 <_strtod_l+0x968>)
 800944c:	403a      	ands	r2, r7
 800944e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009452:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009456:	d819      	bhi.n	800948c <_strtod_l+0x8f4>
 8009458:	0d12      	lsrs	r2, r2, #20
 800945a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800945e:	fa01 f303 	lsl.w	r3, r1, r3
 8009462:	4298      	cmp	r0, r3
 8009464:	d117      	bne.n	8009496 <_strtod_l+0x8fe>
 8009466:	4b29      	ldr	r3, [pc, #164]	; (800950c <_strtod_l+0x974>)
 8009468:	429f      	cmp	r7, r3
 800946a:	d102      	bne.n	8009472 <_strtod_l+0x8da>
 800946c:	3001      	adds	r0, #1
 800946e:	f43f addf 	beq.w	8009030 <_strtod_l+0x498>
 8009472:	4b23      	ldr	r3, [pc, #140]	; (8009500 <_strtod_l+0x968>)
 8009474:	403b      	ands	r3, r7
 8009476:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800947a:	f04f 0a00 	mov.w	sl, #0
 800947e:	9b04      	ldr	r3, [sp, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1a0      	bne.n	80093c6 <_strtod_l+0x82e>
 8009484:	e5de      	b.n	8009044 <_strtod_l+0x4ac>
 8009486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800948a:	e7ea      	b.n	8009462 <_strtod_l+0x8ca>
 800948c:	460b      	mov	r3, r1
 800948e:	e7e8      	b.n	8009462 <_strtod_l+0x8ca>
 8009490:	ea53 030a 	orrs.w	r3, r3, sl
 8009494:	d088      	beq.n	80093a8 <_strtod_l+0x810>
 8009496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009498:	b1db      	cbz	r3, 80094d2 <_strtod_l+0x93a>
 800949a:	423b      	tst	r3, r7
 800949c:	d0ef      	beq.n	800947e <_strtod_l+0x8e6>
 800949e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094a0:	9a04      	ldr	r2, [sp, #16]
 80094a2:	4650      	mov	r0, sl
 80094a4:	4659      	mov	r1, fp
 80094a6:	b1c3      	cbz	r3, 80094da <_strtod_l+0x942>
 80094a8:	f7ff fb58 	bl	8008b5c <sulp>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094b4:	f7f6 fef2 	bl	800029c <__adddf3>
 80094b8:	4682      	mov	sl, r0
 80094ba:	468b      	mov	fp, r1
 80094bc:	e7df      	b.n	800947e <_strtod_l+0x8e6>
 80094be:	4013      	ands	r3, r2
 80094c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80094c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80094cc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80094d0:	e7d5      	b.n	800947e <_strtod_l+0x8e6>
 80094d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094d4:	ea13 0f0a 	tst.w	r3, sl
 80094d8:	e7e0      	b.n	800949c <_strtod_l+0x904>
 80094da:	f7ff fb3f 	bl	8008b5c <sulp>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094e6:	f7f6 fed7 	bl	8000298 <__aeabi_dsub>
 80094ea:	2200      	movs	r2, #0
 80094ec:	2300      	movs	r3, #0
 80094ee:	4682      	mov	sl, r0
 80094f0:	468b      	mov	fp, r1
 80094f2:	f7f7 faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d0c1      	beq.n	800947e <_strtod_l+0x8e6>
 80094fa:	e60e      	b.n	800911a <_strtod_l+0x582>
 80094fc:	fffffc02 	.word	0xfffffc02
 8009500:	7ff00000 	.word	0x7ff00000
 8009504:	39500000 	.word	0x39500000
 8009508:	000fffff 	.word	0x000fffff
 800950c:	7fefffff 	.word	0x7fefffff
 8009510:	0800f408 	.word	0x0800f408
 8009514:	4631      	mov	r1, r6
 8009516:	4628      	mov	r0, r5
 8009518:	f002 f91c 	bl	800b754 <__ratio>
 800951c:	ec59 8b10 	vmov	r8, r9, d0
 8009520:	ee10 0a10 	vmov	r0, s0
 8009524:	2200      	movs	r2, #0
 8009526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800952a:	4649      	mov	r1, r9
 800952c:	f7f7 fae8 	bl	8000b00 <__aeabi_dcmple>
 8009530:	2800      	cmp	r0, #0
 8009532:	d07c      	beq.n	800962e <_strtod_l+0xa96>
 8009534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009536:	2b00      	cmp	r3, #0
 8009538:	d04c      	beq.n	80095d4 <_strtod_l+0xa3c>
 800953a:	4b95      	ldr	r3, [pc, #596]	; (8009790 <_strtod_l+0xbf8>)
 800953c:	2200      	movs	r2, #0
 800953e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009542:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009790 <_strtod_l+0xbf8>
 8009546:	f04f 0800 	mov.w	r8, #0
 800954a:	4b92      	ldr	r3, [pc, #584]	; (8009794 <_strtod_l+0xbfc>)
 800954c:	403b      	ands	r3, r7
 800954e:	9311      	str	r3, [sp, #68]	; 0x44
 8009550:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009552:	4b91      	ldr	r3, [pc, #580]	; (8009798 <_strtod_l+0xc00>)
 8009554:	429a      	cmp	r2, r3
 8009556:	f040 80b2 	bne.w	80096be <_strtod_l+0xb26>
 800955a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800955e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009562:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009566:	ec4b ab10 	vmov	d0, sl, fp
 800956a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800956e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009572:	f002 f817 	bl	800b5a4 <__ulp>
 8009576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800957a:	ec53 2b10 	vmov	r2, r3, d0
 800957e:	f7f7 f843 	bl	8000608 <__aeabi_dmul>
 8009582:	4652      	mov	r2, sl
 8009584:	465b      	mov	r3, fp
 8009586:	f7f6 fe89 	bl	800029c <__adddf3>
 800958a:	460b      	mov	r3, r1
 800958c:	4981      	ldr	r1, [pc, #516]	; (8009794 <_strtod_l+0xbfc>)
 800958e:	4a83      	ldr	r2, [pc, #524]	; (800979c <_strtod_l+0xc04>)
 8009590:	4019      	ands	r1, r3
 8009592:	4291      	cmp	r1, r2
 8009594:	4682      	mov	sl, r0
 8009596:	d95e      	bls.n	8009656 <_strtod_l+0xabe>
 8009598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800959a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800959e:	4293      	cmp	r3, r2
 80095a0:	d103      	bne.n	80095aa <_strtod_l+0xa12>
 80095a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a4:	3301      	adds	r3, #1
 80095a6:	f43f ad43 	beq.w	8009030 <_strtod_l+0x498>
 80095aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80097a8 <_strtod_l+0xc10>
 80095ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80095b2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80095b4:	4620      	mov	r0, r4
 80095b6:	f001 fcc9 	bl	800af4c <_Bfree>
 80095ba:	9907      	ldr	r1, [sp, #28]
 80095bc:	4620      	mov	r0, r4
 80095be:	f001 fcc5 	bl	800af4c <_Bfree>
 80095c2:	4631      	mov	r1, r6
 80095c4:	4620      	mov	r0, r4
 80095c6:	f001 fcc1 	bl	800af4c <_Bfree>
 80095ca:	4629      	mov	r1, r5
 80095cc:	4620      	mov	r0, r4
 80095ce:	f001 fcbd 	bl	800af4c <_Bfree>
 80095d2:	e613      	b.n	80091fc <_strtod_l+0x664>
 80095d4:	f1ba 0f00 	cmp.w	sl, #0
 80095d8:	d11b      	bne.n	8009612 <_strtod_l+0xa7a>
 80095da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095de:	b9f3      	cbnz	r3, 800961e <_strtod_l+0xa86>
 80095e0:	4b6b      	ldr	r3, [pc, #428]	; (8009790 <_strtod_l+0xbf8>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	4640      	mov	r0, r8
 80095e6:	4649      	mov	r1, r9
 80095e8:	f7f7 fa80 	bl	8000aec <__aeabi_dcmplt>
 80095ec:	b9d0      	cbnz	r0, 8009624 <_strtod_l+0xa8c>
 80095ee:	4640      	mov	r0, r8
 80095f0:	4649      	mov	r1, r9
 80095f2:	4b6b      	ldr	r3, [pc, #428]	; (80097a0 <_strtod_l+0xc08>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	f7f7 f807 	bl	8000608 <__aeabi_dmul>
 80095fa:	4680      	mov	r8, r0
 80095fc:	4689      	mov	r9, r1
 80095fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009602:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009606:	931b      	str	r3, [sp, #108]	; 0x6c
 8009608:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800960c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009610:	e79b      	b.n	800954a <_strtod_l+0x9b2>
 8009612:	f1ba 0f01 	cmp.w	sl, #1
 8009616:	d102      	bne.n	800961e <_strtod_l+0xa86>
 8009618:	2f00      	cmp	r7, #0
 800961a:	f43f ad7e 	beq.w	800911a <_strtod_l+0x582>
 800961e:	4b61      	ldr	r3, [pc, #388]	; (80097a4 <_strtod_l+0xc0c>)
 8009620:	2200      	movs	r2, #0
 8009622:	e78c      	b.n	800953e <_strtod_l+0x9a6>
 8009624:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80097a0 <_strtod_l+0xc08>
 8009628:	f04f 0800 	mov.w	r8, #0
 800962c:	e7e7      	b.n	80095fe <_strtod_l+0xa66>
 800962e:	4b5c      	ldr	r3, [pc, #368]	; (80097a0 <_strtod_l+0xc08>)
 8009630:	4640      	mov	r0, r8
 8009632:	4649      	mov	r1, r9
 8009634:	2200      	movs	r2, #0
 8009636:	f7f6 ffe7 	bl	8000608 <__aeabi_dmul>
 800963a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800963c:	4680      	mov	r8, r0
 800963e:	4689      	mov	r9, r1
 8009640:	b933      	cbnz	r3, 8009650 <_strtod_l+0xab8>
 8009642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009646:	9012      	str	r0, [sp, #72]	; 0x48
 8009648:	9313      	str	r3, [sp, #76]	; 0x4c
 800964a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800964e:	e7dd      	b.n	800960c <_strtod_l+0xa74>
 8009650:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009654:	e7f9      	b.n	800964a <_strtod_l+0xab2>
 8009656:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800965a:	9b04      	ldr	r3, [sp, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1a8      	bne.n	80095b2 <_strtod_l+0xa1a>
 8009660:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009664:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009666:	0d1b      	lsrs	r3, r3, #20
 8009668:	051b      	lsls	r3, r3, #20
 800966a:	429a      	cmp	r2, r3
 800966c:	d1a1      	bne.n	80095b2 <_strtod_l+0xa1a>
 800966e:	4640      	mov	r0, r8
 8009670:	4649      	mov	r1, r9
 8009672:	f7f7 fb29 	bl	8000cc8 <__aeabi_d2lz>
 8009676:	f7f6 ff99 	bl	80005ac <__aeabi_l2d>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4640      	mov	r0, r8
 8009680:	4649      	mov	r1, r9
 8009682:	f7f6 fe09 	bl	8000298 <__aeabi_dsub>
 8009686:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009688:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800968c:	ea43 030a 	orr.w	r3, r3, sl
 8009690:	4313      	orrs	r3, r2
 8009692:	4680      	mov	r8, r0
 8009694:	4689      	mov	r9, r1
 8009696:	d053      	beq.n	8009740 <_strtod_l+0xba8>
 8009698:	a335      	add	r3, pc, #212	; (adr r3, 8009770 <_strtod_l+0xbd8>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f7 fa25 	bl	8000aec <__aeabi_dcmplt>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	f47f acce 	bne.w	8009044 <_strtod_l+0x4ac>
 80096a8:	a333      	add	r3, pc, #204	; (adr r3, 8009778 <_strtod_l+0xbe0>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	4640      	mov	r0, r8
 80096b0:	4649      	mov	r1, r9
 80096b2:	f7f7 fa39 	bl	8000b28 <__aeabi_dcmpgt>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f43f af7b 	beq.w	80095b2 <_strtod_l+0xa1a>
 80096bc:	e4c2      	b.n	8009044 <_strtod_l+0x4ac>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	b333      	cbz	r3, 8009710 <_strtod_l+0xb78>
 80096c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096c8:	d822      	bhi.n	8009710 <_strtod_l+0xb78>
 80096ca:	a32d      	add	r3, pc, #180	; (adr r3, 8009780 <_strtod_l+0xbe8>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	4640      	mov	r0, r8
 80096d2:	4649      	mov	r1, r9
 80096d4:	f7f7 fa14 	bl	8000b00 <__aeabi_dcmple>
 80096d8:	b1a0      	cbz	r0, 8009704 <_strtod_l+0xb6c>
 80096da:	4649      	mov	r1, r9
 80096dc:	4640      	mov	r0, r8
 80096de:	f7f7 fa6b 	bl	8000bb8 <__aeabi_d2uiz>
 80096e2:	2801      	cmp	r0, #1
 80096e4:	bf38      	it	cc
 80096e6:	2001      	movcc	r0, #1
 80096e8:	f7f6 ff14 	bl	8000514 <__aeabi_ui2d>
 80096ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ee:	4680      	mov	r8, r0
 80096f0:	4689      	mov	r9, r1
 80096f2:	bb13      	cbnz	r3, 800973a <_strtod_l+0xba2>
 80096f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096f8:	9014      	str	r0, [sp, #80]	; 0x50
 80096fa:	9315      	str	r3, [sp, #84]	; 0x54
 80096fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009700:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009706:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009708:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800970c:	1a9b      	subs	r3, r3, r2
 800970e:	930d      	str	r3, [sp, #52]	; 0x34
 8009710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009714:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009718:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800971c:	f001 ff42 	bl	800b5a4 <__ulp>
 8009720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009724:	ec53 2b10 	vmov	r2, r3, d0
 8009728:	f7f6 ff6e 	bl	8000608 <__aeabi_dmul>
 800972c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009730:	f7f6 fdb4 	bl	800029c <__adddf3>
 8009734:	4682      	mov	sl, r0
 8009736:	468b      	mov	fp, r1
 8009738:	e78f      	b.n	800965a <_strtod_l+0xac2>
 800973a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800973e:	e7dd      	b.n	80096fc <_strtod_l+0xb64>
 8009740:	a311      	add	r3, pc, #68	; (adr r3, 8009788 <_strtod_l+0xbf0>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f7 f9d1 	bl	8000aec <__aeabi_dcmplt>
 800974a:	e7b4      	b.n	80096b6 <_strtod_l+0xb1e>
 800974c:	2300      	movs	r3, #0
 800974e:	930e      	str	r3, [sp, #56]	; 0x38
 8009750:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009752:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009754:	6013      	str	r3, [r2, #0]
 8009756:	f7ff ba65 	b.w	8008c24 <_strtod_l+0x8c>
 800975a:	2b65      	cmp	r3, #101	; 0x65
 800975c:	f43f ab5d 	beq.w	8008e1a <_strtod_l+0x282>
 8009760:	2b45      	cmp	r3, #69	; 0x45
 8009762:	f43f ab5a 	beq.w	8008e1a <_strtod_l+0x282>
 8009766:	2201      	movs	r2, #1
 8009768:	f7ff bb92 	b.w	8008e90 <_strtod_l+0x2f8>
 800976c:	f3af 8000 	nop.w
 8009770:	94a03595 	.word	0x94a03595
 8009774:	3fdfffff 	.word	0x3fdfffff
 8009778:	35afe535 	.word	0x35afe535
 800977c:	3fe00000 	.word	0x3fe00000
 8009780:	ffc00000 	.word	0xffc00000
 8009784:	41dfffff 	.word	0x41dfffff
 8009788:	94a03595 	.word	0x94a03595
 800978c:	3fcfffff 	.word	0x3fcfffff
 8009790:	3ff00000 	.word	0x3ff00000
 8009794:	7ff00000 	.word	0x7ff00000
 8009798:	7fe00000 	.word	0x7fe00000
 800979c:	7c9fffff 	.word	0x7c9fffff
 80097a0:	3fe00000 	.word	0x3fe00000
 80097a4:	bff00000 	.word	0xbff00000
 80097a8:	7fefffff 	.word	0x7fefffff

080097ac <_strtod_r>:
 80097ac:	4b01      	ldr	r3, [pc, #4]	; (80097b4 <_strtod_r+0x8>)
 80097ae:	f7ff b9f3 	b.w	8008b98 <_strtod_l>
 80097b2:	bf00      	nop
 80097b4:	20000080 	.word	0x20000080

080097b8 <_strtol_l.isra.0>:
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097be:	d001      	beq.n	80097c4 <_strtol_l.isra.0+0xc>
 80097c0:	2b24      	cmp	r3, #36	; 0x24
 80097c2:	d906      	bls.n	80097d2 <_strtol_l.isra.0+0x1a>
 80097c4:	f7fe f9fa 	bl	8007bbc <__errno>
 80097c8:	2316      	movs	r3, #22
 80097ca:	6003      	str	r3, [r0, #0]
 80097cc:	2000      	movs	r0, #0
 80097ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d2:	4f3a      	ldr	r7, [pc, #232]	; (80098bc <_strtol_l.isra.0+0x104>)
 80097d4:	468e      	mov	lr, r1
 80097d6:	4676      	mov	r6, lr
 80097d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80097dc:	5de5      	ldrb	r5, [r4, r7]
 80097de:	f015 0508 	ands.w	r5, r5, #8
 80097e2:	d1f8      	bne.n	80097d6 <_strtol_l.isra.0+0x1e>
 80097e4:	2c2d      	cmp	r4, #45	; 0x2d
 80097e6:	d134      	bne.n	8009852 <_strtol_l.isra.0+0x9a>
 80097e8:	f89e 4000 	ldrb.w	r4, [lr]
 80097ec:	f04f 0801 	mov.w	r8, #1
 80097f0:	f106 0e02 	add.w	lr, r6, #2
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d05c      	beq.n	80098b2 <_strtol_l.isra.0+0xfa>
 80097f8:	2b10      	cmp	r3, #16
 80097fa:	d10c      	bne.n	8009816 <_strtol_l.isra.0+0x5e>
 80097fc:	2c30      	cmp	r4, #48	; 0x30
 80097fe:	d10a      	bne.n	8009816 <_strtol_l.isra.0+0x5e>
 8009800:	f89e 4000 	ldrb.w	r4, [lr]
 8009804:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009808:	2c58      	cmp	r4, #88	; 0x58
 800980a:	d14d      	bne.n	80098a8 <_strtol_l.isra.0+0xf0>
 800980c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009810:	2310      	movs	r3, #16
 8009812:	f10e 0e02 	add.w	lr, lr, #2
 8009816:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800981a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800981e:	2600      	movs	r6, #0
 8009820:	fbbc f9f3 	udiv	r9, ip, r3
 8009824:	4635      	mov	r5, r6
 8009826:	fb03 ca19 	mls	sl, r3, r9, ip
 800982a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800982e:	2f09      	cmp	r7, #9
 8009830:	d818      	bhi.n	8009864 <_strtol_l.isra.0+0xac>
 8009832:	463c      	mov	r4, r7
 8009834:	42a3      	cmp	r3, r4
 8009836:	dd24      	ble.n	8009882 <_strtol_l.isra.0+0xca>
 8009838:	2e00      	cmp	r6, #0
 800983a:	db1f      	blt.n	800987c <_strtol_l.isra.0+0xc4>
 800983c:	45a9      	cmp	r9, r5
 800983e:	d31d      	bcc.n	800987c <_strtol_l.isra.0+0xc4>
 8009840:	d101      	bne.n	8009846 <_strtol_l.isra.0+0x8e>
 8009842:	45a2      	cmp	sl, r4
 8009844:	db1a      	blt.n	800987c <_strtol_l.isra.0+0xc4>
 8009846:	fb05 4503 	mla	r5, r5, r3, r4
 800984a:	2601      	movs	r6, #1
 800984c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009850:	e7eb      	b.n	800982a <_strtol_l.isra.0+0x72>
 8009852:	2c2b      	cmp	r4, #43	; 0x2b
 8009854:	bf08      	it	eq
 8009856:	f89e 4000 	ldrbeq.w	r4, [lr]
 800985a:	46a8      	mov	r8, r5
 800985c:	bf08      	it	eq
 800985e:	f106 0e02 	addeq.w	lr, r6, #2
 8009862:	e7c7      	b.n	80097f4 <_strtol_l.isra.0+0x3c>
 8009864:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009868:	2f19      	cmp	r7, #25
 800986a:	d801      	bhi.n	8009870 <_strtol_l.isra.0+0xb8>
 800986c:	3c37      	subs	r4, #55	; 0x37
 800986e:	e7e1      	b.n	8009834 <_strtol_l.isra.0+0x7c>
 8009870:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009874:	2f19      	cmp	r7, #25
 8009876:	d804      	bhi.n	8009882 <_strtol_l.isra.0+0xca>
 8009878:	3c57      	subs	r4, #87	; 0x57
 800987a:	e7db      	b.n	8009834 <_strtol_l.isra.0+0x7c>
 800987c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009880:	e7e4      	b.n	800984c <_strtol_l.isra.0+0x94>
 8009882:	2e00      	cmp	r6, #0
 8009884:	da05      	bge.n	8009892 <_strtol_l.isra.0+0xda>
 8009886:	2322      	movs	r3, #34	; 0x22
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	4665      	mov	r5, ip
 800988c:	b942      	cbnz	r2, 80098a0 <_strtol_l.isra.0+0xe8>
 800988e:	4628      	mov	r0, r5
 8009890:	e79d      	b.n	80097ce <_strtol_l.isra.0+0x16>
 8009892:	f1b8 0f00 	cmp.w	r8, #0
 8009896:	d000      	beq.n	800989a <_strtol_l.isra.0+0xe2>
 8009898:	426d      	negs	r5, r5
 800989a:	2a00      	cmp	r2, #0
 800989c:	d0f7      	beq.n	800988e <_strtol_l.isra.0+0xd6>
 800989e:	b10e      	cbz	r6, 80098a4 <_strtol_l.isra.0+0xec>
 80098a0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80098a4:	6011      	str	r1, [r2, #0]
 80098a6:	e7f2      	b.n	800988e <_strtol_l.isra.0+0xd6>
 80098a8:	2430      	movs	r4, #48	; 0x30
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1b3      	bne.n	8009816 <_strtol_l.isra.0+0x5e>
 80098ae:	2308      	movs	r3, #8
 80098b0:	e7b1      	b.n	8009816 <_strtol_l.isra.0+0x5e>
 80098b2:	2c30      	cmp	r4, #48	; 0x30
 80098b4:	d0a4      	beq.n	8009800 <_strtol_l.isra.0+0x48>
 80098b6:	230a      	movs	r3, #10
 80098b8:	e7ad      	b.n	8009816 <_strtol_l.isra.0+0x5e>
 80098ba:	bf00      	nop
 80098bc:	0800f431 	.word	0x0800f431

080098c0 <_strtol_r>:
 80098c0:	f7ff bf7a 	b.w	80097b8 <_strtol_l.isra.0>

080098c4 <quorem>:
 80098c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	6903      	ldr	r3, [r0, #16]
 80098ca:	690c      	ldr	r4, [r1, #16]
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	4607      	mov	r7, r0
 80098d0:	f2c0 8081 	blt.w	80099d6 <quorem+0x112>
 80098d4:	3c01      	subs	r4, #1
 80098d6:	f101 0814 	add.w	r8, r1, #20
 80098da:	f100 0514 	add.w	r5, r0, #20
 80098de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098ec:	3301      	adds	r3, #1
 80098ee:	429a      	cmp	r2, r3
 80098f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80098fc:	d331      	bcc.n	8009962 <quorem+0x9e>
 80098fe:	f04f 0e00 	mov.w	lr, #0
 8009902:	4640      	mov	r0, r8
 8009904:	46ac      	mov	ip, r5
 8009906:	46f2      	mov	sl, lr
 8009908:	f850 2b04 	ldr.w	r2, [r0], #4
 800990c:	b293      	uxth	r3, r2
 800990e:	fb06 e303 	mla	r3, r6, r3, lr
 8009912:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009916:	b29b      	uxth	r3, r3
 8009918:	ebaa 0303 	sub.w	r3, sl, r3
 800991c:	0c12      	lsrs	r2, r2, #16
 800991e:	f8dc a000 	ldr.w	sl, [ip]
 8009922:	fb06 e202 	mla	r2, r6, r2, lr
 8009926:	fa13 f38a 	uxtah	r3, r3, sl
 800992a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800992e:	fa1f fa82 	uxth.w	sl, r2
 8009932:	f8dc 2000 	ldr.w	r2, [ip]
 8009936:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800993a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800993e:	b29b      	uxth	r3, r3
 8009940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009944:	4581      	cmp	r9, r0
 8009946:	f84c 3b04 	str.w	r3, [ip], #4
 800994a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800994e:	d2db      	bcs.n	8009908 <quorem+0x44>
 8009950:	f855 300b 	ldr.w	r3, [r5, fp]
 8009954:	b92b      	cbnz	r3, 8009962 <quorem+0x9e>
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	3b04      	subs	r3, #4
 800995a:	429d      	cmp	r5, r3
 800995c:	461a      	mov	r2, r3
 800995e:	d32e      	bcc.n	80099be <quorem+0xfa>
 8009960:	613c      	str	r4, [r7, #16]
 8009962:	4638      	mov	r0, r7
 8009964:	f001 fd7a 	bl	800b45c <__mcmp>
 8009968:	2800      	cmp	r0, #0
 800996a:	db24      	blt.n	80099b6 <quorem+0xf2>
 800996c:	3601      	adds	r6, #1
 800996e:	4628      	mov	r0, r5
 8009970:	f04f 0c00 	mov.w	ip, #0
 8009974:	f858 2b04 	ldr.w	r2, [r8], #4
 8009978:	f8d0 e000 	ldr.w	lr, [r0]
 800997c:	b293      	uxth	r3, r2
 800997e:	ebac 0303 	sub.w	r3, ip, r3
 8009982:	0c12      	lsrs	r2, r2, #16
 8009984:	fa13 f38e 	uxtah	r3, r3, lr
 8009988:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800998c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009990:	b29b      	uxth	r3, r3
 8009992:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009996:	45c1      	cmp	r9, r8
 8009998:	f840 3b04 	str.w	r3, [r0], #4
 800999c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099a0:	d2e8      	bcs.n	8009974 <quorem+0xb0>
 80099a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099aa:	b922      	cbnz	r2, 80099b6 <quorem+0xf2>
 80099ac:	3b04      	subs	r3, #4
 80099ae:	429d      	cmp	r5, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	d30a      	bcc.n	80099ca <quorem+0x106>
 80099b4:	613c      	str	r4, [r7, #16]
 80099b6:	4630      	mov	r0, r6
 80099b8:	b003      	add	sp, #12
 80099ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	3b04      	subs	r3, #4
 80099c2:	2a00      	cmp	r2, #0
 80099c4:	d1cc      	bne.n	8009960 <quorem+0x9c>
 80099c6:	3c01      	subs	r4, #1
 80099c8:	e7c7      	b.n	800995a <quorem+0x96>
 80099ca:	6812      	ldr	r2, [r2, #0]
 80099cc:	3b04      	subs	r3, #4
 80099ce:	2a00      	cmp	r2, #0
 80099d0:	d1f0      	bne.n	80099b4 <quorem+0xf0>
 80099d2:	3c01      	subs	r4, #1
 80099d4:	e7eb      	b.n	80099ae <quorem+0xea>
 80099d6:	2000      	movs	r0, #0
 80099d8:	e7ee      	b.n	80099b8 <quorem+0xf4>
 80099da:	0000      	movs	r0, r0
 80099dc:	0000      	movs	r0, r0
	...

080099e0 <_dtoa_r>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	ed2d 8b02 	vpush	{d8}
 80099e8:	ec57 6b10 	vmov	r6, r7, d0
 80099ec:	b095      	sub	sp, #84	; 0x54
 80099ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099f4:	9105      	str	r1, [sp, #20]
 80099f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80099fa:	4604      	mov	r4, r0
 80099fc:	9209      	str	r2, [sp, #36]	; 0x24
 80099fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a00:	b975      	cbnz	r5, 8009a20 <_dtoa_r+0x40>
 8009a02:	2010      	movs	r0, #16
 8009a04:	f7fe f904 	bl	8007c10 <malloc>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	6260      	str	r0, [r4, #36]	; 0x24
 8009a0c:	b920      	cbnz	r0, 8009a18 <_dtoa_r+0x38>
 8009a0e:	4bb2      	ldr	r3, [pc, #712]	; (8009cd8 <_dtoa_r+0x2f8>)
 8009a10:	21ea      	movs	r1, #234	; 0xea
 8009a12:	48b2      	ldr	r0, [pc, #712]	; (8009cdc <_dtoa_r+0x2fc>)
 8009a14:	f002 fb62 	bl	800c0dc <__assert_func>
 8009a18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a1c:	6005      	str	r5, [r0, #0]
 8009a1e:	60c5      	str	r5, [r0, #12]
 8009a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	b151      	cbz	r1, 8009a3c <_dtoa_r+0x5c>
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	604a      	str	r2, [r1, #4]
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4093      	lsls	r3, r2
 8009a2e:	608b      	str	r3, [r1, #8]
 8009a30:	4620      	mov	r0, r4
 8009a32:	f001 fa8b 	bl	800af4c <_Bfree>
 8009a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	1e3b      	subs	r3, r7, #0
 8009a3e:	bfb9      	ittee	lt
 8009a40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a44:	9303      	strlt	r3, [sp, #12]
 8009a46:	2300      	movge	r3, #0
 8009a48:	f8c8 3000 	strge.w	r3, [r8]
 8009a4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009a50:	4ba3      	ldr	r3, [pc, #652]	; (8009ce0 <_dtoa_r+0x300>)
 8009a52:	bfbc      	itt	lt
 8009a54:	2201      	movlt	r2, #1
 8009a56:	f8c8 2000 	strlt.w	r2, [r8]
 8009a5a:	ea33 0309 	bics.w	r3, r3, r9
 8009a5e:	d11b      	bne.n	8009a98 <_dtoa_r+0xb8>
 8009a60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a62:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a6c:	4333      	orrs	r3, r6
 8009a6e:	f000 857a 	beq.w	800a566 <_dtoa_r+0xb86>
 8009a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a74:	b963      	cbnz	r3, 8009a90 <_dtoa_r+0xb0>
 8009a76:	4b9b      	ldr	r3, [pc, #620]	; (8009ce4 <_dtoa_r+0x304>)
 8009a78:	e024      	b.n	8009ac4 <_dtoa_r+0xe4>
 8009a7a:	4b9b      	ldr	r3, [pc, #620]	; (8009ce8 <_dtoa_r+0x308>)
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	9800      	ldr	r0, [sp, #0]
 8009a86:	b015      	add	sp, #84	; 0x54
 8009a88:	ecbd 8b02 	vpop	{d8}
 8009a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a90:	4b94      	ldr	r3, [pc, #592]	; (8009ce4 <_dtoa_r+0x304>)
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	3303      	adds	r3, #3
 8009a96:	e7f3      	b.n	8009a80 <_dtoa_r+0xa0>
 8009a98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	ec51 0b17 	vmov	r0, r1, d7
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009aa8:	f7f7 f816 	bl	8000ad8 <__aeabi_dcmpeq>
 8009aac:	4680      	mov	r8, r0
 8009aae:	b158      	cbz	r0, 8009ac8 <_dtoa_r+0xe8>
 8009ab0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8551 	beq.w	800a560 <_dtoa_r+0xb80>
 8009abe:	488b      	ldr	r0, [pc, #556]	; (8009cec <_dtoa_r+0x30c>)
 8009ac0:	6018      	str	r0, [r3, #0]
 8009ac2:	1e43      	subs	r3, r0, #1
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	e7dd      	b.n	8009a84 <_dtoa_r+0xa4>
 8009ac8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009acc:	aa12      	add	r2, sp, #72	; 0x48
 8009ace:	a913      	add	r1, sp, #76	; 0x4c
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f001 fde3 	bl	800b69c <__d2b>
 8009ad6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ada:	4683      	mov	fp, r0
 8009adc:	2d00      	cmp	r5, #0
 8009ade:	d07c      	beq.n	8009bda <_dtoa_r+0x1fa>
 8009ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009ae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009aee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009af2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009af6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009afa:	4b7d      	ldr	r3, [pc, #500]	; (8009cf0 <_dtoa_r+0x310>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f6 fbc9 	bl	8000298 <__aeabi_dsub>
 8009b06:	a36e      	add	r3, pc, #440	; (adr r3, 8009cc0 <_dtoa_r+0x2e0>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fd7c 	bl	8000608 <__aeabi_dmul>
 8009b10:	a36d      	add	r3, pc, #436	; (adr r3, 8009cc8 <_dtoa_r+0x2e8>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 fbc1 	bl	800029c <__adddf3>
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	460f      	mov	r7, r1
 8009b20:	f7f6 fd08 	bl	8000534 <__aeabi_i2d>
 8009b24:	a36a      	add	r3, pc, #424	; (adr r3, 8009cd0 <_dtoa_r+0x2f0>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	f7f6 fd6d 	bl	8000608 <__aeabi_dmul>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4630      	mov	r0, r6
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 fbb1 	bl	800029c <__adddf3>
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	460f      	mov	r7, r1
 8009b3e:	f7f7 f813 	bl	8000b68 <__aeabi_d2iz>
 8009b42:	2200      	movs	r2, #0
 8009b44:	4682      	mov	sl, r0
 8009b46:	2300      	movs	r3, #0
 8009b48:	4630      	mov	r0, r6
 8009b4a:	4639      	mov	r1, r7
 8009b4c:	f7f6 ffce 	bl	8000aec <__aeabi_dcmplt>
 8009b50:	b148      	cbz	r0, 8009b66 <_dtoa_r+0x186>
 8009b52:	4650      	mov	r0, sl
 8009b54:	f7f6 fcee 	bl	8000534 <__aeabi_i2d>
 8009b58:	4632      	mov	r2, r6
 8009b5a:	463b      	mov	r3, r7
 8009b5c:	f7f6 ffbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b60:	b908      	cbnz	r0, 8009b66 <_dtoa_r+0x186>
 8009b62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009b66:	f1ba 0f16 	cmp.w	sl, #22
 8009b6a:	d854      	bhi.n	8009c16 <_dtoa_r+0x236>
 8009b6c:	4b61      	ldr	r3, [pc, #388]	; (8009cf4 <_dtoa_r+0x314>)
 8009b6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b7a:	f7f6 ffb7 	bl	8000aec <__aeabi_dcmplt>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d04b      	beq.n	8009c1a <_dtoa_r+0x23a>
 8009b82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009b86:	2300      	movs	r3, #0
 8009b88:	930e      	str	r3, [sp, #56]	; 0x38
 8009b8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b8c:	1b5d      	subs	r5, r3, r5
 8009b8e:	1e6b      	subs	r3, r5, #1
 8009b90:	9304      	str	r3, [sp, #16]
 8009b92:	bf43      	ittte	mi
 8009b94:	2300      	movmi	r3, #0
 8009b96:	f1c5 0801 	rsbmi	r8, r5, #1
 8009b9a:	9304      	strmi	r3, [sp, #16]
 8009b9c:	f04f 0800 	movpl.w	r8, #0
 8009ba0:	f1ba 0f00 	cmp.w	sl, #0
 8009ba4:	db3b      	blt.n	8009c1e <_dtoa_r+0x23e>
 8009ba6:	9b04      	ldr	r3, [sp, #16]
 8009ba8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009bac:	4453      	add	r3, sl
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	9306      	str	r3, [sp, #24]
 8009bb4:	9b05      	ldr	r3, [sp, #20]
 8009bb6:	2b09      	cmp	r3, #9
 8009bb8:	d869      	bhi.n	8009c8e <_dtoa_r+0x2ae>
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	bfc4      	itt	gt
 8009bbe:	3b04      	subgt	r3, #4
 8009bc0:	9305      	strgt	r3, [sp, #20]
 8009bc2:	9b05      	ldr	r3, [sp, #20]
 8009bc4:	f1a3 0302 	sub.w	r3, r3, #2
 8009bc8:	bfcc      	ite	gt
 8009bca:	2500      	movgt	r5, #0
 8009bcc:	2501      	movle	r5, #1
 8009bce:	2b03      	cmp	r3, #3
 8009bd0:	d869      	bhi.n	8009ca6 <_dtoa_r+0x2c6>
 8009bd2:	e8df f003 	tbb	[pc, r3]
 8009bd6:	4e2c      	.short	0x4e2c
 8009bd8:	5a4c      	.short	0x5a4c
 8009bda:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009bde:	441d      	add	r5, r3
 8009be0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	bfc1      	itttt	gt
 8009be8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009bf0:	fa09 f303 	lslgt.w	r3, r9, r3
 8009bf4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009bf8:	bfda      	itte	le
 8009bfa:	f1c3 0320 	rsble	r3, r3, #32
 8009bfe:	fa06 f003 	lslle.w	r0, r6, r3
 8009c02:	4318      	orrgt	r0, r3
 8009c04:	f7f6 fc86 	bl	8000514 <__aeabi_ui2d>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c10:	3d01      	subs	r5, #1
 8009c12:	9310      	str	r3, [sp, #64]	; 0x40
 8009c14:	e771      	b.n	8009afa <_dtoa_r+0x11a>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e7b6      	b.n	8009b88 <_dtoa_r+0x1a8>
 8009c1a:	900e      	str	r0, [sp, #56]	; 0x38
 8009c1c:	e7b5      	b.n	8009b8a <_dtoa_r+0x1aa>
 8009c1e:	f1ca 0300 	rsb	r3, sl, #0
 8009c22:	9306      	str	r3, [sp, #24]
 8009c24:	2300      	movs	r3, #0
 8009c26:	eba8 080a 	sub.w	r8, r8, sl
 8009c2a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c2c:	e7c2      	b.n	8009bb4 <_dtoa_r+0x1d4>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9308      	str	r3, [sp, #32]
 8009c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	dc39      	bgt.n	8009cac <_dtoa_r+0x2cc>
 8009c38:	f04f 0901 	mov.w	r9, #1
 8009c3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c40:	464b      	mov	r3, r9
 8009c42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009c46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c48:	2200      	movs	r2, #0
 8009c4a:	6042      	str	r2, [r0, #4]
 8009c4c:	2204      	movs	r2, #4
 8009c4e:	f102 0614 	add.w	r6, r2, #20
 8009c52:	429e      	cmp	r6, r3
 8009c54:	6841      	ldr	r1, [r0, #4]
 8009c56:	d92f      	bls.n	8009cb8 <_dtoa_r+0x2d8>
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f001 f937 	bl	800aecc <_Balloc>
 8009c5e:	9000      	str	r0, [sp, #0]
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d14b      	bne.n	8009cfc <_dtoa_r+0x31c>
 8009c64:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <_dtoa_r+0x318>)
 8009c66:	4602      	mov	r2, r0
 8009c68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c6c:	e6d1      	b.n	8009a12 <_dtoa_r+0x32>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e7de      	b.n	8009c30 <_dtoa_r+0x250>
 8009c72:	2300      	movs	r3, #0
 8009c74:	9308      	str	r3, [sp, #32]
 8009c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c78:	eb0a 0903 	add.w	r9, sl, r3
 8009c7c:	f109 0301 	add.w	r3, r9, #1
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	bfb8      	it	lt
 8009c86:	2301      	movlt	r3, #1
 8009c88:	e7dd      	b.n	8009c46 <_dtoa_r+0x266>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e7f2      	b.n	8009c74 <_dtoa_r+0x294>
 8009c8e:	2501      	movs	r5, #1
 8009c90:	2300      	movs	r3, #0
 8009c92:	9305      	str	r3, [sp, #20]
 8009c94:	9508      	str	r5, [sp, #32]
 8009c96:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ca0:	2312      	movs	r3, #18
 8009ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ca4:	e7cf      	b.n	8009c46 <_dtoa_r+0x266>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	9308      	str	r3, [sp, #32]
 8009caa:	e7f4      	b.n	8009c96 <_dtoa_r+0x2b6>
 8009cac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009cb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009cb4:	464b      	mov	r3, r9
 8009cb6:	e7c6      	b.n	8009c46 <_dtoa_r+0x266>
 8009cb8:	3101      	adds	r1, #1
 8009cba:	6041      	str	r1, [r0, #4]
 8009cbc:	0052      	lsls	r2, r2, #1
 8009cbe:	e7c6      	b.n	8009c4e <_dtoa_r+0x26e>
 8009cc0:	636f4361 	.word	0x636f4361
 8009cc4:	3fd287a7 	.word	0x3fd287a7
 8009cc8:	8b60c8b3 	.word	0x8b60c8b3
 8009ccc:	3fc68a28 	.word	0x3fc68a28
 8009cd0:	509f79fb 	.word	0x509f79fb
 8009cd4:	3fd34413 	.word	0x3fd34413
 8009cd8:	0800f53e 	.word	0x0800f53e
 8009cdc:	0800f555 	.word	0x0800f555
 8009ce0:	7ff00000 	.word	0x7ff00000
 8009ce4:	0800f53a 	.word	0x0800f53a
 8009ce8:	0800f531 	.word	0x0800f531
 8009cec:	0800f3b1 	.word	0x0800f3b1
 8009cf0:	3ff80000 	.word	0x3ff80000
 8009cf4:	0800f730 	.word	0x0800f730
 8009cf8:	0800f5b4 	.word	0x0800f5b4
 8009cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cfe:	9a00      	ldr	r2, [sp, #0]
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	9b01      	ldr	r3, [sp, #4]
 8009d04:	2b0e      	cmp	r3, #14
 8009d06:	f200 80ad 	bhi.w	8009e64 <_dtoa_r+0x484>
 8009d0a:	2d00      	cmp	r5, #0
 8009d0c:	f000 80aa 	beq.w	8009e64 <_dtoa_r+0x484>
 8009d10:	f1ba 0f00 	cmp.w	sl, #0
 8009d14:	dd36      	ble.n	8009d84 <_dtoa_r+0x3a4>
 8009d16:	4ac3      	ldr	r2, [pc, #780]	; (800a024 <_dtoa_r+0x644>)
 8009d18:	f00a 030f 	and.w	r3, sl, #15
 8009d1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d20:	ed93 7b00 	vldr	d7, [r3]
 8009d24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009d28:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009d2c:	eeb0 8a47 	vmov.f32	s16, s14
 8009d30:	eef0 8a67 	vmov.f32	s17, s15
 8009d34:	d016      	beq.n	8009d64 <_dtoa_r+0x384>
 8009d36:	4bbc      	ldr	r3, [pc, #752]	; (800a028 <_dtoa_r+0x648>)
 8009d38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d40:	f7f6 fd8c 	bl	800085c <__aeabi_ddiv>
 8009d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d48:	f007 070f 	and.w	r7, r7, #15
 8009d4c:	2503      	movs	r5, #3
 8009d4e:	4eb6      	ldr	r6, [pc, #728]	; (800a028 <_dtoa_r+0x648>)
 8009d50:	b957      	cbnz	r7, 8009d68 <_dtoa_r+0x388>
 8009d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d56:	ec53 2b18 	vmov	r2, r3, d8
 8009d5a:	f7f6 fd7f 	bl	800085c <__aeabi_ddiv>
 8009d5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d62:	e029      	b.n	8009db8 <_dtoa_r+0x3d8>
 8009d64:	2502      	movs	r5, #2
 8009d66:	e7f2      	b.n	8009d4e <_dtoa_r+0x36e>
 8009d68:	07f9      	lsls	r1, r7, #31
 8009d6a:	d508      	bpl.n	8009d7e <_dtoa_r+0x39e>
 8009d6c:	ec51 0b18 	vmov	r0, r1, d8
 8009d70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d74:	f7f6 fc48 	bl	8000608 <__aeabi_dmul>
 8009d78:	ec41 0b18 	vmov	d8, r0, r1
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	107f      	asrs	r7, r7, #1
 8009d80:	3608      	adds	r6, #8
 8009d82:	e7e5      	b.n	8009d50 <_dtoa_r+0x370>
 8009d84:	f000 80a6 	beq.w	8009ed4 <_dtoa_r+0x4f4>
 8009d88:	f1ca 0600 	rsb	r6, sl, #0
 8009d8c:	4ba5      	ldr	r3, [pc, #660]	; (800a024 <_dtoa_r+0x644>)
 8009d8e:	4fa6      	ldr	r7, [pc, #664]	; (800a028 <_dtoa_r+0x648>)
 8009d90:	f006 020f 	and.w	r2, r6, #15
 8009d94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009da0:	f7f6 fc32 	bl	8000608 <__aeabi_dmul>
 8009da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009da8:	1136      	asrs	r6, r6, #4
 8009daa:	2300      	movs	r3, #0
 8009dac:	2502      	movs	r5, #2
 8009dae:	2e00      	cmp	r6, #0
 8009db0:	f040 8085 	bne.w	8009ebe <_dtoa_r+0x4de>
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1d2      	bne.n	8009d5e <_dtoa_r+0x37e>
 8009db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 808c 	beq.w	8009ed8 <_dtoa_r+0x4f8>
 8009dc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009dc4:	4b99      	ldr	r3, [pc, #612]	; (800a02c <_dtoa_r+0x64c>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fe8e 	bl	8000aec <__aeabi_dcmplt>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f000 8081 	beq.w	8009ed8 <_dtoa_r+0x4f8>
 8009dd6:	9b01      	ldr	r3, [sp, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d07d      	beq.n	8009ed8 <_dtoa_r+0x4f8>
 8009ddc:	f1b9 0f00 	cmp.w	r9, #0
 8009de0:	dd3c      	ble.n	8009e5c <_dtoa_r+0x47c>
 8009de2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009de6:	9307      	str	r3, [sp, #28]
 8009de8:	2200      	movs	r2, #0
 8009dea:	4b91      	ldr	r3, [pc, #580]	; (800a030 <_dtoa_r+0x650>)
 8009dec:	4630      	mov	r0, r6
 8009dee:	4639      	mov	r1, r7
 8009df0:	f7f6 fc0a 	bl	8000608 <__aeabi_dmul>
 8009df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009df8:	3501      	adds	r5, #1
 8009dfa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009dfe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e02:	4628      	mov	r0, r5
 8009e04:	f7f6 fb96 	bl	8000534 <__aeabi_i2d>
 8009e08:	4632      	mov	r2, r6
 8009e0a:	463b      	mov	r3, r7
 8009e0c:	f7f6 fbfc 	bl	8000608 <__aeabi_dmul>
 8009e10:	4b88      	ldr	r3, [pc, #544]	; (800a034 <_dtoa_r+0x654>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	f7f6 fa42 	bl	800029c <__adddf3>
 8009e18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e20:	9303      	str	r3, [sp, #12]
 8009e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d15c      	bne.n	8009ee2 <_dtoa_r+0x502>
 8009e28:	4b83      	ldr	r3, [pc, #524]	; (800a038 <_dtoa_r+0x658>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	4639      	mov	r1, r7
 8009e30:	f7f6 fa32 	bl	8000298 <__aeabi_dsub>
 8009e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e38:	4606      	mov	r6, r0
 8009e3a:	460f      	mov	r7, r1
 8009e3c:	f7f6 fe74 	bl	8000b28 <__aeabi_dcmpgt>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	f040 8296 	bne.w	800a372 <_dtoa_r+0x992>
 8009e46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7f6 fe4b 	bl	8000aec <__aeabi_dcmplt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f040 8288 	bne.w	800a36c <_dtoa_r+0x98c>
 8009e5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f2c0 8158 	blt.w	800a11c <_dtoa_r+0x73c>
 8009e6c:	f1ba 0f0e 	cmp.w	sl, #14
 8009e70:	f300 8154 	bgt.w	800a11c <_dtoa_r+0x73c>
 8009e74:	4b6b      	ldr	r3, [pc, #428]	; (800a024 <_dtoa_r+0x644>)
 8009e76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f280 80e3 	bge.w	800a04c <_dtoa_r+0x66c>
 8009e86:	9b01      	ldr	r3, [sp, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f300 80df 	bgt.w	800a04c <_dtoa_r+0x66c>
 8009e8e:	f040 826d 	bne.w	800a36c <_dtoa_r+0x98c>
 8009e92:	4b69      	ldr	r3, [pc, #420]	; (800a038 <_dtoa_r+0x658>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	4640      	mov	r0, r8
 8009e98:	4649      	mov	r1, r9
 8009e9a:	f7f6 fbb5 	bl	8000608 <__aeabi_dmul>
 8009e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ea2:	f7f6 fe37 	bl	8000b14 <__aeabi_dcmpge>
 8009ea6:	9e01      	ldr	r6, [sp, #4]
 8009ea8:	4637      	mov	r7, r6
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	f040 8243 	bne.w	800a336 <_dtoa_r+0x956>
 8009eb0:	9d00      	ldr	r5, [sp, #0]
 8009eb2:	2331      	movs	r3, #49	; 0x31
 8009eb4:	f805 3b01 	strb.w	r3, [r5], #1
 8009eb8:	f10a 0a01 	add.w	sl, sl, #1
 8009ebc:	e23f      	b.n	800a33e <_dtoa_r+0x95e>
 8009ebe:	07f2      	lsls	r2, r6, #31
 8009ec0:	d505      	bpl.n	8009ece <_dtoa_r+0x4ee>
 8009ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec6:	f7f6 fb9f 	bl	8000608 <__aeabi_dmul>
 8009eca:	3501      	adds	r5, #1
 8009ecc:	2301      	movs	r3, #1
 8009ece:	1076      	asrs	r6, r6, #1
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	e76c      	b.n	8009dae <_dtoa_r+0x3ce>
 8009ed4:	2502      	movs	r5, #2
 8009ed6:	e76f      	b.n	8009db8 <_dtoa_r+0x3d8>
 8009ed8:	9b01      	ldr	r3, [sp, #4]
 8009eda:	f8cd a01c 	str.w	sl, [sp, #28]
 8009ede:	930c      	str	r3, [sp, #48]	; 0x30
 8009ee0:	e78d      	b.n	8009dfe <_dtoa_r+0x41e>
 8009ee2:	9900      	ldr	r1, [sp, #0]
 8009ee4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ee8:	4b4e      	ldr	r3, [pc, #312]	; (800a024 <_dtoa_r+0x644>)
 8009eea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009eee:	4401      	add	r1, r0
 8009ef0:	9102      	str	r1, [sp, #8]
 8009ef2:	9908      	ldr	r1, [sp, #32]
 8009ef4:	eeb0 8a47 	vmov.f32	s16, s14
 8009ef8:	eef0 8a67 	vmov.f32	s17, s15
 8009efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f04:	2900      	cmp	r1, #0
 8009f06:	d045      	beq.n	8009f94 <_dtoa_r+0x5b4>
 8009f08:	494c      	ldr	r1, [pc, #304]	; (800a03c <_dtoa_r+0x65c>)
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	f7f6 fca6 	bl	800085c <__aeabi_ddiv>
 8009f10:	ec53 2b18 	vmov	r2, r3, d8
 8009f14:	f7f6 f9c0 	bl	8000298 <__aeabi_dsub>
 8009f18:	9d00      	ldr	r5, [sp, #0]
 8009f1a:	ec41 0b18 	vmov	d8, r0, r1
 8009f1e:	4639      	mov	r1, r7
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7f6 fe21 	bl	8000b68 <__aeabi_d2iz>
 8009f26:	900c      	str	r0, [sp, #48]	; 0x30
 8009f28:	f7f6 fb04 	bl	8000534 <__aeabi_i2d>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4630      	mov	r0, r6
 8009f32:	4639      	mov	r1, r7
 8009f34:	f7f6 f9b0 	bl	8000298 <__aeabi_dsub>
 8009f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f3a:	3330      	adds	r3, #48	; 0x30
 8009f3c:	f805 3b01 	strb.w	r3, [r5], #1
 8009f40:	ec53 2b18 	vmov	r2, r3, d8
 8009f44:	4606      	mov	r6, r0
 8009f46:	460f      	mov	r7, r1
 8009f48:	f7f6 fdd0 	bl	8000aec <__aeabi_dcmplt>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d165      	bne.n	800a01c <_dtoa_r+0x63c>
 8009f50:	4632      	mov	r2, r6
 8009f52:	463b      	mov	r3, r7
 8009f54:	4935      	ldr	r1, [pc, #212]	; (800a02c <_dtoa_r+0x64c>)
 8009f56:	2000      	movs	r0, #0
 8009f58:	f7f6 f99e 	bl	8000298 <__aeabi_dsub>
 8009f5c:	ec53 2b18 	vmov	r2, r3, d8
 8009f60:	f7f6 fdc4 	bl	8000aec <__aeabi_dcmplt>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	f040 80b9 	bne.w	800a0dc <_dtoa_r+0x6fc>
 8009f6a:	9b02      	ldr	r3, [sp, #8]
 8009f6c:	429d      	cmp	r5, r3
 8009f6e:	f43f af75 	beq.w	8009e5c <_dtoa_r+0x47c>
 8009f72:	4b2f      	ldr	r3, [pc, #188]	; (800a030 <_dtoa_r+0x650>)
 8009f74:	ec51 0b18 	vmov	r0, r1, d8
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f7f6 fb45 	bl	8000608 <__aeabi_dmul>
 8009f7e:	4b2c      	ldr	r3, [pc, #176]	; (800a030 <_dtoa_r+0x650>)
 8009f80:	ec41 0b18 	vmov	d8, r0, r1
 8009f84:	2200      	movs	r2, #0
 8009f86:	4630      	mov	r0, r6
 8009f88:	4639      	mov	r1, r7
 8009f8a:	f7f6 fb3d 	bl	8000608 <__aeabi_dmul>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	460f      	mov	r7, r1
 8009f92:	e7c4      	b.n	8009f1e <_dtoa_r+0x53e>
 8009f94:	ec51 0b17 	vmov	r0, r1, d7
 8009f98:	f7f6 fb36 	bl	8000608 <__aeabi_dmul>
 8009f9c:	9b02      	ldr	r3, [sp, #8]
 8009f9e:	9d00      	ldr	r5, [sp, #0]
 8009fa0:	930c      	str	r3, [sp, #48]	; 0x30
 8009fa2:	ec41 0b18 	vmov	d8, r0, r1
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7f6 fddd 	bl	8000b68 <__aeabi_d2iz>
 8009fae:	9011      	str	r0, [sp, #68]	; 0x44
 8009fb0:	f7f6 fac0 	bl	8000534 <__aeabi_i2d>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	f7f6 f96c 	bl	8000298 <__aeabi_dsub>
 8009fc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fc2:	3330      	adds	r3, #48	; 0x30
 8009fc4:	f805 3b01 	strb.w	r3, [r5], #1
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	429d      	cmp	r5, r3
 8009fcc:	4606      	mov	r6, r0
 8009fce:	460f      	mov	r7, r1
 8009fd0:	f04f 0200 	mov.w	r2, #0
 8009fd4:	d134      	bne.n	800a040 <_dtoa_r+0x660>
 8009fd6:	4b19      	ldr	r3, [pc, #100]	; (800a03c <_dtoa_r+0x65c>)
 8009fd8:	ec51 0b18 	vmov	r0, r1, d8
 8009fdc:	f7f6 f95e 	bl	800029c <__adddf3>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	f7f6 fd9e 	bl	8000b28 <__aeabi_dcmpgt>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d175      	bne.n	800a0dc <_dtoa_r+0x6fc>
 8009ff0:	ec53 2b18 	vmov	r2, r3, d8
 8009ff4:	4911      	ldr	r1, [pc, #68]	; (800a03c <_dtoa_r+0x65c>)
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	f7f6 f94e 	bl	8000298 <__aeabi_dsub>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4630      	mov	r0, r6
 800a002:	4639      	mov	r1, r7
 800a004:	f7f6 fd72 	bl	8000aec <__aeabi_dcmplt>
 800a008:	2800      	cmp	r0, #0
 800a00a:	f43f af27 	beq.w	8009e5c <_dtoa_r+0x47c>
 800a00e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a010:	1e6b      	subs	r3, r5, #1
 800a012:	930c      	str	r3, [sp, #48]	; 0x30
 800a014:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a018:	2b30      	cmp	r3, #48	; 0x30
 800a01a:	d0f8      	beq.n	800a00e <_dtoa_r+0x62e>
 800a01c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a020:	e04a      	b.n	800a0b8 <_dtoa_r+0x6d8>
 800a022:	bf00      	nop
 800a024:	0800f730 	.word	0x0800f730
 800a028:	0800f708 	.word	0x0800f708
 800a02c:	3ff00000 	.word	0x3ff00000
 800a030:	40240000 	.word	0x40240000
 800a034:	401c0000 	.word	0x401c0000
 800a038:	40140000 	.word	0x40140000
 800a03c:	3fe00000 	.word	0x3fe00000
 800a040:	4baf      	ldr	r3, [pc, #700]	; (800a300 <_dtoa_r+0x920>)
 800a042:	f7f6 fae1 	bl	8000608 <__aeabi_dmul>
 800a046:	4606      	mov	r6, r0
 800a048:	460f      	mov	r7, r1
 800a04a:	e7ac      	b.n	8009fa6 <_dtoa_r+0x5c6>
 800a04c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a050:	9d00      	ldr	r5, [sp, #0]
 800a052:	4642      	mov	r2, r8
 800a054:	464b      	mov	r3, r9
 800a056:	4630      	mov	r0, r6
 800a058:	4639      	mov	r1, r7
 800a05a:	f7f6 fbff 	bl	800085c <__aeabi_ddiv>
 800a05e:	f7f6 fd83 	bl	8000b68 <__aeabi_d2iz>
 800a062:	9002      	str	r0, [sp, #8]
 800a064:	f7f6 fa66 	bl	8000534 <__aeabi_i2d>
 800a068:	4642      	mov	r2, r8
 800a06a:	464b      	mov	r3, r9
 800a06c:	f7f6 facc 	bl	8000608 <__aeabi_dmul>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f7f6 f90e 	bl	8000298 <__aeabi_dsub>
 800a07c:	9e02      	ldr	r6, [sp, #8]
 800a07e:	9f01      	ldr	r7, [sp, #4]
 800a080:	3630      	adds	r6, #48	; 0x30
 800a082:	f805 6b01 	strb.w	r6, [r5], #1
 800a086:	9e00      	ldr	r6, [sp, #0]
 800a088:	1bae      	subs	r6, r5, r6
 800a08a:	42b7      	cmp	r7, r6
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	d137      	bne.n	800a102 <_dtoa_r+0x722>
 800a092:	f7f6 f903 	bl	800029c <__adddf3>
 800a096:	4642      	mov	r2, r8
 800a098:	464b      	mov	r3, r9
 800a09a:	4606      	mov	r6, r0
 800a09c:	460f      	mov	r7, r1
 800a09e:	f7f6 fd43 	bl	8000b28 <__aeabi_dcmpgt>
 800a0a2:	b9c8      	cbnz	r0, 800a0d8 <_dtoa_r+0x6f8>
 800a0a4:	4642      	mov	r2, r8
 800a0a6:	464b      	mov	r3, r9
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	f7f6 fd14 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0b0:	b110      	cbz	r0, 800a0b8 <_dtoa_r+0x6d8>
 800a0b2:	9b02      	ldr	r3, [sp, #8]
 800a0b4:	07d9      	lsls	r1, r3, #31
 800a0b6:	d40f      	bmi.n	800a0d8 <_dtoa_r+0x6f8>
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	4659      	mov	r1, fp
 800a0bc:	f000 ff46 	bl	800af4c <_Bfree>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	702b      	strb	r3, [r5, #0]
 800a0c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0c6:	f10a 0001 	add.w	r0, sl, #1
 800a0ca:	6018      	str	r0, [r3, #0]
 800a0cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f43f acd8 	beq.w	8009a84 <_dtoa_r+0xa4>
 800a0d4:	601d      	str	r5, [r3, #0]
 800a0d6:	e4d5      	b.n	8009a84 <_dtoa_r+0xa4>
 800a0d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a0dc:	462b      	mov	r3, r5
 800a0de:	461d      	mov	r5, r3
 800a0e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0e4:	2a39      	cmp	r2, #57	; 0x39
 800a0e6:	d108      	bne.n	800a0fa <_dtoa_r+0x71a>
 800a0e8:	9a00      	ldr	r2, [sp, #0]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d1f7      	bne.n	800a0de <_dtoa_r+0x6fe>
 800a0ee:	9a07      	ldr	r2, [sp, #28]
 800a0f0:	9900      	ldr	r1, [sp, #0]
 800a0f2:	3201      	adds	r2, #1
 800a0f4:	9207      	str	r2, [sp, #28]
 800a0f6:	2230      	movs	r2, #48	; 0x30
 800a0f8:	700a      	strb	r2, [r1, #0]
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	3201      	adds	r2, #1
 800a0fe:	701a      	strb	r2, [r3, #0]
 800a100:	e78c      	b.n	800a01c <_dtoa_r+0x63c>
 800a102:	4b7f      	ldr	r3, [pc, #508]	; (800a300 <_dtoa_r+0x920>)
 800a104:	2200      	movs	r2, #0
 800a106:	f7f6 fa7f 	bl	8000608 <__aeabi_dmul>
 800a10a:	2200      	movs	r2, #0
 800a10c:	2300      	movs	r3, #0
 800a10e:	4606      	mov	r6, r0
 800a110:	460f      	mov	r7, r1
 800a112:	f7f6 fce1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a116:	2800      	cmp	r0, #0
 800a118:	d09b      	beq.n	800a052 <_dtoa_r+0x672>
 800a11a:	e7cd      	b.n	800a0b8 <_dtoa_r+0x6d8>
 800a11c:	9a08      	ldr	r2, [sp, #32]
 800a11e:	2a00      	cmp	r2, #0
 800a120:	f000 80c4 	beq.w	800a2ac <_dtoa_r+0x8cc>
 800a124:	9a05      	ldr	r2, [sp, #20]
 800a126:	2a01      	cmp	r2, #1
 800a128:	f300 80a8 	bgt.w	800a27c <_dtoa_r+0x89c>
 800a12c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a12e:	2a00      	cmp	r2, #0
 800a130:	f000 80a0 	beq.w	800a274 <_dtoa_r+0x894>
 800a134:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a138:	9e06      	ldr	r6, [sp, #24]
 800a13a:	4645      	mov	r5, r8
 800a13c:	9a04      	ldr	r2, [sp, #16]
 800a13e:	2101      	movs	r1, #1
 800a140:	441a      	add	r2, r3
 800a142:	4620      	mov	r0, r4
 800a144:	4498      	add	r8, r3
 800a146:	9204      	str	r2, [sp, #16]
 800a148:	f001 f806 	bl	800b158 <__i2b>
 800a14c:	4607      	mov	r7, r0
 800a14e:	2d00      	cmp	r5, #0
 800a150:	dd0b      	ble.n	800a16a <_dtoa_r+0x78a>
 800a152:	9b04      	ldr	r3, [sp, #16]
 800a154:	2b00      	cmp	r3, #0
 800a156:	dd08      	ble.n	800a16a <_dtoa_r+0x78a>
 800a158:	42ab      	cmp	r3, r5
 800a15a:	9a04      	ldr	r2, [sp, #16]
 800a15c:	bfa8      	it	ge
 800a15e:	462b      	movge	r3, r5
 800a160:	eba8 0803 	sub.w	r8, r8, r3
 800a164:	1aed      	subs	r5, r5, r3
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	9304      	str	r3, [sp, #16]
 800a16a:	9b06      	ldr	r3, [sp, #24]
 800a16c:	b1fb      	cbz	r3, 800a1ae <_dtoa_r+0x7ce>
 800a16e:	9b08      	ldr	r3, [sp, #32]
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 809f 	beq.w	800a2b4 <_dtoa_r+0x8d4>
 800a176:	2e00      	cmp	r6, #0
 800a178:	dd11      	ble.n	800a19e <_dtoa_r+0x7be>
 800a17a:	4639      	mov	r1, r7
 800a17c:	4632      	mov	r2, r6
 800a17e:	4620      	mov	r0, r4
 800a180:	f001 f8a6 	bl	800b2d0 <__pow5mult>
 800a184:	465a      	mov	r2, fp
 800a186:	4601      	mov	r1, r0
 800a188:	4607      	mov	r7, r0
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 fffa 	bl	800b184 <__multiply>
 800a190:	4659      	mov	r1, fp
 800a192:	9007      	str	r0, [sp, #28]
 800a194:	4620      	mov	r0, r4
 800a196:	f000 fed9 	bl	800af4c <_Bfree>
 800a19a:	9b07      	ldr	r3, [sp, #28]
 800a19c:	469b      	mov	fp, r3
 800a19e:	9b06      	ldr	r3, [sp, #24]
 800a1a0:	1b9a      	subs	r2, r3, r6
 800a1a2:	d004      	beq.n	800a1ae <_dtoa_r+0x7ce>
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f001 f892 	bl	800b2d0 <__pow5mult>
 800a1ac:	4683      	mov	fp, r0
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 ffd1 	bl	800b158 <__i2b>
 800a1b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	dd7c      	ble.n	800a2b8 <_dtoa_r+0x8d8>
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f001 f884 	bl	800b2d0 <__pow5mult>
 800a1c8:	9b05      	ldr	r3, [sp, #20]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	dd76      	ble.n	800a2be <_dtoa_r+0x8de>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	9306      	str	r3, [sp, #24]
 800a1d4:	6933      	ldr	r3, [r6, #16]
 800a1d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1da:	6918      	ldr	r0, [r3, #16]
 800a1dc:	f000 ff6c 	bl	800b0b8 <__hi0bits>
 800a1e0:	f1c0 0020 	rsb	r0, r0, #32
 800a1e4:	9b04      	ldr	r3, [sp, #16]
 800a1e6:	4418      	add	r0, r3
 800a1e8:	f010 001f 	ands.w	r0, r0, #31
 800a1ec:	f000 8086 	beq.w	800a2fc <_dtoa_r+0x91c>
 800a1f0:	f1c0 0320 	rsb	r3, r0, #32
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	dd7f      	ble.n	800a2f8 <_dtoa_r+0x918>
 800a1f8:	f1c0 001c 	rsb	r0, r0, #28
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	4403      	add	r3, r0
 800a200:	4480      	add	r8, r0
 800a202:	4405      	add	r5, r0
 800a204:	9304      	str	r3, [sp, #16]
 800a206:	f1b8 0f00 	cmp.w	r8, #0
 800a20a:	dd05      	ble.n	800a218 <_dtoa_r+0x838>
 800a20c:	4659      	mov	r1, fp
 800a20e:	4642      	mov	r2, r8
 800a210:	4620      	mov	r0, r4
 800a212:	f001 f8b7 	bl	800b384 <__lshift>
 800a216:	4683      	mov	fp, r0
 800a218:	9b04      	ldr	r3, [sp, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	dd05      	ble.n	800a22a <_dtoa_r+0x84a>
 800a21e:	4631      	mov	r1, r6
 800a220:	461a      	mov	r2, r3
 800a222:	4620      	mov	r0, r4
 800a224:	f001 f8ae 	bl	800b384 <__lshift>
 800a228:	4606      	mov	r6, r0
 800a22a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d069      	beq.n	800a304 <_dtoa_r+0x924>
 800a230:	4631      	mov	r1, r6
 800a232:	4658      	mov	r0, fp
 800a234:	f001 f912 	bl	800b45c <__mcmp>
 800a238:	2800      	cmp	r0, #0
 800a23a:	da63      	bge.n	800a304 <_dtoa_r+0x924>
 800a23c:	2300      	movs	r3, #0
 800a23e:	4659      	mov	r1, fp
 800a240:	220a      	movs	r2, #10
 800a242:	4620      	mov	r0, r4
 800a244:	f000 fea4 	bl	800af90 <__multadd>
 800a248:	9b08      	ldr	r3, [sp, #32]
 800a24a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a24e:	4683      	mov	fp, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 818f 	beq.w	800a574 <_dtoa_r+0xb94>
 800a256:	4639      	mov	r1, r7
 800a258:	2300      	movs	r3, #0
 800a25a:	220a      	movs	r2, #10
 800a25c:	4620      	mov	r0, r4
 800a25e:	f000 fe97 	bl	800af90 <__multadd>
 800a262:	f1b9 0f00 	cmp.w	r9, #0
 800a266:	4607      	mov	r7, r0
 800a268:	f300 808e 	bgt.w	800a388 <_dtoa_r+0x9a8>
 800a26c:	9b05      	ldr	r3, [sp, #20]
 800a26e:	2b02      	cmp	r3, #2
 800a270:	dc50      	bgt.n	800a314 <_dtoa_r+0x934>
 800a272:	e089      	b.n	800a388 <_dtoa_r+0x9a8>
 800a274:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a27a:	e75d      	b.n	800a138 <_dtoa_r+0x758>
 800a27c:	9b01      	ldr	r3, [sp, #4]
 800a27e:	1e5e      	subs	r6, r3, #1
 800a280:	9b06      	ldr	r3, [sp, #24]
 800a282:	42b3      	cmp	r3, r6
 800a284:	bfbf      	itttt	lt
 800a286:	9b06      	ldrlt	r3, [sp, #24]
 800a288:	9606      	strlt	r6, [sp, #24]
 800a28a:	1af2      	sublt	r2, r6, r3
 800a28c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a28e:	bfb6      	itet	lt
 800a290:	189b      	addlt	r3, r3, r2
 800a292:	1b9e      	subge	r6, r3, r6
 800a294:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a296:	9b01      	ldr	r3, [sp, #4]
 800a298:	bfb8      	it	lt
 800a29a:	2600      	movlt	r6, #0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	bfb5      	itete	lt
 800a2a0:	eba8 0503 	sublt.w	r5, r8, r3
 800a2a4:	9b01      	ldrge	r3, [sp, #4]
 800a2a6:	2300      	movlt	r3, #0
 800a2a8:	4645      	movge	r5, r8
 800a2aa:	e747      	b.n	800a13c <_dtoa_r+0x75c>
 800a2ac:	9e06      	ldr	r6, [sp, #24]
 800a2ae:	9f08      	ldr	r7, [sp, #32]
 800a2b0:	4645      	mov	r5, r8
 800a2b2:	e74c      	b.n	800a14e <_dtoa_r+0x76e>
 800a2b4:	9a06      	ldr	r2, [sp, #24]
 800a2b6:	e775      	b.n	800a1a4 <_dtoa_r+0x7c4>
 800a2b8:	9b05      	ldr	r3, [sp, #20]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	dc18      	bgt.n	800a2f0 <_dtoa_r+0x910>
 800a2be:	9b02      	ldr	r3, [sp, #8]
 800a2c0:	b9b3      	cbnz	r3, 800a2f0 <_dtoa_r+0x910>
 800a2c2:	9b03      	ldr	r3, [sp, #12]
 800a2c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2c8:	b9a3      	cbnz	r3, 800a2f4 <_dtoa_r+0x914>
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2d0:	0d1b      	lsrs	r3, r3, #20
 800a2d2:	051b      	lsls	r3, r3, #20
 800a2d4:	b12b      	cbz	r3, 800a2e2 <_dtoa_r+0x902>
 800a2d6:	9b04      	ldr	r3, [sp, #16]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	9304      	str	r3, [sp, #16]
 800a2dc:	f108 0801 	add.w	r8, r8, #1
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	9306      	str	r3, [sp, #24]
 800a2e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f47f af74 	bne.w	800a1d4 <_dtoa_r+0x7f4>
 800a2ec:	2001      	movs	r0, #1
 800a2ee:	e779      	b.n	800a1e4 <_dtoa_r+0x804>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e7f6      	b.n	800a2e2 <_dtoa_r+0x902>
 800a2f4:	9b02      	ldr	r3, [sp, #8]
 800a2f6:	e7f4      	b.n	800a2e2 <_dtoa_r+0x902>
 800a2f8:	d085      	beq.n	800a206 <_dtoa_r+0x826>
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	301c      	adds	r0, #28
 800a2fe:	e77d      	b.n	800a1fc <_dtoa_r+0x81c>
 800a300:	40240000 	.word	0x40240000
 800a304:	9b01      	ldr	r3, [sp, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	dc38      	bgt.n	800a37c <_dtoa_r+0x99c>
 800a30a:	9b05      	ldr	r3, [sp, #20]
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	dd35      	ble.n	800a37c <_dtoa_r+0x99c>
 800a310:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a314:	f1b9 0f00 	cmp.w	r9, #0
 800a318:	d10d      	bne.n	800a336 <_dtoa_r+0x956>
 800a31a:	4631      	mov	r1, r6
 800a31c:	464b      	mov	r3, r9
 800a31e:	2205      	movs	r2, #5
 800a320:	4620      	mov	r0, r4
 800a322:	f000 fe35 	bl	800af90 <__multadd>
 800a326:	4601      	mov	r1, r0
 800a328:	4606      	mov	r6, r0
 800a32a:	4658      	mov	r0, fp
 800a32c:	f001 f896 	bl	800b45c <__mcmp>
 800a330:	2800      	cmp	r0, #0
 800a332:	f73f adbd 	bgt.w	8009eb0 <_dtoa_r+0x4d0>
 800a336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a338:	9d00      	ldr	r5, [sp, #0]
 800a33a:	ea6f 0a03 	mvn.w	sl, r3
 800a33e:	f04f 0800 	mov.w	r8, #0
 800a342:	4631      	mov	r1, r6
 800a344:	4620      	mov	r0, r4
 800a346:	f000 fe01 	bl	800af4c <_Bfree>
 800a34a:	2f00      	cmp	r7, #0
 800a34c:	f43f aeb4 	beq.w	800a0b8 <_dtoa_r+0x6d8>
 800a350:	f1b8 0f00 	cmp.w	r8, #0
 800a354:	d005      	beq.n	800a362 <_dtoa_r+0x982>
 800a356:	45b8      	cmp	r8, r7
 800a358:	d003      	beq.n	800a362 <_dtoa_r+0x982>
 800a35a:	4641      	mov	r1, r8
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 fdf5 	bl	800af4c <_Bfree>
 800a362:	4639      	mov	r1, r7
 800a364:	4620      	mov	r0, r4
 800a366:	f000 fdf1 	bl	800af4c <_Bfree>
 800a36a:	e6a5      	b.n	800a0b8 <_dtoa_r+0x6d8>
 800a36c:	2600      	movs	r6, #0
 800a36e:	4637      	mov	r7, r6
 800a370:	e7e1      	b.n	800a336 <_dtoa_r+0x956>
 800a372:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a374:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a378:	4637      	mov	r7, r6
 800a37a:	e599      	b.n	8009eb0 <_dtoa_r+0x4d0>
 800a37c:	9b08      	ldr	r3, [sp, #32]
 800a37e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 80fd 	beq.w	800a582 <_dtoa_r+0xba2>
 800a388:	2d00      	cmp	r5, #0
 800a38a:	dd05      	ble.n	800a398 <_dtoa_r+0x9b8>
 800a38c:	4639      	mov	r1, r7
 800a38e:	462a      	mov	r2, r5
 800a390:	4620      	mov	r0, r4
 800a392:	f000 fff7 	bl	800b384 <__lshift>
 800a396:	4607      	mov	r7, r0
 800a398:	9b06      	ldr	r3, [sp, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d05c      	beq.n	800a458 <_dtoa_r+0xa78>
 800a39e:	6879      	ldr	r1, [r7, #4]
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 fd93 	bl	800aecc <_Balloc>
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	b928      	cbnz	r0, 800a3b6 <_dtoa_r+0x9d6>
 800a3aa:	4b80      	ldr	r3, [pc, #512]	; (800a5ac <_dtoa_r+0xbcc>)
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3b2:	f7ff bb2e 	b.w	8009a12 <_dtoa_r+0x32>
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	3202      	adds	r2, #2
 800a3ba:	0092      	lsls	r2, r2, #2
 800a3bc:	f107 010c 	add.w	r1, r7, #12
 800a3c0:	300c      	adds	r0, #12
 800a3c2:	f7fd fc2d 	bl	8007c20 <memcpy>
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 ffda 	bl	800b384 <__lshift>
 800a3d0:	9b00      	ldr	r3, [sp, #0]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	9301      	str	r3, [sp, #4]
 800a3d6:	9b00      	ldr	r3, [sp, #0]
 800a3d8:	444b      	add	r3, r9
 800a3da:	9307      	str	r3, [sp, #28]
 800a3dc:	9b02      	ldr	r3, [sp, #8]
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	46b8      	mov	r8, r7
 800a3e4:	9306      	str	r3, [sp, #24]
 800a3e6:	4607      	mov	r7, r0
 800a3e8:	9b01      	ldr	r3, [sp, #4]
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	4658      	mov	r0, fp
 800a3f0:	9302      	str	r3, [sp, #8]
 800a3f2:	f7ff fa67 	bl	80098c4 <quorem>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	3330      	adds	r3, #48	; 0x30
 800a3fa:	9004      	str	r0, [sp, #16]
 800a3fc:	4641      	mov	r1, r8
 800a3fe:	4658      	mov	r0, fp
 800a400:	9308      	str	r3, [sp, #32]
 800a402:	f001 f82b 	bl	800b45c <__mcmp>
 800a406:	463a      	mov	r2, r7
 800a408:	4681      	mov	r9, r0
 800a40a:	4631      	mov	r1, r6
 800a40c:	4620      	mov	r0, r4
 800a40e:	f001 f841 	bl	800b494 <__mdiff>
 800a412:	68c2      	ldr	r2, [r0, #12]
 800a414:	9b08      	ldr	r3, [sp, #32]
 800a416:	4605      	mov	r5, r0
 800a418:	bb02      	cbnz	r2, 800a45c <_dtoa_r+0xa7c>
 800a41a:	4601      	mov	r1, r0
 800a41c:	4658      	mov	r0, fp
 800a41e:	f001 f81d 	bl	800b45c <__mcmp>
 800a422:	9b08      	ldr	r3, [sp, #32]
 800a424:	4602      	mov	r2, r0
 800a426:	4629      	mov	r1, r5
 800a428:	4620      	mov	r0, r4
 800a42a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a42e:	f000 fd8d 	bl	800af4c <_Bfree>
 800a432:	9b05      	ldr	r3, [sp, #20]
 800a434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a436:	9d01      	ldr	r5, [sp, #4]
 800a438:	ea43 0102 	orr.w	r1, r3, r2
 800a43c:	9b06      	ldr	r3, [sp, #24]
 800a43e:	430b      	orrs	r3, r1
 800a440:	9b08      	ldr	r3, [sp, #32]
 800a442:	d10d      	bne.n	800a460 <_dtoa_r+0xa80>
 800a444:	2b39      	cmp	r3, #57	; 0x39
 800a446:	d029      	beq.n	800a49c <_dtoa_r+0xabc>
 800a448:	f1b9 0f00 	cmp.w	r9, #0
 800a44c:	dd01      	ble.n	800a452 <_dtoa_r+0xa72>
 800a44e:	9b04      	ldr	r3, [sp, #16]
 800a450:	3331      	adds	r3, #49	; 0x31
 800a452:	9a02      	ldr	r2, [sp, #8]
 800a454:	7013      	strb	r3, [r2, #0]
 800a456:	e774      	b.n	800a342 <_dtoa_r+0x962>
 800a458:	4638      	mov	r0, r7
 800a45a:	e7b9      	b.n	800a3d0 <_dtoa_r+0x9f0>
 800a45c:	2201      	movs	r2, #1
 800a45e:	e7e2      	b.n	800a426 <_dtoa_r+0xa46>
 800a460:	f1b9 0f00 	cmp.w	r9, #0
 800a464:	db06      	blt.n	800a474 <_dtoa_r+0xa94>
 800a466:	9905      	ldr	r1, [sp, #20]
 800a468:	ea41 0909 	orr.w	r9, r1, r9
 800a46c:	9906      	ldr	r1, [sp, #24]
 800a46e:	ea59 0101 	orrs.w	r1, r9, r1
 800a472:	d120      	bne.n	800a4b6 <_dtoa_r+0xad6>
 800a474:	2a00      	cmp	r2, #0
 800a476:	ddec      	ble.n	800a452 <_dtoa_r+0xa72>
 800a478:	4659      	mov	r1, fp
 800a47a:	2201      	movs	r2, #1
 800a47c:	4620      	mov	r0, r4
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	f000 ff80 	bl	800b384 <__lshift>
 800a484:	4631      	mov	r1, r6
 800a486:	4683      	mov	fp, r0
 800a488:	f000 ffe8 	bl	800b45c <__mcmp>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	9b01      	ldr	r3, [sp, #4]
 800a490:	dc02      	bgt.n	800a498 <_dtoa_r+0xab8>
 800a492:	d1de      	bne.n	800a452 <_dtoa_r+0xa72>
 800a494:	07da      	lsls	r2, r3, #31
 800a496:	d5dc      	bpl.n	800a452 <_dtoa_r+0xa72>
 800a498:	2b39      	cmp	r3, #57	; 0x39
 800a49a:	d1d8      	bne.n	800a44e <_dtoa_r+0xa6e>
 800a49c:	9a02      	ldr	r2, [sp, #8]
 800a49e:	2339      	movs	r3, #57	; 0x39
 800a4a0:	7013      	strb	r3, [r2, #0]
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	461d      	mov	r5, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4ac:	2a39      	cmp	r2, #57	; 0x39
 800a4ae:	d050      	beq.n	800a552 <_dtoa_r+0xb72>
 800a4b0:	3201      	adds	r2, #1
 800a4b2:	701a      	strb	r2, [r3, #0]
 800a4b4:	e745      	b.n	800a342 <_dtoa_r+0x962>
 800a4b6:	2a00      	cmp	r2, #0
 800a4b8:	dd03      	ble.n	800a4c2 <_dtoa_r+0xae2>
 800a4ba:	2b39      	cmp	r3, #57	; 0x39
 800a4bc:	d0ee      	beq.n	800a49c <_dtoa_r+0xabc>
 800a4be:	3301      	adds	r3, #1
 800a4c0:	e7c7      	b.n	800a452 <_dtoa_r+0xa72>
 800a4c2:	9a01      	ldr	r2, [sp, #4]
 800a4c4:	9907      	ldr	r1, [sp, #28]
 800a4c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a4ca:	428a      	cmp	r2, r1
 800a4cc:	d02a      	beq.n	800a524 <_dtoa_r+0xb44>
 800a4ce:	4659      	mov	r1, fp
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	220a      	movs	r2, #10
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 fd5b 	bl	800af90 <__multadd>
 800a4da:	45b8      	cmp	r8, r7
 800a4dc:	4683      	mov	fp, r0
 800a4de:	f04f 0300 	mov.w	r3, #0
 800a4e2:	f04f 020a 	mov.w	r2, #10
 800a4e6:	4641      	mov	r1, r8
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	d107      	bne.n	800a4fc <_dtoa_r+0xb1c>
 800a4ec:	f000 fd50 	bl	800af90 <__multadd>
 800a4f0:	4680      	mov	r8, r0
 800a4f2:	4607      	mov	r7, r0
 800a4f4:	9b01      	ldr	r3, [sp, #4]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	e775      	b.n	800a3e8 <_dtoa_r+0xa08>
 800a4fc:	f000 fd48 	bl	800af90 <__multadd>
 800a500:	4639      	mov	r1, r7
 800a502:	4680      	mov	r8, r0
 800a504:	2300      	movs	r3, #0
 800a506:	220a      	movs	r2, #10
 800a508:	4620      	mov	r0, r4
 800a50a:	f000 fd41 	bl	800af90 <__multadd>
 800a50e:	4607      	mov	r7, r0
 800a510:	e7f0      	b.n	800a4f4 <_dtoa_r+0xb14>
 800a512:	f1b9 0f00 	cmp.w	r9, #0
 800a516:	9a00      	ldr	r2, [sp, #0]
 800a518:	bfcc      	ite	gt
 800a51a:	464d      	movgt	r5, r9
 800a51c:	2501      	movle	r5, #1
 800a51e:	4415      	add	r5, r2
 800a520:	f04f 0800 	mov.w	r8, #0
 800a524:	4659      	mov	r1, fp
 800a526:	2201      	movs	r2, #1
 800a528:	4620      	mov	r0, r4
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	f000 ff2a 	bl	800b384 <__lshift>
 800a530:	4631      	mov	r1, r6
 800a532:	4683      	mov	fp, r0
 800a534:	f000 ff92 	bl	800b45c <__mcmp>
 800a538:	2800      	cmp	r0, #0
 800a53a:	dcb2      	bgt.n	800a4a2 <_dtoa_r+0xac2>
 800a53c:	d102      	bne.n	800a544 <_dtoa_r+0xb64>
 800a53e:	9b01      	ldr	r3, [sp, #4]
 800a540:	07db      	lsls	r3, r3, #31
 800a542:	d4ae      	bmi.n	800a4a2 <_dtoa_r+0xac2>
 800a544:	462b      	mov	r3, r5
 800a546:	461d      	mov	r5, r3
 800a548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a54c:	2a30      	cmp	r2, #48	; 0x30
 800a54e:	d0fa      	beq.n	800a546 <_dtoa_r+0xb66>
 800a550:	e6f7      	b.n	800a342 <_dtoa_r+0x962>
 800a552:	9a00      	ldr	r2, [sp, #0]
 800a554:	429a      	cmp	r2, r3
 800a556:	d1a5      	bne.n	800a4a4 <_dtoa_r+0xac4>
 800a558:	f10a 0a01 	add.w	sl, sl, #1
 800a55c:	2331      	movs	r3, #49	; 0x31
 800a55e:	e779      	b.n	800a454 <_dtoa_r+0xa74>
 800a560:	4b13      	ldr	r3, [pc, #76]	; (800a5b0 <_dtoa_r+0xbd0>)
 800a562:	f7ff baaf 	b.w	8009ac4 <_dtoa_r+0xe4>
 800a566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f47f aa86 	bne.w	8009a7a <_dtoa_r+0x9a>
 800a56e:	4b11      	ldr	r3, [pc, #68]	; (800a5b4 <_dtoa_r+0xbd4>)
 800a570:	f7ff baa8 	b.w	8009ac4 <_dtoa_r+0xe4>
 800a574:	f1b9 0f00 	cmp.w	r9, #0
 800a578:	dc03      	bgt.n	800a582 <_dtoa_r+0xba2>
 800a57a:	9b05      	ldr	r3, [sp, #20]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	f73f aec9 	bgt.w	800a314 <_dtoa_r+0x934>
 800a582:	9d00      	ldr	r5, [sp, #0]
 800a584:	4631      	mov	r1, r6
 800a586:	4658      	mov	r0, fp
 800a588:	f7ff f99c 	bl	80098c4 <quorem>
 800a58c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a590:	f805 3b01 	strb.w	r3, [r5], #1
 800a594:	9a00      	ldr	r2, [sp, #0]
 800a596:	1aaa      	subs	r2, r5, r2
 800a598:	4591      	cmp	r9, r2
 800a59a:	ddba      	ble.n	800a512 <_dtoa_r+0xb32>
 800a59c:	4659      	mov	r1, fp
 800a59e:	2300      	movs	r3, #0
 800a5a0:	220a      	movs	r2, #10
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f000 fcf4 	bl	800af90 <__multadd>
 800a5a8:	4683      	mov	fp, r0
 800a5aa:	e7eb      	b.n	800a584 <_dtoa_r+0xba4>
 800a5ac:	0800f5b4 	.word	0x0800f5b4
 800a5b0:	0800f3b0 	.word	0x0800f3b0
 800a5b4:	0800f531 	.word	0x0800f531

0800a5b8 <std>:
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	b510      	push	{r4, lr}
 800a5bc:	4604      	mov	r4, r0
 800a5be:	e9c0 3300 	strd	r3, r3, [r0]
 800a5c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5c6:	6083      	str	r3, [r0, #8]
 800a5c8:	8181      	strh	r1, [r0, #12]
 800a5ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a5cc:	81c2      	strh	r2, [r0, #14]
 800a5ce:	6183      	str	r3, [r0, #24]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	2208      	movs	r2, #8
 800a5d4:	305c      	adds	r0, #92	; 0x5c
 800a5d6:	f7fd fb31 	bl	8007c3c <memset>
 800a5da:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <std+0x38>)
 800a5dc:	6263      	str	r3, [r4, #36]	; 0x24
 800a5de:	4b05      	ldr	r3, [pc, #20]	; (800a5f4 <std+0x3c>)
 800a5e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5e2:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <std+0x40>)
 800a5e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5e6:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <std+0x44>)
 800a5e8:	6224      	str	r4, [r4, #32]
 800a5ea:	6323      	str	r3, [r4, #48]	; 0x30
 800a5ec:	bd10      	pop	{r4, pc}
 800a5ee:	bf00      	nop
 800a5f0:	0800be71 	.word	0x0800be71
 800a5f4:	0800be93 	.word	0x0800be93
 800a5f8:	0800becb 	.word	0x0800becb
 800a5fc:	0800beef 	.word	0x0800beef

0800a600 <_cleanup_r>:
 800a600:	4901      	ldr	r1, [pc, #4]	; (800a608 <_cleanup_r+0x8>)
 800a602:	f000 b8af 	b.w	800a764 <_fwalk_reent>
 800a606:	bf00      	nop
 800a608:	0800c245 	.word	0x0800c245

0800a60c <__sfmoreglue>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	1e4a      	subs	r2, r1, #1
 800a610:	2568      	movs	r5, #104	; 0x68
 800a612:	4355      	muls	r5, r2
 800a614:	460e      	mov	r6, r1
 800a616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a61a:	f7fd fb67 	bl	8007cec <_malloc_r>
 800a61e:	4604      	mov	r4, r0
 800a620:	b140      	cbz	r0, 800a634 <__sfmoreglue+0x28>
 800a622:	2100      	movs	r1, #0
 800a624:	e9c0 1600 	strd	r1, r6, [r0]
 800a628:	300c      	adds	r0, #12
 800a62a:	60a0      	str	r0, [r4, #8]
 800a62c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a630:	f7fd fb04 	bl	8007c3c <memset>
 800a634:	4620      	mov	r0, r4
 800a636:	bd70      	pop	{r4, r5, r6, pc}

0800a638 <__sfp_lock_acquire>:
 800a638:	4801      	ldr	r0, [pc, #4]	; (800a640 <__sfp_lock_acquire+0x8>)
 800a63a:	f000 bc26 	b.w	800ae8a <__retarget_lock_acquire_recursive>
 800a63e:	bf00      	nop
 800a640:	20000d4c 	.word	0x20000d4c

0800a644 <__sfp_lock_release>:
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <__sfp_lock_release+0x8>)
 800a646:	f000 bc21 	b.w	800ae8c <__retarget_lock_release_recursive>
 800a64a:	bf00      	nop
 800a64c:	20000d4c 	.word	0x20000d4c

0800a650 <__sinit_lock_acquire>:
 800a650:	4801      	ldr	r0, [pc, #4]	; (800a658 <__sinit_lock_acquire+0x8>)
 800a652:	f000 bc1a 	b.w	800ae8a <__retarget_lock_acquire_recursive>
 800a656:	bf00      	nop
 800a658:	20000d47 	.word	0x20000d47

0800a65c <__sinit_lock_release>:
 800a65c:	4801      	ldr	r0, [pc, #4]	; (800a664 <__sinit_lock_release+0x8>)
 800a65e:	f000 bc15 	b.w	800ae8c <__retarget_lock_release_recursive>
 800a662:	bf00      	nop
 800a664:	20000d47 	.word	0x20000d47

0800a668 <__sinit>:
 800a668:	b510      	push	{r4, lr}
 800a66a:	4604      	mov	r4, r0
 800a66c:	f7ff fff0 	bl	800a650 <__sinit_lock_acquire>
 800a670:	69a3      	ldr	r3, [r4, #24]
 800a672:	b11b      	cbz	r3, 800a67c <__sinit+0x14>
 800a674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a678:	f7ff bff0 	b.w	800a65c <__sinit_lock_release>
 800a67c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a680:	6523      	str	r3, [r4, #80]	; 0x50
 800a682:	4b13      	ldr	r3, [pc, #76]	; (800a6d0 <__sinit+0x68>)
 800a684:	4a13      	ldr	r2, [pc, #76]	; (800a6d4 <__sinit+0x6c>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	62a2      	str	r2, [r4, #40]	; 0x28
 800a68a:	42a3      	cmp	r3, r4
 800a68c:	bf04      	itt	eq
 800a68e:	2301      	moveq	r3, #1
 800a690:	61a3      	streq	r3, [r4, #24]
 800a692:	4620      	mov	r0, r4
 800a694:	f000 f820 	bl	800a6d8 <__sfp>
 800a698:	6060      	str	r0, [r4, #4]
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 f81c 	bl	800a6d8 <__sfp>
 800a6a0:	60a0      	str	r0, [r4, #8]
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f000 f818 	bl	800a6d8 <__sfp>
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	60e0      	str	r0, [r4, #12]
 800a6ac:	2104      	movs	r1, #4
 800a6ae:	6860      	ldr	r0, [r4, #4]
 800a6b0:	f7ff ff82 	bl	800a5b8 <std>
 800a6b4:	68a0      	ldr	r0, [r4, #8]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	2109      	movs	r1, #9
 800a6ba:	f7ff ff7d 	bl	800a5b8 <std>
 800a6be:	68e0      	ldr	r0, [r4, #12]
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	2112      	movs	r1, #18
 800a6c4:	f7ff ff78 	bl	800a5b8 <std>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	61a3      	str	r3, [r4, #24]
 800a6cc:	e7d2      	b.n	800a674 <__sinit+0xc>
 800a6ce:	bf00      	nop
 800a6d0:	0800f39c 	.word	0x0800f39c
 800a6d4:	0800a601 	.word	0x0800a601

0800a6d8 <__sfp>:
 800a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6da:	4607      	mov	r7, r0
 800a6dc:	f7ff ffac 	bl	800a638 <__sfp_lock_acquire>
 800a6e0:	4b1e      	ldr	r3, [pc, #120]	; (800a75c <__sfp+0x84>)
 800a6e2:	681e      	ldr	r6, [r3, #0]
 800a6e4:	69b3      	ldr	r3, [r6, #24]
 800a6e6:	b913      	cbnz	r3, 800a6ee <__sfp+0x16>
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f7ff ffbd 	bl	800a668 <__sinit>
 800a6ee:	3648      	adds	r6, #72	; 0x48
 800a6f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	d503      	bpl.n	800a700 <__sfp+0x28>
 800a6f8:	6833      	ldr	r3, [r6, #0]
 800a6fa:	b30b      	cbz	r3, 800a740 <__sfp+0x68>
 800a6fc:	6836      	ldr	r6, [r6, #0]
 800a6fe:	e7f7      	b.n	800a6f0 <__sfp+0x18>
 800a700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a704:	b9d5      	cbnz	r5, 800a73c <__sfp+0x64>
 800a706:	4b16      	ldr	r3, [pc, #88]	; (800a760 <__sfp+0x88>)
 800a708:	60e3      	str	r3, [r4, #12]
 800a70a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a70e:	6665      	str	r5, [r4, #100]	; 0x64
 800a710:	f000 fbba 	bl	800ae88 <__retarget_lock_init_recursive>
 800a714:	f7ff ff96 	bl	800a644 <__sfp_lock_release>
 800a718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a71c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a720:	6025      	str	r5, [r4, #0]
 800a722:	61a5      	str	r5, [r4, #24]
 800a724:	2208      	movs	r2, #8
 800a726:	4629      	mov	r1, r5
 800a728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a72c:	f7fd fa86 	bl	8007c3c <memset>
 800a730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a738:	4620      	mov	r0, r4
 800a73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a73c:	3468      	adds	r4, #104	; 0x68
 800a73e:	e7d9      	b.n	800a6f4 <__sfp+0x1c>
 800a740:	2104      	movs	r1, #4
 800a742:	4638      	mov	r0, r7
 800a744:	f7ff ff62 	bl	800a60c <__sfmoreglue>
 800a748:	4604      	mov	r4, r0
 800a74a:	6030      	str	r0, [r6, #0]
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d1d5      	bne.n	800a6fc <__sfp+0x24>
 800a750:	f7ff ff78 	bl	800a644 <__sfp_lock_release>
 800a754:	230c      	movs	r3, #12
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	e7ee      	b.n	800a738 <__sfp+0x60>
 800a75a:	bf00      	nop
 800a75c:	0800f39c 	.word	0x0800f39c
 800a760:	ffff0001 	.word	0xffff0001

0800a764 <_fwalk_reent>:
 800a764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a768:	4606      	mov	r6, r0
 800a76a:	4688      	mov	r8, r1
 800a76c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a770:	2700      	movs	r7, #0
 800a772:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a776:	f1b9 0901 	subs.w	r9, r9, #1
 800a77a:	d505      	bpl.n	800a788 <_fwalk_reent+0x24>
 800a77c:	6824      	ldr	r4, [r4, #0]
 800a77e:	2c00      	cmp	r4, #0
 800a780:	d1f7      	bne.n	800a772 <_fwalk_reent+0xe>
 800a782:	4638      	mov	r0, r7
 800a784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a788:	89ab      	ldrh	r3, [r5, #12]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d907      	bls.n	800a79e <_fwalk_reent+0x3a>
 800a78e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a792:	3301      	adds	r3, #1
 800a794:	d003      	beq.n	800a79e <_fwalk_reent+0x3a>
 800a796:	4629      	mov	r1, r5
 800a798:	4630      	mov	r0, r6
 800a79a:	47c0      	blx	r8
 800a79c:	4307      	orrs	r7, r0
 800a79e:	3568      	adds	r5, #104	; 0x68
 800a7a0:	e7e9      	b.n	800a776 <_fwalk_reent+0x12>

0800a7a2 <rshift>:
 800a7a2:	6903      	ldr	r3, [r0, #16]
 800a7a4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7ac:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a7b0:	f100 0414 	add.w	r4, r0, #20
 800a7b4:	dd45      	ble.n	800a842 <rshift+0xa0>
 800a7b6:	f011 011f 	ands.w	r1, r1, #31
 800a7ba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a7be:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a7c2:	d10c      	bne.n	800a7de <rshift+0x3c>
 800a7c4:	f100 0710 	add.w	r7, r0, #16
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	42b1      	cmp	r1, r6
 800a7cc:	d334      	bcc.n	800a838 <rshift+0x96>
 800a7ce:	1a9b      	subs	r3, r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	1eea      	subs	r2, r5, #3
 800a7d4:	4296      	cmp	r6, r2
 800a7d6:	bf38      	it	cc
 800a7d8:	2300      	movcc	r3, #0
 800a7da:	4423      	add	r3, r4
 800a7dc:	e015      	b.n	800a80a <rshift+0x68>
 800a7de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7e2:	f1c1 0820 	rsb	r8, r1, #32
 800a7e6:	40cf      	lsrs	r7, r1
 800a7e8:	f105 0e04 	add.w	lr, r5, #4
 800a7ec:	46a1      	mov	r9, r4
 800a7ee:	4576      	cmp	r6, lr
 800a7f0:	46f4      	mov	ip, lr
 800a7f2:	d815      	bhi.n	800a820 <rshift+0x7e>
 800a7f4:	1a9b      	subs	r3, r3, r2
 800a7f6:	009a      	lsls	r2, r3, #2
 800a7f8:	3a04      	subs	r2, #4
 800a7fa:	3501      	adds	r5, #1
 800a7fc:	42ae      	cmp	r6, r5
 800a7fe:	bf38      	it	cc
 800a800:	2200      	movcc	r2, #0
 800a802:	18a3      	adds	r3, r4, r2
 800a804:	50a7      	str	r7, [r4, r2]
 800a806:	b107      	cbz	r7, 800a80a <rshift+0x68>
 800a808:	3304      	adds	r3, #4
 800a80a:	1b1a      	subs	r2, r3, r4
 800a80c:	42a3      	cmp	r3, r4
 800a80e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a812:	bf08      	it	eq
 800a814:	2300      	moveq	r3, #0
 800a816:	6102      	str	r2, [r0, #16]
 800a818:	bf08      	it	eq
 800a81a:	6143      	streq	r3, [r0, #20]
 800a81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a820:	f8dc c000 	ldr.w	ip, [ip]
 800a824:	fa0c fc08 	lsl.w	ip, ip, r8
 800a828:	ea4c 0707 	orr.w	r7, ip, r7
 800a82c:	f849 7b04 	str.w	r7, [r9], #4
 800a830:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a834:	40cf      	lsrs	r7, r1
 800a836:	e7da      	b.n	800a7ee <rshift+0x4c>
 800a838:	f851 cb04 	ldr.w	ip, [r1], #4
 800a83c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a840:	e7c3      	b.n	800a7ca <rshift+0x28>
 800a842:	4623      	mov	r3, r4
 800a844:	e7e1      	b.n	800a80a <rshift+0x68>

0800a846 <__hexdig_fun>:
 800a846:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a84a:	2b09      	cmp	r3, #9
 800a84c:	d802      	bhi.n	800a854 <__hexdig_fun+0xe>
 800a84e:	3820      	subs	r0, #32
 800a850:	b2c0      	uxtb	r0, r0
 800a852:	4770      	bx	lr
 800a854:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a858:	2b05      	cmp	r3, #5
 800a85a:	d801      	bhi.n	800a860 <__hexdig_fun+0x1a>
 800a85c:	3847      	subs	r0, #71	; 0x47
 800a85e:	e7f7      	b.n	800a850 <__hexdig_fun+0xa>
 800a860:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a864:	2b05      	cmp	r3, #5
 800a866:	d801      	bhi.n	800a86c <__hexdig_fun+0x26>
 800a868:	3827      	subs	r0, #39	; 0x27
 800a86a:	e7f1      	b.n	800a850 <__hexdig_fun+0xa>
 800a86c:	2000      	movs	r0, #0
 800a86e:	4770      	bx	lr

0800a870 <__gethex>:
 800a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a874:	ed2d 8b02 	vpush	{d8}
 800a878:	b089      	sub	sp, #36	; 0x24
 800a87a:	ee08 0a10 	vmov	s16, r0
 800a87e:	9304      	str	r3, [sp, #16]
 800a880:	4bbc      	ldr	r3, [pc, #752]	; (800ab74 <__gethex+0x304>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	9301      	str	r3, [sp, #4]
 800a886:	4618      	mov	r0, r3
 800a888:	468b      	mov	fp, r1
 800a88a:	4690      	mov	r8, r2
 800a88c:	f7f5 fca8 	bl	80001e0 <strlen>
 800a890:	9b01      	ldr	r3, [sp, #4]
 800a892:	f8db 2000 	ldr.w	r2, [fp]
 800a896:	4403      	add	r3, r0
 800a898:	4682      	mov	sl, r0
 800a89a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	1c93      	adds	r3, r2, #2
 800a8a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a8a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a8aa:	32fe      	adds	r2, #254	; 0xfe
 800a8ac:	18d1      	adds	r1, r2, r3
 800a8ae:	461f      	mov	r7, r3
 800a8b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a8b4:	9100      	str	r1, [sp, #0]
 800a8b6:	2830      	cmp	r0, #48	; 0x30
 800a8b8:	d0f8      	beq.n	800a8ac <__gethex+0x3c>
 800a8ba:	f7ff ffc4 	bl	800a846 <__hexdig_fun>
 800a8be:	4604      	mov	r4, r0
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d13a      	bne.n	800a93a <__gethex+0xca>
 800a8c4:	9901      	ldr	r1, [sp, #4]
 800a8c6:	4652      	mov	r2, sl
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f001 fb14 	bl	800bef6 <strncmp>
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d168      	bne.n	800a9a6 <__gethex+0x136>
 800a8d4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a8d8:	eb07 060a 	add.w	r6, r7, sl
 800a8dc:	f7ff ffb3 	bl	800a846 <__hexdig_fun>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d062      	beq.n	800a9aa <__gethex+0x13a>
 800a8e4:	4633      	mov	r3, r6
 800a8e6:	7818      	ldrb	r0, [r3, #0]
 800a8e8:	2830      	cmp	r0, #48	; 0x30
 800a8ea:	461f      	mov	r7, r3
 800a8ec:	f103 0301 	add.w	r3, r3, #1
 800a8f0:	d0f9      	beq.n	800a8e6 <__gethex+0x76>
 800a8f2:	f7ff ffa8 	bl	800a846 <__hexdig_fun>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	fab0 f480 	clz	r4, r0
 800a8fc:	0964      	lsrs	r4, r4, #5
 800a8fe:	4635      	mov	r5, r6
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	463a      	mov	r2, r7
 800a904:	4616      	mov	r6, r2
 800a906:	3201      	adds	r2, #1
 800a908:	7830      	ldrb	r0, [r6, #0]
 800a90a:	f7ff ff9c 	bl	800a846 <__hexdig_fun>
 800a90e:	2800      	cmp	r0, #0
 800a910:	d1f8      	bne.n	800a904 <__gethex+0x94>
 800a912:	9901      	ldr	r1, [sp, #4]
 800a914:	4652      	mov	r2, sl
 800a916:	4630      	mov	r0, r6
 800a918:	f001 faed 	bl	800bef6 <strncmp>
 800a91c:	b980      	cbnz	r0, 800a940 <__gethex+0xd0>
 800a91e:	b94d      	cbnz	r5, 800a934 <__gethex+0xc4>
 800a920:	eb06 050a 	add.w	r5, r6, sl
 800a924:	462a      	mov	r2, r5
 800a926:	4616      	mov	r6, r2
 800a928:	3201      	adds	r2, #1
 800a92a:	7830      	ldrb	r0, [r6, #0]
 800a92c:	f7ff ff8b 	bl	800a846 <__hexdig_fun>
 800a930:	2800      	cmp	r0, #0
 800a932:	d1f8      	bne.n	800a926 <__gethex+0xb6>
 800a934:	1bad      	subs	r5, r5, r6
 800a936:	00ad      	lsls	r5, r5, #2
 800a938:	e004      	b.n	800a944 <__gethex+0xd4>
 800a93a:	2400      	movs	r4, #0
 800a93c:	4625      	mov	r5, r4
 800a93e:	e7e0      	b.n	800a902 <__gethex+0x92>
 800a940:	2d00      	cmp	r5, #0
 800a942:	d1f7      	bne.n	800a934 <__gethex+0xc4>
 800a944:	7833      	ldrb	r3, [r6, #0]
 800a946:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a94a:	2b50      	cmp	r3, #80	; 0x50
 800a94c:	d13b      	bne.n	800a9c6 <__gethex+0x156>
 800a94e:	7873      	ldrb	r3, [r6, #1]
 800a950:	2b2b      	cmp	r3, #43	; 0x2b
 800a952:	d02c      	beq.n	800a9ae <__gethex+0x13e>
 800a954:	2b2d      	cmp	r3, #45	; 0x2d
 800a956:	d02e      	beq.n	800a9b6 <__gethex+0x146>
 800a958:	1c71      	adds	r1, r6, #1
 800a95a:	f04f 0900 	mov.w	r9, #0
 800a95e:	7808      	ldrb	r0, [r1, #0]
 800a960:	f7ff ff71 	bl	800a846 <__hexdig_fun>
 800a964:	1e43      	subs	r3, r0, #1
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b18      	cmp	r3, #24
 800a96a:	d82c      	bhi.n	800a9c6 <__gethex+0x156>
 800a96c:	f1a0 0210 	sub.w	r2, r0, #16
 800a970:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a974:	f7ff ff67 	bl	800a846 <__hexdig_fun>
 800a978:	1e43      	subs	r3, r0, #1
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	2b18      	cmp	r3, #24
 800a97e:	d91d      	bls.n	800a9bc <__gethex+0x14c>
 800a980:	f1b9 0f00 	cmp.w	r9, #0
 800a984:	d000      	beq.n	800a988 <__gethex+0x118>
 800a986:	4252      	negs	r2, r2
 800a988:	4415      	add	r5, r2
 800a98a:	f8cb 1000 	str.w	r1, [fp]
 800a98e:	b1e4      	cbz	r4, 800a9ca <__gethex+0x15a>
 800a990:	9b00      	ldr	r3, [sp, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	bf14      	ite	ne
 800a996:	2700      	movne	r7, #0
 800a998:	2706      	moveq	r7, #6
 800a99a:	4638      	mov	r0, r7
 800a99c:	b009      	add	sp, #36	; 0x24
 800a99e:	ecbd 8b02 	vpop	{d8}
 800a9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a6:	463e      	mov	r6, r7
 800a9a8:	4625      	mov	r5, r4
 800a9aa:	2401      	movs	r4, #1
 800a9ac:	e7ca      	b.n	800a944 <__gethex+0xd4>
 800a9ae:	f04f 0900 	mov.w	r9, #0
 800a9b2:	1cb1      	adds	r1, r6, #2
 800a9b4:	e7d3      	b.n	800a95e <__gethex+0xee>
 800a9b6:	f04f 0901 	mov.w	r9, #1
 800a9ba:	e7fa      	b.n	800a9b2 <__gethex+0x142>
 800a9bc:	230a      	movs	r3, #10
 800a9be:	fb03 0202 	mla	r2, r3, r2, r0
 800a9c2:	3a10      	subs	r2, #16
 800a9c4:	e7d4      	b.n	800a970 <__gethex+0x100>
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	e7df      	b.n	800a98a <__gethex+0x11a>
 800a9ca:	1bf3      	subs	r3, r6, r7
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	2b07      	cmp	r3, #7
 800a9d2:	dc0b      	bgt.n	800a9ec <__gethex+0x17c>
 800a9d4:	ee18 0a10 	vmov	r0, s16
 800a9d8:	f000 fa78 	bl	800aecc <_Balloc>
 800a9dc:	4604      	mov	r4, r0
 800a9de:	b940      	cbnz	r0, 800a9f2 <__gethex+0x182>
 800a9e0:	4b65      	ldr	r3, [pc, #404]	; (800ab78 <__gethex+0x308>)
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	21de      	movs	r1, #222	; 0xde
 800a9e6:	4865      	ldr	r0, [pc, #404]	; (800ab7c <__gethex+0x30c>)
 800a9e8:	f001 fb78 	bl	800c0dc <__assert_func>
 800a9ec:	3101      	adds	r1, #1
 800a9ee:	105b      	asrs	r3, r3, #1
 800a9f0:	e7ee      	b.n	800a9d0 <__gethex+0x160>
 800a9f2:	f100 0914 	add.w	r9, r0, #20
 800a9f6:	f04f 0b00 	mov.w	fp, #0
 800a9fa:	f1ca 0301 	rsb	r3, sl, #1
 800a9fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa02:	f8cd b000 	str.w	fp, [sp]
 800aa06:	9306      	str	r3, [sp, #24]
 800aa08:	42b7      	cmp	r7, r6
 800aa0a:	d340      	bcc.n	800aa8e <__gethex+0x21e>
 800aa0c:	9802      	ldr	r0, [sp, #8]
 800aa0e:	9b00      	ldr	r3, [sp, #0]
 800aa10:	f840 3b04 	str.w	r3, [r0], #4
 800aa14:	eba0 0009 	sub.w	r0, r0, r9
 800aa18:	1080      	asrs	r0, r0, #2
 800aa1a:	0146      	lsls	r6, r0, #5
 800aa1c:	6120      	str	r0, [r4, #16]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 fb4a 	bl	800b0b8 <__hi0bits>
 800aa24:	1a30      	subs	r0, r6, r0
 800aa26:	f8d8 6000 	ldr.w	r6, [r8]
 800aa2a:	42b0      	cmp	r0, r6
 800aa2c:	dd63      	ble.n	800aaf6 <__gethex+0x286>
 800aa2e:	1b87      	subs	r7, r0, r6
 800aa30:	4639      	mov	r1, r7
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 fee4 	bl	800b800 <__any_on>
 800aa38:	4682      	mov	sl, r0
 800aa3a:	b1a8      	cbz	r0, 800aa68 <__gethex+0x1f8>
 800aa3c:	1e7b      	subs	r3, r7, #1
 800aa3e:	1159      	asrs	r1, r3, #5
 800aa40:	f003 021f 	and.w	r2, r3, #31
 800aa44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aa48:	f04f 0a01 	mov.w	sl, #1
 800aa4c:	fa0a f202 	lsl.w	r2, sl, r2
 800aa50:	420a      	tst	r2, r1
 800aa52:	d009      	beq.n	800aa68 <__gethex+0x1f8>
 800aa54:	4553      	cmp	r3, sl
 800aa56:	dd05      	ble.n	800aa64 <__gethex+0x1f4>
 800aa58:	1eb9      	subs	r1, r7, #2
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 fed0 	bl	800b800 <__any_on>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d145      	bne.n	800aaf0 <__gethex+0x280>
 800aa64:	f04f 0a02 	mov.w	sl, #2
 800aa68:	4639      	mov	r1, r7
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f7ff fe99 	bl	800a7a2 <rshift>
 800aa70:	443d      	add	r5, r7
 800aa72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa76:	42ab      	cmp	r3, r5
 800aa78:	da4c      	bge.n	800ab14 <__gethex+0x2a4>
 800aa7a:	ee18 0a10 	vmov	r0, s16
 800aa7e:	4621      	mov	r1, r4
 800aa80:	f000 fa64 	bl	800af4c <_Bfree>
 800aa84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa86:	2300      	movs	r3, #0
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	27a3      	movs	r7, #163	; 0xa3
 800aa8c:	e785      	b.n	800a99a <__gethex+0x12a>
 800aa8e:	1e73      	subs	r3, r6, #1
 800aa90:	9a05      	ldr	r2, [sp, #20]
 800aa92:	9303      	str	r3, [sp, #12]
 800aa94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d019      	beq.n	800aad0 <__gethex+0x260>
 800aa9c:	f1bb 0f20 	cmp.w	fp, #32
 800aaa0:	d107      	bne.n	800aab2 <__gethex+0x242>
 800aaa2:	9b02      	ldr	r3, [sp, #8]
 800aaa4:	9a00      	ldr	r2, [sp, #0]
 800aaa6:	f843 2b04 	str.w	r2, [r3], #4
 800aaaa:	9302      	str	r3, [sp, #8]
 800aaac:	2300      	movs	r3, #0
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	469b      	mov	fp, r3
 800aab2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aab6:	f7ff fec6 	bl	800a846 <__hexdig_fun>
 800aaba:	9b00      	ldr	r3, [sp, #0]
 800aabc:	f000 000f 	and.w	r0, r0, #15
 800aac0:	fa00 f00b 	lsl.w	r0, r0, fp
 800aac4:	4303      	orrs	r3, r0
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	f10b 0b04 	add.w	fp, fp, #4
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	e00d      	b.n	800aaec <__gethex+0x27c>
 800aad0:	9b03      	ldr	r3, [sp, #12]
 800aad2:	9a06      	ldr	r2, [sp, #24]
 800aad4:	4413      	add	r3, r2
 800aad6:	42bb      	cmp	r3, r7
 800aad8:	d3e0      	bcc.n	800aa9c <__gethex+0x22c>
 800aada:	4618      	mov	r0, r3
 800aadc:	9901      	ldr	r1, [sp, #4]
 800aade:	9307      	str	r3, [sp, #28]
 800aae0:	4652      	mov	r2, sl
 800aae2:	f001 fa08 	bl	800bef6 <strncmp>
 800aae6:	9b07      	ldr	r3, [sp, #28]
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d1d7      	bne.n	800aa9c <__gethex+0x22c>
 800aaec:	461e      	mov	r6, r3
 800aaee:	e78b      	b.n	800aa08 <__gethex+0x198>
 800aaf0:	f04f 0a03 	mov.w	sl, #3
 800aaf4:	e7b8      	b.n	800aa68 <__gethex+0x1f8>
 800aaf6:	da0a      	bge.n	800ab0e <__gethex+0x29e>
 800aaf8:	1a37      	subs	r7, r6, r0
 800aafa:	4621      	mov	r1, r4
 800aafc:	ee18 0a10 	vmov	r0, s16
 800ab00:	463a      	mov	r2, r7
 800ab02:	f000 fc3f 	bl	800b384 <__lshift>
 800ab06:	1bed      	subs	r5, r5, r7
 800ab08:	4604      	mov	r4, r0
 800ab0a:	f100 0914 	add.w	r9, r0, #20
 800ab0e:	f04f 0a00 	mov.w	sl, #0
 800ab12:	e7ae      	b.n	800aa72 <__gethex+0x202>
 800ab14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ab18:	42a8      	cmp	r0, r5
 800ab1a:	dd72      	ble.n	800ac02 <__gethex+0x392>
 800ab1c:	1b45      	subs	r5, r0, r5
 800ab1e:	42ae      	cmp	r6, r5
 800ab20:	dc36      	bgt.n	800ab90 <__gethex+0x320>
 800ab22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d02a      	beq.n	800ab80 <__gethex+0x310>
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d02c      	beq.n	800ab88 <__gethex+0x318>
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d115      	bne.n	800ab5e <__gethex+0x2ee>
 800ab32:	42ae      	cmp	r6, r5
 800ab34:	d113      	bne.n	800ab5e <__gethex+0x2ee>
 800ab36:	2e01      	cmp	r6, #1
 800ab38:	d10b      	bne.n	800ab52 <__gethex+0x2e2>
 800ab3a:	9a04      	ldr	r2, [sp, #16]
 800ab3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	2301      	movs	r3, #1
 800ab44:	6123      	str	r3, [r4, #16]
 800ab46:	f8c9 3000 	str.w	r3, [r9]
 800ab4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab4c:	2762      	movs	r7, #98	; 0x62
 800ab4e:	601c      	str	r4, [r3, #0]
 800ab50:	e723      	b.n	800a99a <__gethex+0x12a>
 800ab52:	1e71      	subs	r1, r6, #1
 800ab54:	4620      	mov	r0, r4
 800ab56:	f000 fe53 	bl	800b800 <__any_on>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d1ed      	bne.n	800ab3a <__gethex+0x2ca>
 800ab5e:	ee18 0a10 	vmov	r0, s16
 800ab62:	4621      	mov	r1, r4
 800ab64:	f000 f9f2 	bl	800af4c <_Bfree>
 800ab68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	2750      	movs	r7, #80	; 0x50
 800ab70:	e713      	b.n	800a99a <__gethex+0x12a>
 800ab72:	bf00      	nop
 800ab74:	0800f694 	.word	0x0800f694
 800ab78:	0800f5b4 	.word	0x0800f5b4
 800ab7c:	0800f628 	.word	0x0800f628
 800ab80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1eb      	bne.n	800ab5e <__gethex+0x2ee>
 800ab86:	e7d8      	b.n	800ab3a <__gethex+0x2ca>
 800ab88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1d5      	bne.n	800ab3a <__gethex+0x2ca>
 800ab8e:	e7e6      	b.n	800ab5e <__gethex+0x2ee>
 800ab90:	1e6f      	subs	r7, r5, #1
 800ab92:	f1ba 0f00 	cmp.w	sl, #0
 800ab96:	d131      	bne.n	800abfc <__gethex+0x38c>
 800ab98:	b127      	cbz	r7, 800aba4 <__gethex+0x334>
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fe2f 	bl	800b800 <__any_on>
 800aba2:	4682      	mov	sl, r0
 800aba4:	117b      	asrs	r3, r7, #5
 800aba6:	2101      	movs	r1, #1
 800aba8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800abac:	f007 071f 	and.w	r7, r7, #31
 800abb0:	fa01 f707 	lsl.w	r7, r1, r7
 800abb4:	421f      	tst	r7, r3
 800abb6:	4629      	mov	r1, r5
 800abb8:	4620      	mov	r0, r4
 800abba:	bf18      	it	ne
 800abbc:	f04a 0a02 	orrne.w	sl, sl, #2
 800abc0:	1b76      	subs	r6, r6, r5
 800abc2:	f7ff fdee 	bl	800a7a2 <rshift>
 800abc6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800abca:	2702      	movs	r7, #2
 800abcc:	f1ba 0f00 	cmp.w	sl, #0
 800abd0:	d048      	beq.n	800ac64 <__gethex+0x3f4>
 800abd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d015      	beq.n	800ac06 <__gethex+0x396>
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d017      	beq.n	800ac0e <__gethex+0x39e>
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d109      	bne.n	800abf6 <__gethex+0x386>
 800abe2:	f01a 0f02 	tst.w	sl, #2
 800abe6:	d006      	beq.n	800abf6 <__gethex+0x386>
 800abe8:	f8d9 0000 	ldr.w	r0, [r9]
 800abec:	ea4a 0a00 	orr.w	sl, sl, r0
 800abf0:	f01a 0f01 	tst.w	sl, #1
 800abf4:	d10e      	bne.n	800ac14 <__gethex+0x3a4>
 800abf6:	f047 0710 	orr.w	r7, r7, #16
 800abfa:	e033      	b.n	800ac64 <__gethex+0x3f4>
 800abfc:	f04f 0a01 	mov.w	sl, #1
 800ac00:	e7d0      	b.n	800aba4 <__gethex+0x334>
 800ac02:	2701      	movs	r7, #1
 800ac04:	e7e2      	b.n	800abcc <__gethex+0x35c>
 800ac06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac08:	f1c3 0301 	rsb	r3, r3, #1
 800ac0c:	9315      	str	r3, [sp, #84]	; 0x54
 800ac0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d0f0      	beq.n	800abf6 <__gethex+0x386>
 800ac14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac18:	f104 0314 	add.w	r3, r4, #20
 800ac1c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac20:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac24:	f04f 0c00 	mov.w	ip, #0
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac2e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ac32:	d01c      	beq.n	800ac6e <__gethex+0x3fe>
 800ac34:	3201      	adds	r2, #1
 800ac36:	6002      	str	r2, [r0, #0]
 800ac38:	2f02      	cmp	r7, #2
 800ac3a:	f104 0314 	add.w	r3, r4, #20
 800ac3e:	d13f      	bne.n	800acc0 <__gethex+0x450>
 800ac40:	f8d8 2000 	ldr.w	r2, [r8]
 800ac44:	3a01      	subs	r2, #1
 800ac46:	42b2      	cmp	r2, r6
 800ac48:	d10a      	bne.n	800ac60 <__gethex+0x3f0>
 800ac4a:	1171      	asrs	r1, r6, #5
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac52:	f006 061f 	and.w	r6, r6, #31
 800ac56:	fa02 f606 	lsl.w	r6, r2, r6
 800ac5a:	421e      	tst	r6, r3
 800ac5c:	bf18      	it	ne
 800ac5e:	4617      	movne	r7, r2
 800ac60:	f047 0720 	orr.w	r7, r7, #32
 800ac64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac66:	601c      	str	r4, [r3, #0]
 800ac68:	9b04      	ldr	r3, [sp, #16]
 800ac6a:	601d      	str	r5, [r3, #0]
 800ac6c:	e695      	b.n	800a99a <__gethex+0x12a>
 800ac6e:	4299      	cmp	r1, r3
 800ac70:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac74:	d8d8      	bhi.n	800ac28 <__gethex+0x3b8>
 800ac76:	68a3      	ldr	r3, [r4, #8]
 800ac78:	459b      	cmp	fp, r3
 800ac7a:	db19      	blt.n	800acb0 <__gethex+0x440>
 800ac7c:	6861      	ldr	r1, [r4, #4]
 800ac7e:	ee18 0a10 	vmov	r0, s16
 800ac82:	3101      	adds	r1, #1
 800ac84:	f000 f922 	bl	800aecc <_Balloc>
 800ac88:	4681      	mov	r9, r0
 800ac8a:	b918      	cbnz	r0, 800ac94 <__gethex+0x424>
 800ac8c:	4b1a      	ldr	r3, [pc, #104]	; (800acf8 <__gethex+0x488>)
 800ac8e:	4602      	mov	r2, r0
 800ac90:	2184      	movs	r1, #132	; 0x84
 800ac92:	e6a8      	b.n	800a9e6 <__gethex+0x176>
 800ac94:	6922      	ldr	r2, [r4, #16]
 800ac96:	3202      	adds	r2, #2
 800ac98:	f104 010c 	add.w	r1, r4, #12
 800ac9c:	0092      	lsls	r2, r2, #2
 800ac9e:	300c      	adds	r0, #12
 800aca0:	f7fc ffbe 	bl	8007c20 <memcpy>
 800aca4:	4621      	mov	r1, r4
 800aca6:	ee18 0a10 	vmov	r0, s16
 800acaa:	f000 f94f 	bl	800af4c <_Bfree>
 800acae:	464c      	mov	r4, r9
 800acb0:	6923      	ldr	r3, [r4, #16]
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acb8:	6122      	str	r2, [r4, #16]
 800acba:	2201      	movs	r2, #1
 800acbc:	615a      	str	r2, [r3, #20]
 800acbe:	e7bb      	b.n	800ac38 <__gethex+0x3c8>
 800acc0:	6922      	ldr	r2, [r4, #16]
 800acc2:	455a      	cmp	r2, fp
 800acc4:	dd0b      	ble.n	800acde <__gethex+0x46e>
 800acc6:	2101      	movs	r1, #1
 800acc8:	4620      	mov	r0, r4
 800acca:	f7ff fd6a 	bl	800a7a2 <rshift>
 800acce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acd2:	3501      	adds	r5, #1
 800acd4:	42ab      	cmp	r3, r5
 800acd6:	f6ff aed0 	blt.w	800aa7a <__gethex+0x20a>
 800acda:	2701      	movs	r7, #1
 800acdc:	e7c0      	b.n	800ac60 <__gethex+0x3f0>
 800acde:	f016 061f 	ands.w	r6, r6, #31
 800ace2:	d0fa      	beq.n	800acda <__gethex+0x46a>
 800ace4:	449a      	add	sl, r3
 800ace6:	f1c6 0620 	rsb	r6, r6, #32
 800acea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800acee:	f000 f9e3 	bl	800b0b8 <__hi0bits>
 800acf2:	42b0      	cmp	r0, r6
 800acf4:	dbe7      	blt.n	800acc6 <__gethex+0x456>
 800acf6:	e7f0      	b.n	800acda <__gethex+0x46a>
 800acf8:	0800f5b4 	.word	0x0800f5b4

0800acfc <L_shift>:
 800acfc:	f1c2 0208 	rsb	r2, r2, #8
 800ad00:	0092      	lsls	r2, r2, #2
 800ad02:	b570      	push	{r4, r5, r6, lr}
 800ad04:	f1c2 0620 	rsb	r6, r2, #32
 800ad08:	6843      	ldr	r3, [r0, #4]
 800ad0a:	6804      	ldr	r4, [r0, #0]
 800ad0c:	fa03 f506 	lsl.w	r5, r3, r6
 800ad10:	432c      	orrs	r4, r5
 800ad12:	40d3      	lsrs	r3, r2
 800ad14:	6004      	str	r4, [r0, #0]
 800ad16:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad1a:	4288      	cmp	r0, r1
 800ad1c:	d3f4      	bcc.n	800ad08 <L_shift+0xc>
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}

0800ad20 <__match>:
 800ad20:	b530      	push	{r4, r5, lr}
 800ad22:	6803      	ldr	r3, [r0, #0]
 800ad24:	3301      	adds	r3, #1
 800ad26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad2a:	b914      	cbnz	r4, 800ad32 <__match+0x12>
 800ad2c:	6003      	str	r3, [r0, #0]
 800ad2e:	2001      	movs	r0, #1
 800ad30:	bd30      	pop	{r4, r5, pc}
 800ad32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ad3a:	2d19      	cmp	r5, #25
 800ad3c:	bf98      	it	ls
 800ad3e:	3220      	addls	r2, #32
 800ad40:	42a2      	cmp	r2, r4
 800ad42:	d0f0      	beq.n	800ad26 <__match+0x6>
 800ad44:	2000      	movs	r0, #0
 800ad46:	e7f3      	b.n	800ad30 <__match+0x10>

0800ad48 <__hexnan>:
 800ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4c:	680b      	ldr	r3, [r1, #0]
 800ad4e:	6801      	ldr	r1, [r0, #0]
 800ad50:	115e      	asrs	r6, r3, #5
 800ad52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad56:	f013 031f 	ands.w	r3, r3, #31
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	bf18      	it	ne
 800ad5e:	3604      	addne	r6, #4
 800ad60:	2500      	movs	r5, #0
 800ad62:	1f37      	subs	r7, r6, #4
 800ad64:	4682      	mov	sl, r0
 800ad66:	4690      	mov	r8, r2
 800ad68:	9301      	str	r3, [sp, #4]
 800ad6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad6e:	46b9      	mov	r9, r7
 800ad70:	463c      	mov	r4, r7
 800ad72:	9502      	str	r5, [sp, #8]
 800ad74:	46ab      	mov	fp, r5
 800ad76:	784a      	ldrb	r2, [r1, #1]
 800ad78:	1c4b      	adds	r3, r1, #1
 800ad7a:	9303      	str	r3, [sp, #12]
 800ad7c:	b342      	cbz	r2, 800add0 <__hexnan+0x88>
 800ad7e:	4610      	mov	r0, r2
 800ad80:	9105      	str	r1, [sp, #20]
 800ad82:	9204      	str	r2, [sp, #16]
 800ad84:	f7ff fd5f 	bl	800a846 <__hexdig_fun>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d14f      	bne.n	800ae2c <__hexnan+0xe4>
 800ad8c:	9a04      	ldr	r2, [sp, #16]
 800ad8e:	9905      	ldr	r1, [sp, #20]
 800ad90:	2a20      	cmp	r2, #32
 800ad92:	d818      	bhi.n	800adc6 <__hexnan+0x7e>
 800ad94:	9b02      	ldr	r3, [sp, #8]
 800ad96:	459b      	cmp	fp, r3
 800ad98:	dd13      	ble.n	800adc2 <__hexnan+0x7a>
 800ad9a:	454c      	cmp	r4, r9
 800ad9c:	d206      	bcs.n	800adac <__hexnan+0x64>
 800ad9e:	2d07      	cmp	r5, #7
 800ada0:	dc04      	bgt.n	800adac <__hexnan+0x64>
 800ada2:	462a      	mov	r2, r5
 800ada4:	4649      	mov	r1, r9
 800ada6:	4620      	mov	r0, r4
 800ada8:	f7ff ffa8 	bl	800acfc <L_shift>
 800adac:	4544      	cmp	r4, r8
 800adae:	d950      	bls.n	800ae52 <__hexnan+0x10a>
 800adb0:	2300      	movs	r3, #0
 800adb2:	f1a4 0904 	sub.w	r9, r4, #4
 800adb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800adba:	f8cd b008 	str.w	fp, [sp, #8]
 800adbe:	464c      	mov	r4, r9
 800adc0:	461d      	mov	r5, r3
 800adc2:	9903      	ldr	r1, [sp, #12]
 800adc4:	e7d7      	b.n	800ad76 <__hexnan+0x2e>
 800adc6:	2a29      	cmp	r2, #41	; 0x29
 800adc8:	d156      	bne.n	800ae78 <__hexnan+0x130>
 800adca:	3102      	adds	r1, #2
 800adcc:	f8ca 1000 	str.w	r1, [sl]
 800add0:	f1bb 0f00 	cmp.w	fp, #0
 800add4:	d050      	beq.n	800ae78 <__hexnan+0x130>
 800add6:	454c      	cmp	r4, r9
 800add8:	d206      	bcs.n	800ade8 <__hexnan+0xa0>
 800adda:	2d07      	cmp	r5, #7
 800addc:	dc04      	bgt.n	800ade8 <__hexnan+0xa0>
 800adde:	462a      	mov	r2, r5
 800ade0:	4649      	mov	r1, r9
 800ade2:	4620      	mov	r0, r4
 800ade4:	f7ff ff8a 	bl	800acfc <L_shift>
 800ade8:	4544      	cmp	r4, r8
 800adea:	d934      	bls.n	800ae56 <__hexnan+0x10e>
 800adec:	f1a8 0204 	sub.w	r2, r8, #4
 800adf0:	4623      	mov	r3, r4
 800adf2:	f853 1b04 	ldr.w	r1, [r3], #4
 800adf6:	f842 1f04 	str.w	r1, [r2, #4]!
 800adfa:	429f      	cmp	r7, r3
 800adfc:	d2f9      	bcs.n	800adf2 <__hexnan+0xaa>
 800adfe:	1b3b      	subs	r3, r7, r4
 800ae00:	f023 0303 	bic.w	r3, r3, #3
 800ae04:	3304      	adds	r3, #4
 800ae06:	3401      	adds	r4, #1
 800ae08:	3e03      	subs	r6, #3
 800ae0a:	42b4      	cmp	r4, r6
 800ae0c:	bf88      	it	hi
 800ae0e:	2304      	movhi	r3, #4
 800ae10:	4443      	add	r3, r8
 800ae12:	2200      	movs	r2, #0
 800ae14:	f843 2b04 	str.w	r2, [r3], #4
 800ae18:	429f      	cmp	r7, r3
 800ae1a:	d2fb      	bcs.n	800ae14 <__hexnan+0xcc>
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	b91b      	cbnz	r3, 800ae28 <__hexnan+0xe0>
 800ae20:	4547      	cmp	r7, r8
 800ae22:	d127      	bne.n	800ae74 <__hexnan+0x12c>
 800ae24:	2301      	movs	r3, #1
 800ae26:	603b      	str	r3, [r7, #0]
 800ae28:	2005      	movs	r0, #5
 800ae2a:	e026      	b.n	800ae7a <__hexnan+0x132>
 800ae2c:	3501      	adds	r5, #1
 800ae2e:	2d08      	cmp	r5, #8
 800ae30:	f10b 0b01 	add.w	fp, fp, #1
 800ae34:	dd06      	ble.n	800ae44 <__hexnan+0xfc>
 800ae36:	4544      	cmp	r4, r8
 800ae38:	d9c3      	bls.n	800adc2 <__hexnan+0x7a>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae40:	2501      	movs	r5, #1
 800ae42:	3c04      	subs	r4, #4
 800ae44:	6822      	ldr	r2, [r4, #0]
 800ae46:	f000 000f 	and.w	r0, r0, #15
 800ae4a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ae4e:	6022      	str	r2, [r4, #0]
 800ae50:	e7b7      	b.n	800adc2 <__hexnan+0x7a>
 800ae52:	2508      	movs	r5, #8
 800ae54:	e7b5      	b.n	800adc2 <__hexnan+0x7a>
 800ae56:	9b01      	ldr	r3, [sp, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d0df      	beq.n	800ae1c <__hexnan+0xd4>
 800ae5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae60:	f1c3 0320 	rsb	r3, r3, #32
 800ae64:	fa22 f303 	lsr.w	r3, r2, r3
 800ae68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae6c:	401a      	ands	r2, r3
 800ae6e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ae72:	e7d3      	b.n	800ae1c <__hexnan+0xd4>
 800ae74:	3f04      	subs	r7, #4
 800ae76:	e7d1      	b.n	800ae1c <__hexnan+0xd4>
 800ae78:	2004      	movs	r0, #4
 800ae7a:	b007      	add	sp, #28
 800ae7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae80 <_localeconv_r>:
 800ae80:	4800      	ldr	r0, [pc, #0]	; (800ae84 <_localeconv_r+0x4>)
 800ae82:	4770      	bx	lr
 800ae84:	20000170 	.word	0x20000170

0800ae88 <__retarget_lock_init_recursive>:
 800ae88:	4770      	bx	lr

0800ae8a <__retarget_lock_acquire_recursive>:
 800ae8a:	4770      	bx	lr

0800ae8c <__retarget_lock_release_recursive>:
 800ae8c:	4770      	bx	lr

0800ae8e <__ascii_mbtowc>:
 800ae8e:	b082      	sub	sp, #8
 800ae90:	b901      	cbnz	r1, 800ae94 <__ascii_mbtowc+0x6>
 800ae92:	a901      	add	r1, sp, #4
 800ae94:	b142      	cbz	r2, 800aea8 <__ascii_mbtowc+0x1a>
 800ae96:	b14b      	cbz	r3, 800aeac <__ascii_mbtowc+0x1e>
 800ae98:	7813      	ldrb	r3, [r2, #0]
 800ae9a:	600b      	str	r3, [r1, #0]
 800ae9c:	7812      	ldrb	r2, [r2, #0]
 800ae9e:	1e10      	subs	r0, r2, #0
 800aea0:	bf18      	it	ne
 800aea2:	2001      	movne	r0, #1
 800aea4:	b002      	add	sp, #8
 800aea6:	4770      	bx	lr
 800aea8:	4610      	mov	r0, r2
 800aeaa:	e7fb      	b.n	800aea4 <__ascii_mbtowc+0x16>
 800aeac:	f06f 0001 	mvn.w	r0, #1
 800aeb0:	e7f8      	b.n	800aea4 <__ascii_mbtowc+0x16>
	...

0800aeb4 <__malloc_lock>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	; (800aebc <__malloc_lock+0x8>)
 800aeb6:	f7ff bfe8 	b.w	800ae8a <__retarget_lock_acquire_recursive>
 800aeba:	bf00      	nop
 800aebc:	20000d48 	.word	0x20000d48

0800aec0 <__malloc_unlock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__malloc_unlock+0x8>)
 800aec2:	f7ff bfe3 	b.w	800ae8c <__retarget_lock_release_recursive>
 800aec6:	bf00      	nop
 800aec8:	20000d48 	.word	0x20000d48

0800aecc <_Balloc>:
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aed0:	4604      	mov	r4, r0
 800aed2:	460d      	mov	r5, r1
 800aed4:	b976      	cbnz	r6, 800aef4 <_Balloc+0x28>
 800aed6:	2010      	movs	r0, #16
 800aed8:	f7fc fe9a 	bl	8007c10 <malloc>
 800aedc:	4602      	mov	r2, r0
 800aede:	6260      	str	r0, [r4, #36]	; 0x24
 800aee0:	b920      	cbnz	r0, 800aeec <_Balloc+0x20>
 800aee2:	4b18      	ldr	r3, [pc, #96]	; (800af44 <_Balloc+0x78>)
 800aee4:	4818      	ldr	r0, [pc, #96]	; (800af48 <_Balloc+0x7c>)
 800aee6:	2166      	movs	r1, #102	; 0x66
 800aee8:	f001 f8f8 	bl	800c0dc <__assert_func>
 800aeec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aef0:	6006      	str	r6, [r0, #0]
 800aef2:	60c6      	str	r6, [r0, #12]
 800aef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aef6:	68f3      	ldr	r3, [r6, #12]
 800aef8:	b183      	cbz	r3, 800af1c <_Balloc+0x50>
 800aefa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af02:	b9b8      	cbnz	r0, 800af34 <_Balloc+0x68>
 800af04:	2101      	movs	r1, #1
 800af06:	fa01 f605 	lsl.w	r6, r1, r5
 800af0a:	1d72      	adds	r2, r6, #5
 800af0c:	0092      	lsls	r2, r2, #2
 800af0e:	4620      	mov	r0, r4
 800af10:	f000 fc97 	bl	800b842 <_calloc_r>
 800af14:	b160      	cbz	r0, 800af30 <_Balloc+0x64>
 800af16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af1a:	e00e      	b.n	800af3a <_Balloc+0x6e>
 800af1c:	2221      	movs	r2, #33	; 0x21
 800af1e:	2104      	movs	r1, #4
 800af20:	4620      	mov	r0, r4
 800af22:	f000 fc8e 	bl	800b842 <_calloc_r>
 800af26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af28:	60f0      	str	r0, [r6, #12]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e4      	bne.n	800aefa <_Balloc+0x2e>
 800af30:	2000      	movs	r0, #0
 800af32:	bd70      	pop	{r4, r5, r6, pc}
 800af34:	6802      	ldr	r2, [r0, #0]
 800af36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af3a:	2300      	movs	r3, #0
 800af3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af40:	e7f7      	b.n	800af32 <_Balloc+0x66>
 800af42:	bf00      	nop
 800af44:	0800f53e 	.word	0x0800f53e
 800af48:	0800f6a8 	.word	0x0800f6a8

0800af4c <_Bfree>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af50:	4605      	mov	r5, r0
 800af52:	460c      	mov	r4, r1
 800af54:	b976      	cbnz	r6, 800af74 <_Bfree+0x28>
 800af56:	2010      	movs	r0, #16
 800af58:	f7fc fe5a 	bl	8007c10 <malloc>
 800af5c:	4602      	mov	r2, r0
 800af5e:	6268      	str	r0, [r5, #36]	; 0x24
 800af60:	b920      	cbnz	r0, 800af6c <_Bfree+0x20>
 800af62:	4b09      	ldr	r3, [pc, #36]	; (800af88 <_Bfree+0x3c>)
 800af64:	4809      	ldr	r0, [pc, #36]	; (800af8c <_Bfree+0x40>)
 800af66:	218a      	movs	r1, #138	; 0x8a
 800af68:	f001 f8b8 	bl	800c0dc <__assert_func>
 800af6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af70:	6006      	str	r6, [r0, #0]
 800af72:	60c6      	str	r6, [r0, #12]
 800af74:	b13c      	cbz	r4, 800af86 <_Bfree+0x3a>
 800af76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af78:	6862      	ldr	r2, [r4, #4]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af80:	6021      	str	r1, [r4, #0]
 800af82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	0800f53e 	.word	0x0800f53e
 800af8c:	0800f6a8 	.word	0x0800f6a8

0800af90 <__multadd>:
 800af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af94:	690e      	ldr	r6, [r1, #16]
 800af96:	4607      	mov	r7, r0
 800af98:	4698      	mov	r8, r3
 800af9a:	460c      	mov	r4, r1
 800af9c:	f101 0014 	add.w	r0, r1, #20
 800afa0:	2300      	movs	r3, #0
 800afa2:	6805      	ldr	r5, [r0, #0]
 800afa4:	b2a9      	uxth	r1, r5
 800afa6:	fb02 8101 	mla	r1, r2, r1, r8
 800afaa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800afae:	0c2d      	lsrs	r5, r5, #16
 800afb0:	fb02 c505 	mla	r5, r2, r5, ip
 800afb4:	b289      	uxth	r1, r1
 800afb6:	3301      	adds	r3, #1
 800afb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800afbc:	429e      	cmp	r6, r3
 800afbe:	f840 1b04 	str.w	r1, [r0], #4
 800afc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800afc6:	dcec      	bgt.n	800afa2 <__multadd+0x12>
 800afc8:	f1b8 0f00 	cmp.w	r8, #0
 800afcc:	d022      	beq.n	800b014 <__multadd+0x84>
 800afce:	68a3      	ldr	r3, [r4, #8]
 800afd0:	42b3      	cmp	r3, r6
 800afd2:	dc19      	bgt.n	800b008 <__multadd+0x78>
 800afd4:	6861      	ldr	r1, [r4, #4]
 800afd6:	4638      	mov	r0, r7
 800afd8:	3101      	adds	r1, #1
 800afda:	f7ff ff77 	bl	800aecc <_Balloc>
 800afde:	4605      	mov	r5, r0
 800afe0:	b928      	cbnz	r0, 800afee <__multadd+0x5e>
 800afe2:	4602      	mov	r2, r0
 800afe4:	4b0d      	ldr	r3, [pc, #52]	; (800b01c <__multadd+0x8c>)
 800afe6:	480e      	ldr	r0, [pc, #56]	; (800b020 <__multadd+0x90>)
 800afe8:	21b5      	movs	r1, #181	; 0xb5
 800afea:	f001 f877 	bl	800c0dc <__assert_func>
 800afee:	6922      	ldr	r2, [r4, #16]
 800aff0:	3202      	adds	r2, #2
 800aff2:	f104 010c 	add.w	r1, r4, #12
 800aff6:	0092      	lsls	r2, r2, #2
 800aff8:	300c      	adds	r0, #12
 800affa:	f7fc fe11 	bl	8007c20 <memcpy>
 800affe:	4621      	mov	r1, r4
 800b000:	4638      	mov	r0, r7
 800b002:	f7ff ffa3 	bl	800af4c <_Bfree>
 800b006:	462c      	mov	r4, r5
 800b008:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b00c:	3601      	adds	r6, #1
 800b00e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b012:	6126      	str	r6, [r4, #16]
 800b014:	4620      	mov	r0, r4
 800b016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b01a:	bf00      	nop
 800b01c:	0800f5b4 	.word	0x0800f5b4
 800b020:	0800f6a8 	.word	0x0800f6a8

0800b024 <__s2b>:
 800b024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b028:	460c      	mov	r4, r1
 800b02a:	4615      	mov	r5, r2
 800b02c:	461f      	mov	r7, r3
 800b02e:	2209      	movs	r2, #9
 800b030:	3308      	adds	r3, #8
 800b032:	4606      	mov	r6, r0
 800b034:	fb93 f3f2 	sdiv	r3, r3, r2
 800b038:	2100      	movs	r1, #0
 800b03a:	2201      	movs	r2, #1
 800b03c:	429a      	cmp	r2, r3
 800b03e:	db09      	blt.n	800b054 <__s2b+0x30>
 800b040:	4630      	mov	r0, r6
 800b042:	f7ff ff43 	bl	800aecc <_Balloc>
 800b046:	b940      	cbnz	r0, 800b05a <__s2b+0x36>
 800b048:	4602      	mov	r2, r0
 800b04a:	4b19      	ldr	r3, [pc, #100]	; (800b0b0 <__s2b+0x8c>)
 800b04c:	4819      	ldr	r0, [pc, #100]	; (800b0b4 <__s2b+0x90>)
 800b04e:	21ce      	movs	r1, #206	; 0xce
 800b050:	f001 f844 	bl	800c0dc <__assert_func>
 800b054:	0052      	lsls	r2, r2, #1
 800b056:	3101      	adds	r1, #1
 800b058:	e7f0      	b.n	800b03c <__s2b+0x18>
 800b05a:	9b08      	ldr	r3, [sp, #32]
 800b05c:	6143      	str	r3, [r0, #20]
 800b05e:	2d09      	cmp	r5, #9
 800b060:	f04f 0301 	mov.w	r3, #1
 800b064:	6103      	str	r3, [r0, #16]
 800b066:	dd16      	ble.n	800b096 <__s2b+0x72>
 800b068:	f104 0909 	add.w	r9, r4, #9
 800b06c:	46c8      	mov	r8, r9
 800b06e:	442c      	add	r4, r5
 800b070:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b074:	4601      	mov	r1, r0
 800b076:	3b30      	subs	r3, #48	; 0x30
 800b078:	220a      	movs	r2, #10
 800b07a:	4630      	mov	r0, r6
 800b07c:	f7ff ff88 	bl	800af90 <__multadd>
 800b080:	45a0      	cmp	r8, r4
 800b082:	d1f5      	bne.n	800b070 <__s2b+0x4c>
 800b084:	f1a5 0408 	sub.w	r4, r5, #8
 800b088:	444c      	add	r4, r9
 800b08a:	1b2d      	subs	r5, r5, r4
 800b08c:	1963      	adds	r3, r4, r5
 800b08e:	42bb      	cmp	r3, r7
 800b090:	db04      	blt.n	800b09c <__s2b+0x78>
 800b092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b096:	340a      	adds	r4, #10
 800b098:	2509      	movs	r5, #9
 800b09a:	e7f6      	b.n	800b08a <__s2b+0x66>
 800b09c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b0a0:	4601      	mov	r1, r0
 800b0a2:	3b30      	subs	r3, #48	; 0x30
 800b0a4:	220a      	movs	r2, #10
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f7ff ff72 	bl	800af90 <__multadd>
 800b0ac:	e7ee      	b.n	800b08c <__s2b+0x68>
 800b0ae:	bf00      	nop
 800b0b0:	0800f5b4 	.word	0x0800f5b4
 800b0b4:	0800f6a8 	.word	0x0800f6a8

0800b0b8 <__hi0bits>:
 800b0b8:	0c03      	lsrs	r3, r0, #16
 800b0ba:	041b      	lsls	r3, r3, #16
 800b0bc:	b9d3      	cbnz	r3, 800b0f4 <__hi0bits+0x3c>
 800b0be:	0400      	lsls	r0, r0, #16
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0c6:	bf04      	itt	eq
 800b0c8:	0200      	lsleq	r0, r0, #8
 800b0ca:	3308      	addeq	r3, #8
 800b0cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0d0:	bf04      	itt	eq
 800b0d2:	0100      	lsleq	r0, r0, #4
 800b0d4:	3304      	addeq	r3, #4
 800b0d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0da:	bf04      	itt	eq
 800b0dc:	0080      	lsleq	r0, r0, #2
 800b0de:	3302      	addeq	r3, #2
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	db05      	blt.n	800b0f0 <__hi0bits+0x38>
 800b0e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0e8:	f103 0301 	add.w	r3, r3, #1
 800b0ec:	bf08      	it	eq
 800b0ee:	2320      	moveq	r3, #32
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	4770      	bx	lr
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e7e4      	b.n	800b0c2 <__hi0bits+0xa>

0800b0f8 <__lo0bits>:
 800b0f8:	6803      	ldr	r3, [r0, #0]
 800b0fa:	f013 0207 	ands.w	r2, r3, #7
 800b0fe:	4601      	mov	r1, r0
 800b100:	d00b      	beq.n	800b11a <__lo0bits+0x22>
 800b102:	07da      	lsls	r2, r3, #31
 800b104:	d424      	bmi.n	800b150 <__lo0bits+0x58>
 800b106:	0798      	lsls	r0, r3, #30
 800b108:	bf49      	itett	mi
 800b10a:	085b      	lsrmi	r3, r3, #1
 800b10c:	089b      	lsrpl	r3, r3, #2
 800b10e:	2001      	movmi	r0, #1
 800b110:	600b      	strmi	r3, [r1, #0]
 800b112:	bf5c      	itt	pl
 800b114:	600b      	strpl	r3, [r1, #0]
 800b116:	2002      	movpl	r0, #2
 800b118:	4770      	bx	lr
 800b11a:	b298      	uxth	r0, r3
 800b11c:	b9b0      	cbnz	r0, 800b14c <__lo0bits+0x54>
 800b11e:	0c1b      	lsrs	r3, r3, #16
 800b120:	2010      	movs	r0, #16
 800b122:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b126:	bf04      	itt	eq
 800b128:	0a1b      	lsreq	r3, r3, #8
 800b12a:	3008      	addeq	r0, #8
 800b12c:	071a      	lsls	r2, r3, #28
 800b12e:	bf04      	itt	eq
 800b130:	091b      	lsreq	r3, r3, #4
 800b132:	3004      	addeq	r0, #4
 800b134:	079a      	lsls	r2, r3, #30
 800b136:	bf04      	itt	eq
 800b138:	089b      	lsreq	r3, r3, #2
 800b13a:	3002      	addeq	r0, #2
 800b13c:	07da      	lsls	r2, r3, #31
 800b13e:	d403      	bmi.n	800b148 <__lo0bits+0x50>
 800b140:	085b      	lsrs	r3, r3, #1
 800b142:	f100 0001 	add.w	r0, r0, #1
 800b146:	d005      	beq.n	800b154 <__lo0bits+0x5c>
 800b148:	600b      	str	r3, [r1, #0]
 800b14a:	4770      	bx	lr
 800b14c:	4610      	mov	r0, r2
 800b14e:	e7e8      	b.n	800b122 <__lo0bits+0x2a>
 800b150:	2000      	movs	r0, #0
 800b152:	4770      	bx	lr
 800b154:	2020      	movs	r0, #32
 800b156:	4770      	bx	lr

0800b158 <__i2b>:
 800b158:	b510      	push	{r4, lr}
 800b15a:	460c      	mov	r4, r1
 800b15c:	2101      	movs	r1, #1
 800b15e:	f7ff feb5 	bl	800aecc <_Balloc>
 800b162:	4602      	mov	r2, r0
 800b164:	b928      	cbnz	r0, 800b172 <__i2b+0x1a>
 800b166:	4b05      	ldr	r3, [pc, #20]	; (800b17c <__i2b+0x24>)
 800b168:	4805      	ldr	r0, [pc, #20]	; (800b180 <__i2b+0x28>)
 800b16a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b16e:	f000 ffb5 	bl	800c0dc <__assert_func>
 800b172:	2301      	movs	r3, #1
 800b174:	6144      	str	r4, [r0, #20]
 800b176:	6103      	str	r3, [r0, #16]
 800b178:	bd10      	pop	{r4, pc}
 800b17a:	bf00      	nop
 800b17c:	0800f5b4 	.word	0x0800f5b4
 800b180:	0800f6a8 	.word	0x0800f6a8

0800b184 <__multiply>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	4614      	mov	r4, r2
 800b18a:	690a      	ldr	r2, [r1, #16]
 800b18c:	6923      	ldr	r3, [r4, #16]
 800b18e:	429a      	cmp	r2, r3
 800b190:	bfb8      	it	lt
 800b192:	460b      	movlt	r3, r1
 800b194:	460d      	mov	r5, r1
 800b196:	bfbc      	itt	lt
 800b198:	4625      	movlt	r5, r4
 800b19a:	461c      	movlt	r4, r3
 800b19c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b1a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b1a4:	68ab      	ldr	r3, [r5, #8]
 800b1a6:	6869      	ldr	r1, [r5, #4]
 800b1a8:	eb0a 0709 	add.w	r7, sl, r9
 800b1ac:	42bb      	cmp	r3, r7
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	bfb8      	it	lt
 800b1b2:	3101      	addlt	r1, #1
 800b1b4:	f7ff fe8a 	bl	800aecc <_Balloc>
 800b1b8:	b930      	cbnz	r0, 800b1c8 <__multiply+0x44>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	4b42      	ldr	r3, [pc, #264]	; (800b2c8 <__multiply+0x144>)
 800b1be:	4843      	ldr	r0, [pc, #268]	; (800b2cc <__multiply+0x148>)
 800b1c0:	f240 115d 	movw	r1, #349	; 0x15d
 800b1c4:	f000 ff8a 	bl	800c0dc <__assert_func>
 800b1c8:	f100 0614 	add.w	r6, r0, #20
 800b1cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b1d0:	4633      	mov	r3, r6
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4543      	cmp	r3, r8
 800b1d6:	d31e      	bcc.n	800b216 <__multiply+0x92>
 800b1d8:	f105 0c14 	add.w	ip, r5, #20
 800b1dc:	f104 0314 	add.w	r3, r4, #20
 800b1e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b1e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b1e8:	9202      	str	r2, [sp, #8]
 800b1ea:	ebac 0205 	sub.w	r2, ip, r5
 800b1ee:	3a15      	subs	r2, #21
 800b1f0:	f022 0203 	bic.w	r2, r2, #3
 800b1f4:	3204      	adds	r2, #4
 800b1f6:	f105 0115 	add.w	r1, r5, #21
 800b1fa:	458c      	cmp	ip, r1
 800b1fc:	bf38      	it	cc
 800b1fe:	2204      	movcc	r2, #4
 800b200:	9201      	str	r2, [sp, #4]
 800b202:	9a02      	ldr	r2, [sp, #8]
 800b204:	9303      	str	r3, [sp, #12]
 800b206:	429a      	cmp	r2, r3
 800b208:	d808      	bhi.n	800b21c <__multiply+0x98>
 800b20a:	2f00      	cmp	r7, #0
 800b20c:	dc55      	bgt.n	800b2ba <__multiply+0x136>
 800b20e:	6107      	str	r7, [r0, #16]
 800b210:	b005      	add	sp, #20
 800b212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b216:	f843 2b04 	str.w	r2, [r3], #4
 800b21a:	e7db      	b.n	800b1d4 <__multiply+0x50>
 800b21c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b220:	f1ba 0f00 	cmp.w	sl, #0
 800b224:	d020      	beq.n	800b268 <__multiply+0xe4>
 800b226:	f105 0e14 	add.w	lr, r5, #20
 800b22a:	46b1      	mov	r9, r6
 800b22c:	2200      	movs	r2, #0
 800b22e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b232:	f8d9 b000 	ldr.w	fp, [r9]
 800b236:	b2a1      	uxth	r1, r4
 800b238:	fa1f fb8b 	uxth.w	fp, fp
 800b23c:	fb0a b101 	mla	r1, sl, r1, fp
 800b240:	4411      	add	r1, r2
 800b242:	f8d9 2000 	ldr.w	r2, [r9]
 800b246:	0c24      	lsrs	r4, r4, #16
 800b248:	0c12      	lsrs	r2, r2, #16
 800b24a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b24e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b252:	b289      	uxth	r1, r1
 800b254:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b258:	45f4      	cmp	ip, lr
 800b25a:	f849 1b04 	str.w	r1, [r9], #4
 800b25e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b262:	d8e4      	bhi.n	800b22e <__multiply+0xaa>
 800b264:	9901      	ldr	r1, [sp, #4]
 800b266:	5072      	str	r2, [r6, r1]
 800b268:	9a03      	ldr	r2, [sp, #12]
 800b26a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b26e:	3304      	adds	r3, #4
 800b270:	f1b9 0f00 	cmp.w	r9, #0
 800b274:	d01f      	beq.n	800b2b6 <__multiply+0x132>
 800b276:	6834      	ldr	r4, [r6, #0]
 800b278:	f105 0114 	add.w	r1, r5, #20
 800b27c:	46b6      	mov	lr, r6
 800b27e:	f04f 0a00 	mov.w	sl, #0
 800b282:	880a      	ldrh	r2, [r1, #0]
 800b284:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b288:	fb09 b202 	mla	r2, r9, r2, fp
 800b28c:	4492      	add	sl, r2
 800b28e:	b2a4      	uxth	r4, r4
 800b290:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b294:	f84e 4b04 	str.w	r4, [lr], #4
 800b298:	f851 4b04 	ldr.w	r4, [r1], #4
 800b29c:	f8be 2000 	ldrh.w	r2, [lr]
 800b2a0:	0c24      	lsrs	r4, r4, #16
 800b2a2:	fb09 2404 	mla	r4, r9, r4, r2
 800b2a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b2aa:	458c      	cmp	ip, r1
 800b2ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b2b0:	d8e7      	bhi.n	800b282 <__multiply+0xfe>
 800b2b2:	9a01      	ldr	r2, [sp, #4]
 800b2b4:	50b4      	str	r4, [r6, r2]
 800b2b6:	3604      	adds	r6, #4
 800b2b8:	e7a3      	b.n	800b202 <__multiply+0x7e>
 800b2ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1a5      	bne.n	800b20e <__multiply+0x8a>
 800b2c2:	3f01      	subs	r7, #1
 800b2c4:	e7a1      	b.n	800b20a <__multiply+0x86>
 800b2c6:	bf00      	nop
 800b2c8:	0800f5b4 	.word	0x0800f5b4
 800b2cc:	0800f6a8 	.word	0x0800f6a8

0800b2d0 <__pow5mult>:
 800b2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	4615      	mov	r5, r2
 800b2d6:	f012 0203 	ands.w	r2, r2, #3
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	d007      	beq.n	800b2f0 <__pow5mult+0x20>
 800b2e0:	4c25      	ldr	r4, [pc, #148]	; (800b378 <__pow5mult+0xa8>)
 800b2e2:	3a01      	subs	r2, #1
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2ea:	f7ff fe51 	bl	800af90 <__multadd>
 800b2ee:	4607      	mov	r7, r0
 800b2f0:	10ad      	asrs	r5, r5, #2
 800b2f2:	d03d      	beq.n	800b370 <__pow5mult+0xa0>
 800b2f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2f6:	b97c      	cbnz	r4, 800b318 <__pow5mult+0x48>
 800b2f8:	2010      	movs	r0, #16
 800b2fa:	f7fc fc89 	bl	8007c10 <malloc>
 800b2fe:	4602      	mov	r2, r0
 800b300:	6270      	str	r0, [r6, #36]	; 0x24
 800b302:	b928      	cbnz	r0, 800b310 <__pow5mult+0x40>
 800b304:	4b1d      	ldr	r3, [pc, #116]	; (800b37c <__pow5mult+0xac>)
 800b306:	481e      	ldr	r0, [pc, #120]	; (800b380 <__pow5mult+0xb0>)
 800b308:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b30c:	f000 fee6 	bl	800c0dc <__assert_func>
 800b310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b314:	6004      	str	r4, [r0, #0]
 800b316:	60c4      	str	r4, [r0, #12]
 800b318:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b31c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b320:	b94c      	cbnz	r4, 800b336 <__pow5mult+0x66>
 800b322:	f240 2171 	movw	r1, #625	; 0x271
 800b326:	4630      	mov	r0, r6
 800b328:	f7ff ff16 	bl	800b158 <__i2b>
 800b32c:	2300      	movs	r3, #0
 800b32e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b332:	4604      	mov	r4, r0
 800b334:	6003      	str	r3, [r0, #0]
 800b336:	f04f 0900 	mov.w	r9, #0
 800b33a:	07eb      	lsls	r3, r5, #31
 800b33c:	d50a      	bpl.n	800b354 <__pow5mult+0x84>
 800b33e:	4639      	mov	r1, r7
 800b340:	4622      	mov	r2, r4
 800b342:	4630      	mov	r0, r6
 800b344:	f7ff ff1e 	bl	800b184 <__multiply>
 800b348:	4639      	mov	r1, r7
 800b34a:	4680      	mov	r8, r0
 800b34c:	4630      	mov	r0, r6
 800b34e:	f7ff fdfd 	bl	800af4c <_Bfree>
 800b352:	4647      	mov	r7, r8
 800b354:	106d      	asrs	r5, r5, #1
 800b356:	d00b      	beq.n	800b370 <__pow5mult+0xa0>
 800b358:	6820      	ldr	r0, [r4, #0]
 800b35a:	b938      	cbnz	r0, 800b36c <__pow5mult+0x9c>
 800b35c:	4622      	mov	r2, r4
 800b35e:	4621      	mov	r1, r4
 800b360:	4630      	mov	r0, r6
 800b362:	f7ff ff0f 	bl	800b184 <__multiply>
 800b366:	6020      	str	r0, [r4, #0]
 800b368:	f8c0 9000 	str.w	r9, [r0]
 800b36c:	4604      	mov	r4, r0
 800b36e:	e7e4      	b.n	800b33a <__pow5mult+0x6a>
 800b370:	4638      	mov	r0, r7
 800b372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b376:	bf00      	nop
 800b378:	0800f7f8 	.word	0x0800f7f8
 800b37c:	0800f53e 	.word	0x0800f53e
 800b380:	0800f6a8 	.word	0x0800f6a8

0800b384 <__lshift>:
 800b384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b388:	460c      	mov	r4, r1
 800b38a:	6849      	ldr	r1, [r1, #4]
 800b38c:	6923      	ldr	r3, [r4, #16]
 800b38e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	4607      	mov	r7, r0
 800b396:	4691      	mov	r9, r2
 800b398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b39c:	f108 0601 	add.w	r6, r8, #1
 800b3a0:	42b3      	cmp	r3, r6
 800b3a2:	db0b      	blt.n	800b3bc <__lshift+0x38>
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f7ff fd91 	bl	800aecc <_Balloc>
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	b948      	cbnz	r0, 800b3c2 <__lshift+0x3e>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	4b28      	ldr	r3, [pc, #160]	; (800b454 <__lshift+0xd0>)
 800b3b2:	4829      	ldr	r0, [pc, #164]	; (800b458 <__lshift+0xd4>)
 800b3b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3b8:	f000 fe90 	bl	800c0dc <__assert_func>
 800b3bc:	3101      	adds	r1, #1
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	e7ee      	b.n	800b3a0 <__lshift+0x1c>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f100 0114 	add.w	r1, r0, #20
 800b3c8:	f100 0210 	add.w	r2, r0, #16
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	4553      	cmp	r3, sl
 800b3d0:	db33      	blt.n	800b43a <__lshift+0xb6>
 800b3d2:	6920      	ldr	r0, [r4, #16]
 800b3d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3d8:	f104 0314 	add.w	r3, r4, #20
 800b3dc:	f019 091f 	ands.w	r9, r9, #31
 800b3e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3e8:	d02b      	beq.n	800b442 <__lshift+0xbe>
 800b3ea:	f1c9 0e20 	rsb	lr, r9, #32
 800b3ee:	468a      	mov	sl, r1
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	6818      	ldr	r0, [r3, #0]
 800b3f4:	fa00 f009 	lsl.w	r0, r0, r9
 800b3f8:	4302      	orrs	r2, r0
 800b3fa:	f84a 2b04 	str.w	r2, [sl], #4
 800b3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b402:	459c      	cmp	ip, r3
 800b404:	fa22 f20e 	lsr.w	r2, r2, lr
 800b408:	d8f3      	bhi.n	800b3f2 <__lshift+0x6e>
 800b40a:	ebac 0304 	sub.w	r3, ip, r4
 800b40e:	3b15      	subs	r3, #21
 800b410:	f023 0303 	bic.w	r3, r3, #3
 800b414:	3304      	adds	r3, #4
 800b416:	f104 0015 	add.w	r0, r4, #21
 800b41a:	4584      	cmp	ip, r0
 800b41c:	bf38      	it	cc
 800b41e:	2304      	movcc	r3, #4
 800b420:	50ca      	str	r2, [r1, r3]
 800b422:	b10a      	cbz	r2, 800b428 <__lshift+0xa4>
 800b424:	f108 0602 	add.w	r6, r8, #2
 800b428:	3e01      	subs	r6, #1
 800b42a:	4638      	mov	r0, r7
 800b42c:	612e      	str	r6, [r5, #16]
 800b42e:	4621      	mov	r1, r4
 800b430:	f7ff fd8c 	bl	800af4c <_Bfree>
 800b434:	4628      	mov	r0, r5
 800b436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b43e:	3301      	adds	r3, #1
 800b440:	e7c5      	b.n	800b3ce <__lshift+0x4a>
 800b442:	3904      	subs	r1, #4
 800b444:	f853 2b04 	ldr.w	r2, [r3], #4
 800b448:	f841 2f04 	str.w	r2, [r1, #4]!
 800b44c:	459c      	cmp	ip, r3
 800b44e:	d8f9      	bhi.n	800b444 <__lshift+0xc0>
 800b450:	e7ea      	b.n	800b428 <__lshift+0xa4>
 800b452:	bf00      	nop
 800b454:	0800f5b4 	.word	0x0800f5b4
 800b458:	0800f6a8 	.word	0x0800f6a8

0800b45c <__mcmp>:
 800b45c:	b530      	push	{r4, r5, lr}
 800b45e:	6902      	ldr	r2, [r0, #16]
 800b460:	690c      	ldr	r4, [r1, #16]
 800b462:	1b12      	subs	r2, r2, r4
 800b464:	d10e      	bne.n	800b484 <__mcmp+0x28>
 800b466:	f100 0314 	add.w	r3, r0, #20
 800b46a:	3114      	adds	r1, #20
 800b46c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b470:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b474:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b478:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b47c:	42a5      	cmp	r5, r4
 800b47e:	d003      	beq.n	800b488 <__mcmp+0x2c>
 800b480:	d305      	bcc.n	800b48e <__mcmp+0x32>
 800b482:	2201      	movs	r2, #1
 800b484:	4610      	mov	r0, r2
 800b486:	bd30      	pop	{r4, r5, pc}
 800b488:	4283      	cmp	r3, r0
 800b48a:	d3f3      	bcc.n	800b474 <__mcmp+0x18>
 800b48c:	e7fa      	b.n	800b484 <__mcmp+0x28>
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b492:	e7f7      	b.n	800b484 <__mcmp+0x28>

0800b494 <__mdiff>:
 800b494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	460c      	mov	r4, r1
 800b49a:	4606      	mov	r6, r0
 800b49c:	4611      	mov	r1, r2
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4617      	mov	r7, r2
 800b4a2:	f7ff ffdb 	bl	800b45c <__mcmp>
 800b4a6:	1e05      	subs	r5, r0, #0
 800b4a8:	d110      	bne.n	800b4cc <__mdiff+0x38>
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff fd0d 	bl	800aecc <_Balloc>
 800b4b2:	b930      	cbnz	r0, 800b4c2 <__mdiff+0x2e>
 800b4b4:	4b39      	ldr	r3, [pc, #228]	; (800b59c <__mdiff+0x108>)
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	f240 2132 	movw	r1, #562	; 0x232
 800b4bc:	4838      	ldr	r0, [pc, #224]	; (800b5a0 <__mdiff+0x10c>)
 800b4be:	f000 fe0d 	bl	800c0dc <__assert_func>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4cc:	bfa4      	itt	ge
 800b4ce:	463b      	movge	r3, r7
 800b4d0:	4627      	movge	r7, r4
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	bfa6      	itte	ge
 800b4d8:	461c      	movge	r4, r3
 800b4da:	2500      	movge	r5, #0
 800b4dc:	2501      	movlt	r5, #1
 800b4de:	f7ff fcf5 	bl	800aecc <_Balloc>
 800b4e2:	b920      	cbnz	r0, 800b4ee <__mdiff+0x5a>
 800b4e4:	4b2d      	ldr	r3, [pc, #180]	; (800b59c <__mdiff+0x108>)
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4ec:	e7e6      	b.n	800b4bc <__mdiff+0x28>
 800b4ee:	693e      	ldr	r6, [r7, #16]
 800b4f0:	60c5      	str	r5, [r0, #12]
 800b4f2:	6925      	ldr	r5, [r4, #16]
 800b4f4:	f107 0114 	add.w	r1, r7, #20
 800b4f8:	f104 0914 	add.w	r9, r4, #20
 800b4fc:	f100 0e14 	add.w	lr, r0, #20
 800b500:	f107 0210 	add.w	r2, r7, #16
 800b504:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b508:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b50c:	46f2      	mov	sl, lr
 800b50e:	2700      	movs	r7, #0
 800b510:	f859 3b04 	ldr.w	r3, [r9], #4
 800b514:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b518:	fa1f f883 	uxth.w	r8, r3
 800b51c:	fa17 f78b 	uxtah	r7, r7, fp
 800b520:	0c1b      	lsrs	r3, r3, #16
 800b522:	eba7 0808 	sub.w	r8, r7, r8
 800b526:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b52a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b52e:	fa1f f888 	uxth.w	r8, r8
 800b532:	141f      	asrs	r7, r3, #16
 800b534:	454d      	cmp	r5, r9
 800b536:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b53a:	f84a 3b04 	str.w	r3, [sl], #4
 800b53e:	d8e7      	bhi.n	800b510 <__mdiff+0x7c>
 800b540:	1b2b      	subs	r3, r5, r4
 800b542:	3b15      	subs	r3, #21
 800b544:	f023 0303 	bic.w	r3, r3, #3
 800b548:	3304      	adds	r3, #4
 800b54a:	3415      	adds	r4, #21
 800b54c:	42a5      	cmp	r5, r4
 800b54e:	bf38      	it	cc
 800b550:	2304      	movcc	r3, #4
 800b552:	4419      	add	r1, r3
 800b554:	4473      	add	r3, lr
 800b556:	469e      	mov	lr, r3
 800b558:	460d      	mov	r5, r1
 800b55a:	4565      	cmp	r5, ip
 800b55c:	d30e      	bcc.n	800b57c <__mdiff+0xe8>
 800b55e:	f10c 0203 	add.w	r2, ip, #3
 800b562:	1a52      	subs	r2, r2, r1
 800b564:	f022 0203 	bic.w	r2, r2, #3
 800b568:	3903      	subs	r1, #3
 800b56a:	458c      	cmp	ip, r1
 800b56c:	bf38      	it	cc
 800b56e:	2200      	movcc	r2, #0
 800b570:	441a      	add	r2, r3
 800b572:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b576:	b17b      	cbz	r3, 800b598 <__mdiff+0x104>
 800b578:	6106      	str	r6, [r0, #16]
 800b57a:	e7a5      	b.n	800b4c8 <__mdiff+0x34>
 800b57c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b580:	fa17 f488 	uxtah	r4, r7, r8
 800b584:	1422      	asrs	r2, r4, #16
 800b586:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b58a:	b2a4      	uxth	r4, r4
 800b58c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b590:	f84e 4b04 	str.w	r4, [lr], #4
 800b594:	1417      	asrs	r7, r2, #16
 800b596:	e7e0      	b.n	800b55a <__mdiff+0xc6>
 800b598:	3e01      	subs	r6, #1
 800b59a:	e7ea      	b.n	800b572 <__mdiff+0xde>
 800b59c:	0800f5b4 	.word	0x0800f5b4
 800b5a0:	0800f6a8 	.word	0x0800f6a8

0800b5a4 <__ulp>:
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	ed8d 0b00 	vstr	d0, [sp]
 800b5aa:	9b01      	ldr	r3, [sp, #4]
 800b5ac:	4912      	ldr	r1, [pc, #72]	; (800b5f8 <__ulp+0x54>)
 800b5ae:	4019      	ands	r1, r3
 800b5b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b5b4:	2900      	cmp	r1, #0
 800b5b6:	dd05      	ble.n	800b5c4 <__ulp+0x20>
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	ec43 2b10 	vmov	d0, r2, r3
 800b5c0:	b002      	add	sp, #8
 800b5c2:	4770      	bx	lr
 800b5c4:	4249      	negs	r1, r1
 800b5c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b5ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b5ce:	f04f 0200 	mov.w	r2, #0
 800b5d2:	f04f 0300 	mov.w	r3, #0
 800b5d6:	da04      	bge.n	800b5e2 <__ulp+0x3e>
 800b5d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b5dc:	fa41 f300 	asr.w	r3, r1, r0
 800b5e0:	e7ec      	b.n	800b5bc <__ulp+0x18>
 800b5e2:	f1a0 0114 	sub.w	r1, r0, #20
 800b5e6:	291e      	cmp	r1, #30
 800b5e8:	bfda      	itte	le
 800b5ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b5ee:	fa20 f101 	lsrle.w	r1, r0, r1
 800b5f2:	2101      	movgt	r1, #1
 800b5f4:	460a      	mov	r2, r1
 800b5f6:	e7e1      	b.n	800b5bc <__ulp+0x18>
 800b5f8:	7ff00000 	.word	0x7ff00000

0800b5fc <__b2d>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	6905      	ldr	r5, [r0, #16]
 800b600:	f100 0714 	add.w	r7, r0, #20
 800b604:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b608:	1f2e      	subs	r6, r5, #4
 800b60a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b60e:	4620      	mov	r0, r4
 800b610:	f7ff fd52 	bl	800b0b8 <__hi0bits>
 800b614:	f1c0 0320 	rsb	r3, r0, #32
 800b618:	280a      	cmp	r0, #10
 800b61a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b698 <__b2d+0x9c>
 800b61e:	600b      	str	r3, [r1, #0]
 800b620:	dc14      	bgt.n	800b64c <__b2d+0x50>
 800b622:	f1c0 0e0b 	rsb	lr, r0, #11
 800b626:	fa24 f10e 	lsr.w	r1, r4, lr
 800b62a:	42b7      	cmp	r7, r6
 800b62c:	ea41 030c 	orr.w	r3, r1, ip
 800b630:	bf34      	ite	cc
 800b632:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b636:	2100      	movcs	r1, #0
 800b638:	3015      	adds	r0, #21
 800b63a:	fa04 f000 	lsl.w	r0, r4, r0
 800b63e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b642:	ea40 0201 	orr.w	r2, r0, r1
 800b646:	ec43 2b10 	vmov	d0, r2, r3
 800b64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b64c:	42b7      	cmp	r7, r6
 800b64e:	bf3a      	itte	cc
 800b650:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b654:	f1a5 0608 	subcc.w	r6, r5, #8
 800b658:	2100      	movcs	r1, #0
 800b65a:	380b      	subs	r0, #11
 800b65c:	d017      	beq.n	800b68e <__b2d+0x92>
 800b65e:	f1c0 0c20 	rsb	ip, r0, #32
 800b662:	fa04 f500 	lsl.w	r5, r4, r0
 800b666:	42be      	cmp	r6, r7
 800b668:	fa21 f40c 	lsr.w	r4, r1, ip
 800b66c:	ea45 0504 	orr.w	r5, r5, r4
 800b670:	bf8c      	ite	hi
 800b672:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b676:	2400      	movls	r4, #0
 800b678:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b67c:	fa01 f000 	lsl.w	r0, r1, r0
 800b680:	fa24 f40c 	lsr.w	r4, r4, ip
 800b684:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b688:	ea40 0204 	orr.w	r2, r0, r4
 800b68c:	e7db      	b.n	800b646 <__b2d+0x4a>
 800b68e:	ea44 030c 	orr.w	r3, r4, ip
 800b692:	460a      	mov	r2, r1
 800b694:	e7d7      	b.n	800b646 <__b2d+0x4a>
 800b696:	bf00      	nop
 800b698:	3ff00000 	.word	0x3ff00000

0800b69c <__d2b>:
 800b69c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6a0:	4689      	mov	r9, r1
 800b6a2:	2101      	movs	r1, #1
 800b6a4:	ec57 6b10 	vmov	r6, r7, d0
 800b6a8:	4690      	mov	r8, r2
 800b6aa:	f7ff fc0f 	bl	800aecc <_Balloc>
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	b930      	cbnz	r0, 800b6c0 <__d2b+0x24>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	4b25      	ldr	r3, [pc, #148]	; (800b74c <__d2b+0xb0>)
 800b6b6:	4826      	ldr	r0, [pc, #152]	; (800b750 <__d2b+0xb4>)
 800b6b8:	f240 310a 	movw	r1, #778	; 0x30a
 800b6bc:	f000 fd0e 	bl	800c0dc <__assert_func>
 800b6c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b6c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6c8:	bb35      	cbnz	r5, 800b718 <__d2b+0x7c>
 800b6ca:	2e00      	cmp	r6, #0
 800b6cc:	9301      	str	r3, [sp, #4]
 800b6ce:	d028      	beq.n	800b722 <__d2b+0x86>
 800b6d0:	4668      	mov	r0, sp
 800b6d2:	9600      	str	r6, [sp, #0]
 800b6d4:	f7ff fd10 	bl	800b0f8 <__lo0bits>
 800b6d8:	9900      	ldr	r1, [sp, #0]
 800b6da:	b300      	cbz	r0, 800b71e <__d2b+0x82>
 800b6dc:	9a01      	ldr	r2, [sp, #4]
 800b6de:	f1c0 0320 	rsb	r3, r0, #32
 800b6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e6:	430b      	orrs	r3, r1
 800b6e8:	40c2      	lsrs	r2, r0
 800b6ea:	6163      	str	r3, [r4, #20]
 800b6ec:	9201      	str	r2, [sp, #4]
 800b6ee:	9b01      	ldr	r3, [sp, #4]
 800b6f0:	61a3      	str	r3, [r4, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	bf14      	ite	ne
 800b6f6:	2202      	movne	r2, #2
 800b6f8:	2201      	moveq	r2, #1
 800b6fa:	6122      	str	r2, [r4, #16]
 800b6fc:	b1d5      	cbz	r5, 800b734 <__d2b+0x98>
 800b6fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b702:	4405      	add	r5, r0
 800b704:	f8c9 5000 	str.w	r5, [r9]
 800b708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b70c:	f8c8 0000 	str.w	r0, [r8]
 800b710:	4620      	mov	r0, r4
 800b712:	b003      	add	sp, #12
 800b714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b71c:	e7d5      	b.n	800b6ca <__d2b+0x2e>
 800b71e:	6161      	str	r1, [r4, #20]
 800b720:	e7e5      	b.n	800b6ee <__d2b+0x52>
 800b722:	a801      	add	r0, sp, #4
 800b724:	f7ff fce8 	bl	800b0f8 <__lo0bits>
 800b728:	9b01      	ldr	r3, [sp, #4]
 800b72a:	6163      	str	r3, [r4, #20]
 800b72c:	2201      	movs	r2, #1
 800b72e:	6122      	str	r2, [r4, #16]
 800b730:	3020      	adds	r0, #32
 800b732:	e7e3      	b.n	800b6fc <__d2b+0x60>
 800b734:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b738:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b73c:	f8c9 0000 	str.w	r0, [r9]
 800b740:	6918      	ldr	r0, [r3, #16]
 800b742:	f7ff fcb9 	bl	800b0b8 <__hi0bits>
 800b746:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b74a:	e7df      	b.n	800b70c <__d2b+0x70>
 800b74c:	0800f5b4 	.word	0x0800f5b4
 800b750:	0800f6a8 	.word	0x0800f6a8

0800b754 <__ratio>:
 800b754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b758:	4688      	mov	r8, r1
 800b75a:	4669      	mov	r1, sp
 800b75c:	4681      	mov	r9, r0
 800b75e:	f7ff ff4d 	bl	800b5fc <__b2d>
 800b762:	a901      	add	r1, sp, #4
 800b764:	4640      	mov	r0, r8
 800b766:	ec55 4b10 	vmov	r4, r5, d0
 800b76a:	f7ff ff47 	bl	800b5fc <__b2d>
 800b76e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b772:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b776:	eba3 0c02 	sub.w	ip, r3, r2
 800b77a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b77e:	1a9b      	subs	r3, r3, r2
 800b780:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b784:	ec51 0b10 	vmov	r0, r1, d0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	bfd6      	itet	le
 800b78c:	460a      	movle	r2, r1
 800b78e:	462a      	movgt	r2, r5
 800b790:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b794:	468b      	mov	fp, r1
 800b796:	462f      	mov	r7, r5
 800b798:	bfd4      	ite	le
 800b79a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b79e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	ee10 2a10 	vmov	r2, s0
 800b7a8:	465b      	mov	r3, fp
 800b7aa:	4639      	mov	r1, r7
 800b7ac:	f7f5 f856 	bl	800085c <__aeabi_ddiv>
 800b7b0:	ec41 0b10 	vmov	d0, r0, r1
 800b7b4:	b003      	add	sp, #12
 800b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7ba <__copybits>:
 800b7ba:	3901      	subs	r1, #1
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	1149      	asrs	r1, r1, #5
 800b7c0:	6914      	ldr	r4, [r2, #16]
 800b7c2:	3101      	adds	r1, #1
 800b7c4:	f102 0314 	add.w	r3, r2, #20
 800b7c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b7cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b7d0:	1f05      	subs	r5, r0, #4
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	d30c      	bcc.n	800b7f0 <__copybits+0x36>
 800b7d6:	1aa3      	subs	r3, r4, r2
 800b7d8:	3b11      	subs	r3, #17
 800b7da:	f023 0303 	bic.w	r3, r3, #3
 800b7de:	3211      	adds	r2, #17
 800b7e0:	42a2      	cmp	r2, r4
 800b7e2:	bf88      	it	hi
 800b7e4:	2300      	movhi	r3, #0
 800b7e6:	4418      	add	r0, r3
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4288      	cmp	r0, r1
 800b7ec:	d305      	bcc.n	800b7fa <__copybits+0x40>
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7f4:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7f8:	e7eb      	b.n	800b7d2 <__copybits+0x18>
 800b7fa:	f840 3b04 	str.w	r3, [r0], #4
 800b7fe:	e7f4      	b.n	800b7ea <__copybits+0x30>

0800b800 <__any_on>:
 800b800:	f100 0214 	add.w	r2, r0, #20
 800b804:	6900      	ldr	r0, [r0, #16]
 800b806:	114b      	asrs	r3, r1, #5
 800b808:	4298      	cmp	r0, r3
 800b80a:	b510      	push	{r4, lr}
 800b80c:	db11      	blt.n	800b832 <__any_on+0x32>
 800b80e:	dd0a      	ble.n	800b826 <__any_on+0x26>
 800b810:	f011 011f 	ands.w	r1, r1, #31
 800b814:	d007      	beq.n	800b826 <__any_on+0x26>
 800b816:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b81a:	fa24 f001 	lsr.w	r0, r4, r1
 800b81e:	fa00 f101 	lsl.w	r1, r0, r1
 800b822:	428c      	cmp	r4, r1
 800b824:	d10b      	bne.n	800b83e <__any_on+0x3e>
 800b826:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d803      	bhi.n	800b836 <__any_on+0x36>
 800b82e:	2000      	movs	r0, #0
 800b830:	bd10      	pop	{r4, pc}
 800b832:	4603      	mov	r3, r0
 800b834:	e7f7      	b.n	800b826 <__any_on+0x26>
 800b836:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b83a:	2900      	cmp	r1, #0
 800b83c:	d0f5      	beq.n	800b82a <__any_on+0x2a>
 800b83e:	2001      	movs	r0, #1
 800b840:	e7f6      	b.n	800b830 <__any_on+0x30>

0800b842 <_calloc_r>:
 800b842:	b513      	push	{r0, r1, r4, lr}
 800b844:	434a      	muls	r2, r1
 800b846:	4611      	mov	r1, r2
 800b848:	9201      	str	r2, [sp, #4]
 800b84a:	f7fc fa4f 	bl	8007cec <_malloc_r>
 800b84e:	4604      	mov	r4, r0
 800b850:	b118      	cbz	r0, 800b85a <_calloc_r+0x18>
 800b852:	9a01      	ldr	r2, [sp, #4]
 800b854:	2100      	movs	r1, #0
 800b856:	f7fc f9f1 	bl	8007c3c <memset>
 800b85a:	4620      	mov	r0, r4
 800b85c:	b002      	add	sp, #8
 800b85e:	bd10      	pop	{r4, pc}

0800b860 <__ssputs_r>:
 800b860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b864:	688e      	ldr	r6, [r1, #8]
 800b866:	429e      	cmp	r6, r3
 800b868:	4682      	mov	sl, r0
 800b86a:	460c      	mov	r4, r1
 800b86c:	4690      	mov	r8, r2
 800b86e:	461f      	mov	r7, r3
 800b870:	d838      	bhi.n	800b8e4 <__ssputs_r+0x84>
 800b872:	898a      	ldrh	r2, [r1, #12]
 800b874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b878:	d032      	beq.n	800b8e0 <__ssputs_r+0x80>
 800b87a:	6825      	ldr	r5, [r4, #0]
 800b87c:	6909      	ldr	r1, [r1, #16]
 800b87e:	eba5 0901 	sub.w	r9, r5, r1
 800b882:	6965      	ldr	r5, [r4, #20]
 800b884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b88c:	3301      	adds	r3, #1
 800b88e:	444b      	add	r3, r9
 800b890:	106d      	asrs	r5, r5, #1
 800b892:	429d      	cmp	r5, r3
 800b894:	bf38      	it	cc
 800b896:	461d      	movcc	r5, r3
 800b898:	0553      	lsls	r3, r2, #21
 800b89a:	d531      	bpl.n	800b900 <__ssputs_r+0xa0>
 800b89c:	4629      	mov	r1, r5
 800b89e:	f7fc fa25 	bl	8007cec <_malloc_r>
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	b950      	cbnz	r0, 800b8bc <__ssputs_r+0x5c>
 800b8a6:	230c      	movs	r3, #12
 800b8a8:	f8ca 3000 	str.w	r3, [sl]
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8b2:	81a3      	strh	r3, [r4, #12]
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8bc:	6921      	ldr	r1, [r4, #16]
 800b8be:	464a      	mov	r2, r9
 800b8c0:	f7fc f9ae 	bl	8007c20 <memcpy>
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ce:	81a3      	strh	r3, [r4, #12]
 800b8d0:	6126      	str	r6, [r4, #16]
 800b8d2:	6165      	str	r5, [r4, #20]
 800b8d4:	444e      	add	r6, r9
 800b8d6:	eba5 0509 	sub.w	r5, r5, r9
 800b8da:	6026      	str	r6, [r4, #0]
 800b8dc:	60a5      	str	r5, [r4, #8]
 800b8de:	463e      	mov	r6, r7
 800b8e0:	42be      	cmp	r6, r7
 800b8e2:	d900      	bls.n	800b8e6 <__ssputs_r+0x86>
 800b8e4:	463e      	mov	r6, r7
 800b8e6:	4632      	mov	r2, r6
 800b8e8:	6820      	ldr	r0, [r4, #0]
 800b8ea:	4641      	mov	r1, r8
 800b8ec:	f000 fd6e 	bl	800c3cc <memmove>
 800b8f0:	68a3      	ldr	r3, [r4, #8]
 800b8f2:	6822      	ldr	r2, [r4, #0]
 800b8f4:	1b9b      	subs	r3, r3, r6
 800b8f6:	4432      	add	r2, r6
 800b8f8:	60a3      	str	r3, [r4, #8]
 800b8fa:	6022      	str	r2, [r4, #0]
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	e7db      	b.n	800b8b8 <__ssputs_r+0x58>
 800b900:	462a      	mov	r2, r5
 800b902:	f000 fd7d 	bl	800c400 <_realloc_r>
 800b906:	4606      	mov	r6, r0
 800b908:	2800      	cmp	r0, #0
 800b90a:	d1e1      	bne.n	800b8d0 <__ssputs_r+0x70>
 800b90c:	6921      	ldr	r1, [r4, #16]
 800b90e:	4650      	mov	r0, sl
 800b910:	f7fc f99c 	bl	8007c4c <_free_r>
 800b914:	e7c7      	b.n	800b8a6 <__ssputs_r+0x46>
	...

0800b918 <_svfiprintf_r>:
 800b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	4698      	mov	r8, r3
 800b91e:	898b      	ldrh	r3, [r1, #12]
 800b920:	061b      	lsls	r3, r3, #24
 800b922:	b09d      	sub	sp, #116	; 0x74
 800b924:	4607      	mov	r7, r0
 800b926:	460d      	mov	r5, r1
 800b928:	4614      	mov	r4, r2
 800b92a:	d50e      	bpl.n	800b94a <_svfiprintf_r+0x32>
 800b92c:	690b      	ldr	r3, [r1, #16]
 800b92e:	b963      	cbnz	r3, 800b94a <_svfiprintf_r+0x32>
 800b930:	2140      	movs	r1, #64	; 0x40
 800b932:	f7fc f9db 	bl	8007cec <_malloc_r>
 800b936:	6028      	str	r0, [r5, #0]
 800b938:	6128      	str	r0, [r5, #16]
 800b93a:	b920      	cbnz	r0, 800b946 <_svfiprintf_r+0x2e>
 800b93c:	230c      	movs	r3, #12
 800b93e:	603b      	str	r3, [r7, #0]
 800b940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b944:	e0d1      	b.n	800baea <_svfiprintf_r+0x1d2>
 800b946:	2340      	movs	r3, #64	; 0x40
 800b948:	616b      	str	r3, [r5, #20]
 800b94a:	2300      	movs	r3, #0
 800b94c:	9309      	str	r3, [sp, #36]	; 0x24
 800b94e:	2320      	movs	r3, #32
 800b950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b954:	f8cd 800c 	str.w	r8, [sp, #12]
 800b958:	2330      	movs	r3, #48	; 0x30
 800b95a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb04 <_svfiprintf_r+0x1ec>
 800b95e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b962:	f04f 0901 	mov.w	r9, #1
 800b966:	4623      	mov	r3, r4
 800b968:	469a      	mov	sl, r3
 800b96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b96e:	b10a      	cbz	r2, 800b974 <_svfiprintf_r+0x5c>
 800b970:	2a25      	cmp	r2, #37	; 0x25
 800b972:	d1f9      	bne.n	800b968 <_svfiprintf_r+0x50>
 800b974:	ebba 0b04 	subs.w	fp, sl, r4
 800b978:	d00b      	beq.n	800b992 <_svfiprintf_r+0x7a>
 800b97a:	465b      	mov	r3, fp
 800b97c:	4622      	mov	r2, r4
 800b97e:	4629      	mov	r1, r5
 800b980:	4638      	mov	r0, r7
 800b982:	f7ff ff6d 	bl	800b860 <__ssputs_r>
 800b986:	3001      	adds	r0, #1
 800b988:	f000 80aa 	beq.w	800bae0 <_svfiprintf_r+0x1c8>
 800b98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b98e:	445a      	add	r2, fp
 800b990:	9209      	str	r2, [sp, #36]	; 0x24
 800b992:	f89a 3000 	ldrb.w	r3, [sl]
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 80a2 	beq.w	800bae0 <_svfiprintf_r+0x1c8>
 800b99c:	2300      	movs	r3, #0
 800b99e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a6:	f10a 0a01 	add.w	sl, sl, #1
 800b9aa:	9304      	str	r3, [sp, #16]
 800b9ac:	9307      	str	r3, [sp, #28]
 800b9ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b9b4:	4654      	mov	r4, sl
 800b9b6:	2205      	movs	r2, #5
 800b9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9bc:	4851      	ldr	r0, [pc, #324]	; (800bb04 <_svfiprintf_r+0x1ec>)
 800b9be:	f7f4 fc17 	bl	80001f0 <memchr>
 800b9c2:	9a04      	ldr	r2, [sp, #16]
 800b9c4:	b9d8      	cbnz	r0, 800b9fe <_svfiprintf_r+0xe6>
 800b9c6:	06d0      	lsls	r0, r2, #27
 800b9c8:	bf44      	itt	mi
 800b9ca:	2320      	movmi	r3, #32
 800b9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d0:	0711      	lsls	r1, r2, #28
 800b9d2:	bf44      	itt	mi
 800b9d4:	232b      	movmi	r3, #43	; 0x2b
 800b9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9da:	f89a 3000 	ldrb.w	r3, [sl]
 800b9de:	2b2a      	cmp	r3, #42	; 0x2a
 800b9e0:	d015      	beq.n	800ba0e <_svfiprintf_r+0xf6>
 800b9e2:	9a07      	ldr	r2, [sp, #28]
 800b9e4:	4654      	mov	r4, sl
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	f04f 0c0a 	mov.w	ip, #10
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9f2:	3b30      	subs	r3, #48	; 0x30
 800b9f4:	2b09      	cmp	r3, #9
 800b9f6:	d94e      	bls.n	800ba96 <_svfiprintf_r+0x17e>
 800b9f8:	b1b0      	cbz	r0, 800ba28 <_svfiprintf_r+0x110>
 800b9fa:	9207      	str	r2, [sp, #28]
 800b9fc:	e014      	b.n	800ba28 <_svfiprintf_r+0x110>
 800b9fe:	eba0 0308 	sub.w	r3, r0, r8
 800ba02:	fa09 f303 	lsl.w	r3, r9, r3
 800ba06:	4313      	orrs	r3, r2
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	46a2      	mov	sl, r4
 800ba0c:	e7d2      	b.n	800b9b4 <_svfiprintf_r+0x9c>
 800ba0e:	9b03      	ldr	r3, [sp, #12]
 800ba10:	1d19      	adds	r1, r3, #4
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	9103      	str	r1, [sp, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bfbb      	ittet	lt
 800ba1a:	425b      	neglt	r3, r3
 800ba1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ba20:	9307      	strge	r3, [sp, #28]
 800ba22:	9307      	strlt	r3, [sp, #28]
 800ba24:	bfb8      	it	lt
 800ba26:	9204      	strlt	r2, [sp, #16]
 800ba28:	7823      	ldrb	r3, [r4, #0]
 800ba2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ba2c:	d10c      	bne.n	800ba48 <_svfiprintf_r+0x130>
 800ba2e:	7863      	ldrb	r3, [r4, #1]
 800ba30:	2b2a      	cmp	r3, #42	; 0x2a
 800ba32:	d135      	bne.n	800baa0 <_svfiprintf_r+0x188>
 800ba34:	9b03      	ldr	r3, [sp, #12]
 800ba36:	1d1a      	adds	r2, r3, #4
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	9203      	str	r2, [sp, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	bfb8      	it	lt
 800ba40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba44:	3402      	adds	r4, #2
 800ba46:	9305      	str	r3, [sp, #20]
 800ba48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb14 <_svfiprintf_r+0x1fc>
 800ba4c:	7821      	ldrb	r1, [r4, #0]
 800ba4e:	2203      	movs	r2, #3
 800ba50:	4650      	mov	r0, sl
 800ba52:	f7f4 fbcd 	bl	80001f0 <memchr>
 800ba56:	b140      	cbz	r0, 800ba6a <_svfiprintf_r+0x152>
 800ba58:	2340      	movs	r3, #64	; 0x40
 800ba5a:	eba0 000a 	sub.w	r0, r0, sl
 800ba5e:	fa03 f000 	lsl.w	r0, r3, r0
 800ba62:	9b04      	ldr	r3, [sp, #16]
 800ba64:	4303      	orrs	r3, r0
 800ba66:	3401      	adds	r4, #1
 800ba68:	9304      	str	r3, [sp, #16]
 800ba6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba6e:	4826      	ldr	r0, [pc, #152]	; (800bb08 <_svfiprintf_r+0x1f0>)
 800ba70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba74:	2206      	movs	r2, #6
 800ba76:	f7f4 fbbb 	bl	80001f0 <memchr>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d038      	beq.n	800baf0 <_svfiprintf_r+0x1d8>
 800ba7e:	4b23      	ldr	r3, [pc, #140]	; (800bb0c <_svfiprintf_r+0x1f4>)
 800ba80:	bb1b      	cbnz	r3, 800baca <_svfiprintf_r+0x1b2>
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	3307      	adds	r3, #7
 800ba86:	f023 0307 	bic.w	r3, r3, #7
 800ba8a:	3308      	adds	r3, #8
 800ba8c:	9303      	str	r3, [sp, #12]
 800ba8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba90:	4433      	add	r3, r6
 800ba92:	9309      	str	r3, [sp, #36]	; 0x24
 800ba94:	e767      	b.n	800b966 <_svfiprintf_r+0x4e>
 800ba96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	2001      	movs	r0, #1
 800ba9e:	e7a5      	b.n	800b9ec <_svfiprintf_r+0xd4>
 800baa0:	2300      	movs	r3, #0
 800baa2:	3401      	adds	r4, #1
 800baa4:	9305      	str	r3, [sp, #20]
 800baa6:	4619      	mov	r1, r3
 800baa8:	f04f 0c0a 	mov.w	ip, #10
 800baac:	4620      	mov	r0, r4
 800baae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bab2:	3a30      	subs	r2, #48	; 0x30
 800bab4:	2a09      	cmp	r2, #9
 800bab6:	d903      	bls.n	800bac0 <_svfiprintf_r+0x1a8>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0c5      	beq.n	800ba48 <_svfiprintf_r+0x130>
 800babc:	9105      	str	r1, [sp, #20]
 800babe:	e7c3      	b.n	800ba48 <_svfiprintf_r+0x130>
 800bac0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bac4:	4604      	mov	r4, r0
 800bac6:	2301      	movs	r3, #1
 800bac8:	e7f0      	b.n	800baac <_svfiprintf_r+0x194>
 800baca:	ab03      	add	r3, sp, #12
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	462a      	mov	r2, r5
 800bad0:	4b0f      	ldr	r3, [pc, #60]	; (800bb10 <_svfiprintf_r+0x1f8>)
 800bad2:	a904      	add	r1, sp, #16
 800bad4:	4638      	mov	r0, r7
 800bad6:	f7fc fa03 	bl	8007ee0 <_printf_float>
 800bada:	1c42      	adds	r2, r0, #1
 800badc:	4606      	mov	r6, r0
 800bade:	d1d6      	bne.n	800ba8e <_svfiprintf_r+0x176>
 800bae0:	89ab      	ldrh	r3, [r5, #12]
 800bae2:	065b      	lsls	r3, r3, #25
 800bae4:	f53f af2c 	bmi.w	800b940 <_svfiprintf_r+0x28>
 800bae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baea:	b01d      	add	sp, #116	; 0x74
 800baec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf0:	ab03      	add	r3, sp, #12
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	462a      	mov	r2, r5
 800baf6:	4b06      	ldr	r3, [pc, #24]	; (800bb10 <_svfiprintf_r+0x1f8>)
 800baf8:	a904      	add	r1, sp, #16
 800bafa:	4638      	mov	r0, r7
 800bafc:	f7fc fc94 	bl	8008428 <_printf_i>
 800bb00:	e7eb      	b.n	800bada <_svfiprintf_r+0x1c2>
 800bb02:	bf00      	nop
 800bb04:	0800f804 	.word	0x0800f804
 800bb08:	0800f80e 	.word	0x0800f80e
 800bb0c:	08007ee1 	.word	0x08007ee1
 800bb10:	0800b861 	.word	0x0800b861
 800bb14:	0800f80a 	.word	0x0800f80a

0800bb18 <__sfputc_r>:
 800bb18:	6893      	ldr	r3, [r2, #8]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	b410      	push	{r4}
 800bb20:	6093      	str	r3, [r2, #8]
 800bb22:	da08      	bge.n	800bb36 <__sfputc_r+0x1e>
 800bb24:	6994      	ldr	r4, [r2, #24]
 800bb26:	42a3      	cmp	r3, r4
 800bb28:	db01      	blt.n	800bb2e <__sfputc_r+0x16>
 800bb2a:	290a      	cmp	r1, #10
 800bb2c:	d103      	bne.n	800bb36 <__sfputc_r+0x1e>
 800bb2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb32:	f000 b9f3 	b.w	800bf1c <__swbuf_r>
 800bb36:	6813      	ldr	r3, [r2, #0]
 800bb38:	1c58      	adds	r0, r3, #1
 800bb3a:	6010      	str	r0, [r2, #0]
 800bb3c:	7019      	strb	r1, [r3, #0]
 800bb3e:	4608      	mov	r0, r1
 800bb40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <__sfputs_r>:
 800bb46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb48:	4606      	mov	r6, r0
 800bb4a:	460f      	mov	r7, r1
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	18d5      	adds	r5, r2, r3
 800bb50:	42ac      	cmp	r4, r5
 800bb52:	d101      	bne.n	800bb58 <__sfputs_r+0x12>
 800bb54:	2000      	movs	r0, #0
 800bb56:	e007      	b.n	800bb68 <__sfputs_r+0x22>
 800bb58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb5c:	463a      	mov	r2, r7
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f7ff ffda 	bl	800bb18 <__sfputc_r>
 800bb64:	1c43      	adds	r3, r0, #1
 800bb66:	d1f3      	bne.n	800bb50 <__sfputs_r+0xa>
 800bb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb6c <_vfiprintf_r>:
 800bb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb70:	460d      	mov	r5, r1
 800bb72:	b09d      	sub	sp, #116	; 0x74
 800bb74:	4614      	mov	r4, r2
 800bb76:	4698      	mov	r8, r3
 800bb78:	4606      	mov	r6, r0
 800bb7a:	b118      	cbz	r0, 800bb84 <_vfiprintf_r+0x18>
 800bb7c:	6983      	ldr	r3, [r0, #24]
 800bb7e:	b90b      	cbnz	r3, 800bb84 <_vfiprintf_r+0x18>
 800bb80:	f7fe fd72 	bl	800a668 <__sinit>
 800bb84:	4b89      	ldr	r3, [pc, #548]	; (800bdac <_vfiprintf_r+0x240>)
 800bb86:	429d      	cmp	r5, r3
 800bb88:	d11b      	bne.n	800bbc2 <_vfiprintf_r+0x56>
 800bb8a:	6875      	ldr	r5, [r6, #4]
 800bb8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb8e:	07d9      	lsls	r1, r3, #31
 800bb90:	d405      	bmi.n	800bb9e <_vfiprintf_r+0x32>
 800bb92:	89ab      	ldrh	r3, [r5, #12]
 800bb94:	059a      	lsls	r2, r3, #22
 800bb96:	d402      	bmi.n	800bb9e <_vfiprintf_r+0x32>
 800bb98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb9a:	f7ff f976 	bl	800ae8a <__retarget_lock_acquire_recursive>
 800bb9e:	89ab      	ldrh	r3, [r5, #12]
 800bba0:	071b      	lsls	r3, r3, #28
 800bba2:	d501      	bpl.n	800bba8 <_vfiprintf_r+0x3c>
 800bba4:	692b      	ldr	r3, [r5, #16]
 800bba6:	b9eb      	cbnz	r3, 800bbe4 <_vfiprintf_r+0x78>
 800bba8:	4629      	mov	r1, r5
 800bbaa:	4630      	mov	r0, r6
 800bbac:	f000 fa28 	bl	800c000 <__swsetup_r>
 800bbb0:	b1c0      	cbz	r0, 800bbe4 <_vfiprintf_r+0x78>
 800bbb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbb4:	07dc      	lsls	r4, r3, #31
 800bbb6:	d50e      	bpl.n	800bbd6 <_vfiprintf_r+0x6a>
 800bbb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbbc:	b01d      	add	sp, #116	; 0x74
 800bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc2:	4b7b      	ldr	r3, [pc, #492]	; (800bdb0 <_vfiprintf_r+0x244>)
 800bbc4:	429d      	cmp	r5, r3
 800bbc6:	d101      	bne.n	800bbcc <_vfiprintf_r+0x60>
 800bbc8:	68b5      	ldr	r5, [r6, #8]
 800bbca:	e7df      	b.n	800bb8c <_vfiprintf_r+0x20>
 800bbcc:	4b79      	ldr	r3, [pc, #484]	; (800bdb4 <_vfiprintf_r+0x248>)
 800bbce:	429d      	cmp	r5, r3
 800bbd0:	bf08      	it	eq
 800bbd2:	68f5      	ldreq	r5, [r6, #12]
 800bbd4:	e7da      	b.n	800bb8c <_vfiprintf_r+0x20>
 800bbd6:	89ab      	ldrh	r3, [r5, #12]
 800bbd8:	0598      	lsls	r0, r3, #22
 800bbda:	d4ed      	bmi.n	800bbb8 <_vfiprintf_r+0x4c>
 800bbdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbde:	f7ff f955 	bl	800ae8c <__retarget_lock_release_recursive>
 800bbe2:	e7e9      	b.n	800bbb8 <_vfiprintf_r+0x4c>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe8:	2320      	movs	r3, #32
 800bbea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbee:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbf2:	2330      	movs	r3, #48	; 0x30
 800bbf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdb8 <_vfiprintf_r+0x24c>
 800bbf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbfc:	f04f 0901 	mov.w	r9, #1
 800bc00:	4623      	mov	r3, r4
 800bc02:	469a      	mov	sl, r3
 800bc04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc08:	b10a      	cbz	r2, 800bc0e <_vfiprintf_r+0xa2>
 800bc0a:	2a25      	cmp	r2, #37	; 0x25
 800bc0c:	d1f9      	bne.n	800bc02 <_vfiprintf_r+0x96>
 800bc0e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc12:	d00b      	beq.n	800bc2c <_vfiprintf_r+0xc0>
 800bc14:	465b      	mov	r3, fp
 800bc16:	4622      	mov	r2, r4
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f7ff ff93 	bl	800bb46 <__sfputs_r>
 800bc20:	3001      	adds	r0, #1
 800bc22:	f000 80aa 	beq.w	800bd7a <_vfiprintf_r+0x20e>
 800bc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc28:	445a      	add	r2, fp
 800bc2a:	9209      	str	r2, [sp, #36]	; 0x24
 800bc2c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 80a2 	beq.w	800bd7a <_vfiprintf_r+0x20e>
 800bc36:	2300      	movs	r3, #0
 800bc38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc40:	f10a 0a01 	add.w	sl, sl, #1
 800bc44:	9304      	str	r3, [sp, #16]
 800bc46:	9307      	str	r3, [sp, #28]
 800bc48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc4c:	931a      	str	r3, [sp, #104]	; 0x68
 800bc4e:	4654      	mov	r4, sl
 800bc50:	2205      	movs	r2, #5
 800bc52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc56:	4858      	ldr	r0, [pc, #352]	; (800bdb8 <_vfiprintf_r+0x24c>)
 800bc58:	f7f4 faca 	bl	80001f0 <memchr>
 800bc5c:	9a04      	ldr	r2, [sp, #16]
 800bc5e:	b9d8      	cbnz	r0, 800bc98 <_vfiprintf_r+0x12c>
 800bc60:	06d1      	lsls	r1, r2, #27
 800bc62:	bf44      	itt	mi
 800bc64:	2320      	movmi	r3, #32
 800bc66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc6a:	0713      	lsls	r3, r2, #28
 800bc6c:	bf44      	itt	mi
 800bc6e:	232b      	movmi	r3, #43	; 0x2b
 800bc70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc74:	f89a 3000 	ldrb.w	r3, [sl]
 800bc78:	2b2a      	cmp	r3, #42	; 0x2a
 800bc7a:	d015      	beq.n	800bca8 <_vfiprintf_r+0x13c>
 800bc7c:	9a07      	ldr	r2, [sp, #28]
 800bc7e:	4654      	mov	r4, sl
 800bc80:	2000      	movs	r0, #0
 800bc82:	f04f 0c0a 	mov.w	ip, #10
 800bc86:	4621      	mov	r1, r4
 800bc88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc8c:	3b30      	subs	r3, #48	; 0x30
 800bc8e:	2b09      	cmp	r3, #9
 800bc90:	d94e      	bls.n	800bd30 <_vfiprintf_r+0x1c4>
 800bc92:	b1b0      	cbz	r0, 800bcc2 <_vfiprintf_r+0x156>
 800bc94:	9207      	str	r2, [sp, #28]
 800bc96:	e014      	b.n	800bcc2 <_vfiprintf_r+0x156>
 800bc98:	eba0 0308 	sub.w	r3, r0, r8
 800bc9c:	fa09 f303 	lsl.w	r3, r9, r3
 800bca0:	4313      	orrs	r3, r2
 800bca2:	9304      	str	r3, [sp, #16]
 800bca4:	46a2      	mov	sl, r4
 800bca6:	e7d2      	b.n	800bc4e <_vfiprintf_r+0xe2>
 800bca8:	9b03      	ldr	r3, [sp, #12]
 800bcaa:	1d19      	adds	r1, r3, #4
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	9103      	str	r1, [sp, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	bfbb      	ittet	lt
 800bcb4:	425b      	neglt	r3, r3
 800bcb6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcba:	9307      	strge	r3, [sp, #28]
 800bcbc:	9307      	strlt	r3, [sp, #28]
 800bcbe:	bfb8      	it	lt
 800bcc0:	9204      	strlt	r2, [sp, #16]
 800bcc2:	7823      	ldrb	r3, [r4, #0]
 800bcc4:	2b2e      	cmp	r3, #46	; 0x2e
 800bcc6:	d10c      	bne.n	800bce2 <_vfiprintf_r+0x176>
 800bcc8:	7863      	ldrb	r3, [r4, #1]
 800bcca:	2b2a      	cmp	r3, #42	; 0x2a
 800bccc:	d135      	bne.n	800bd3a <_vfiprintf_r+0x1ce>
 800bcce:	9b03      	ldr	r3, [sp, #12]
 800bcd0:	1d1a      	adds	r2, r3, #4
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	9203      	str	r2, [sp, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bfb8      	it	lt
 800bcda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bcde:	3402      	adds	r4, #2
 800bce0:	9305      	str	r3, [sp, #20]
 800bce2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdc8 <_vfiprintf_r+0x25c>
 800bce6:	7821      	ldrb	r1, [r4, #0]
 800bce8:	2203      	movs	r2, #3
 800bcea:	4650      	mov	r0, sl
 800bcec:	f7f4 fa80 	bl	80001f0 <memchr>
 800bcf0:	b140      	cbz	r0, 800bd04 <_vfiprintf_r+0x198>
 800bcf2:	2340      	movs	r3, #64	; 0x40
 800bcf4:	eba0 000a 	sub.w	r0, r0, sl
 800bcf8:	fa03 f000 	lsl.w	r0, r3, r0
 800bcfc:	9b04      	ldr	r3, [sp, #16]
 800bcfe:	4303      	orrs	r3, r0
 800bd00:	3401      	adds	r4, #1
 800bd02:	9304      	str	r3, [sp, #16]
 800bd04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd08:	482c      	ldr	r0, [pc, #176]	; (800bdbc <_vfiprintf_r+0x250>)
 800bd0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd0e:	2206      	movs	r2, #6
 800bd10:	f7f4 fa6e 	bl	80001f0 <memchr>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d03f      	beq.n	800bd98 <_vfiprintf_r+0x22c>
 800bd18:	4b29      	ldr	r3, [pc, #164]	; (800bdc0 <_vfiprintf_r+0x254>)
 800bd1a:	bb1b      	cbnz	r3, 800bd64 <_vfiprintf_r+0x1f8>
 800bd1c:	9b03      	ldr	r3, [sp, #12]
 800bd1e:	3307      	adds	r3, #7
 800bd20:	f023 0307 	bic.w	r3, r3, #7
 800bd24:	3308      	adds	r3, #8
 800bd26:	9303      	str	r3, [sp, #12]
 800bd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd2a:	443b      	add	r3, r7
 800bd2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd2e:	e767      	b.n	800bc00 <_vfiprintf_r+0x94>
 800bd30:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd34:	460c      	mov	r4, r1
 800bd36:	2001      	movs	r0, #1
 800bd38:	e7a5      	b.n	800bc86 <_vfiprintf_r+0x11a>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	3401      	adds	r4, #1
 800bd3e:	9305      	str	r3, [sp, #20]
 800bd40:	4619      	mov	r1, r3
 800bd42:	f04f 0c0a 	mov.w	ip, #10
 800bd46:	4620      	mov	r0, r4
 800bd48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd4c:	3a30      	subs	r2, #48	; 0x30
 800bd4e:	2a09      	cmp	r2, #9
 800bd50:	d903      	bls.n	800bd5a <_vfiprintf_r+0x1ee>
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d0c5      	beq.n	800bce2 <_vfiprintf_r+0x176>
 800bd56:	9105      	str	r1, [sp, #20]
 800bd58:	e7c3      	b.n	800bce2 <_vfiprintf_r+0x176>
 800bd5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd5e:	4604      	mov	r4, r0
 800bd60:	2301      	movs	r3, #1
 800bd62:	e7f0      	b.n	800bd46 <_vfiprintf_r+0x1da>
 800bd64:	ab03      	add	r3, sp, #12
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	462a      	mov	r2, r5
 800bd6a:	4b16      	ldr	r3, [pc, #88]	; (800bdc4 <_vfiprintf_r+0x258>)
 800bd6c:	a904      	add	r1, sp, #16
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f7fc f8b6 	bl	8007ee0 <_printf_float>
 800bd74:	4607      	mov	r7, r0
 800bd76:	1c78      	adds	r0, r7, #1
 800bd78:	d1d6      	bne.n	800bd28 <_vfiprintf_r+0x1bc>
 800bd7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd7c:	07d9      	lsls	r1, r3, #31
 800bd7e:	d405      	bmi.n	800bd8c <_vfiprintf_r+0x220>
 800bd80:	89ab      	ldrh	r3, [r5, #12]
 800bd82:	059a      	lsls	r2, r3, #22
 800bd84:	d402      	bmi.n	800bd8c <_vfiprintf_r+0x220>
 800bd86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd88:	f7ff f880 	bl	800ae8c <__retarget_lock_release_recursive>
 800bd8c:	89ab      	ldrh	r3, [r5, #12]
 800bd8e:	065b      	lsls	r3, r3, #25
 800bd90:	f53f af12 	bmi.w	800bbb8 <_vfiprintf_r+0x4c>
 800bd94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd96:	e711      	b.n	800bbbc <_vfiprintf_r+0x50>
 800bd98:	ab03      	add	r3, sp, #12
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	462a      	mov	r2, r5
 800bd9e:	4b09      	ldr	r3, [pc, #36]	; (800bdc4 <_vfiprintf_r+0x258>)
 800bda0:	a904      	add	r1, sp, #16
 800bda2:	4630      	mov	r0, r6
 800bda4:	f7fc fb40 	bl	8008428 <_printf_i>
 800bda8:	e7e4      	b.n	800bd74 <_vfiprintf_r+0x208>
 800bdaa:	bf00      	nop
 800bdac:	0800f5e8 	.word	0x0800f5e8
 800bdb0:	0800f608 	.word	0x0800f608
 800bdb4:	0800f5c8 	.word	0x0800f5c8
 800bdb8:	0800f804 	.word	0x0800f804
 800bdbc:	0800f80e 	.word	0x0800f80e
 800bdc0:	08007ee1 	.word	0x08007ee1
 800bdc4:	0800bb47 	.word	0x0800bb47
 800bdc8:	0800f80a 	.word	0x0800f80a

0800bdcc <_putc_r>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	460d      	mov	r5, r1
 800bdd0:	4614      	mov	r4, r2
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	b118      	cbz	r0, 800bdde <_putc_r+0x12>
 800bdd6:	6983      	ldr	r3, [r0, #24]
 800bdd8:	b90b      	cbnz	r3, 800bdde <_putc_r+0x12>
 800bdda:	f7fe fc45 	bl	800a668 <__sinit>
 800bdde:	4b1c      	ldr	r3, [pc, #112]	; (800be50 <_putc_r+0x84>)
 800bde0:	429c      	cmp	r4, r3
 800bde2:	d124      	bne.n	800be2e <_putc_r+0x62>
 800bde4:	6874      	ldr	r4, [r6, #4]
 800bde6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bde8:	07d8      	lsls	r0, r3, #31
 800bdea:	d405      	bmi.n	800bdf8 <_putc_r+0x2c>
 800bdec:	89a3      	ldrh	r3, [r4, #12]
 800bdee:	0599      	lsls	r1, r3, #22
 800bdf0:	d402      	bmi.n	800bdf8 <_putc_r+0x2c>
 800bdf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdf4:	f7ff f849 	bl	800ae8a <__retarget_lock_acquire_recursive>
 800bdf8:	68a3      	ldr	r3, [r4, #8]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	60a3      	str	r3, [r4, #8]
 800be00:	da05      	bge.n	800be0e <_putc_r+0x42>
 800be02:	69a2      	ldr	r2, [r4, #24]
 800be04:	4293      	cmp	r3, r2
 800be06:	db1c      	blt.n	800be42 <_putc_r+0x76>
 800be08:	b2eb      	uxtb	r3, r5
 800be0a:	2b0a      	cmp	r3, #10
 800be0c:	d019      	beq.n	800be42 <_putc_r+0x76>
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	6022      	str	r2, [r4, #0]
 800be14:	701d      	strb	r5, [r3, #0]
 800be16:	b2ed      	uxtb	r5, r5
 800be18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be1a:	07da      	lsls	r2, r3, #31
 800be1c:	d405      	bmi.n	800be2a <_putc_r+0x5e>
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	059b      	lsls	r3, r3, #22
 800be22:	d402      	bmi.n	800be2a <_putc_r+0x5e>
 800be24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be26:	f7ff f831 	bl	800ae8c <__retarget_lock_release_recursive>
 800be2a:	4628      	mov	r0, r5
 800be2c:	bd70      	pop	{r4, r5, r6, pc}
 800be2e:	4b09      	ldr	r3, [pc, #36]	; (800be54 <_putc_r+0x88>)
 800be30:	429c      	cmp	r4, r3
 800be32:	d101      	bne.n	800be38 <_putc_r+0x6c>
 800be34:	68b4      	ldr	r4, [r6, #8]
 800be36:	e7d6      	b.n	800bde6 <_putc_r+0x1a>
 800be38:	4b07      	ldr	r3, [pc, #28]	; (800be58 <_putc_r+0x8c>)
 800be3a:	429c      	cmp	r4, r3
 800be3c:	bf08      	it	eq
 800be3e:	68f4      	ldreq	r4, [r6, #12]
 800be40:	e7d1      	b.n	800bde6 <_putc_r+0x1a>
 800be42:	4629      	mov	r1, r5
 800be44:	4622      	mov	r2, r4
 800be46:	4630      	mov	r0, r6
 800be48:	f000 f868 	bl	800bf1c <__swbuf_r>
 800be4c:	4605      	mov	r5, r0
 800be4e:	e7e3      	b.n	800be18 <_putc_r+0x4c>
 800be50:	0800f5e8 	.word	0x0800f5e8
 800be54:	0800f608 	.word	0x0800f608
 800be58:	0800f5c8 	.word	0x0800f5c8
 800be5c:	00000000 	.word	0x00000000

0800be60 <nan>:
 800be60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be68 <nan+0x8>
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	00000000 	.word	0x00000000
 800be6c:	7ff80000 	.word	0x7ff80000

0800be70 <__sread>:
 800be70:	b510      	push	{r4, lr}
 800be72:	460c      	mov	r4, r1
 800be74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be78:	f000 fae8 	bl	800c44c <_read_r>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	bfab      	itete	ge
 800be80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be82:	89a3      	ldrhlt	r3, [r4, #12]
 800be84:	181b      	addge	r3, r3, r0
 800be86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be8a:	bfac      	ite	ge
 800be8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800be8e:	81a3      	strhlt	r3, [r4, #12]
 800be90:	bd10      	pop	{r4, pc}

0800be92 <__swrite>:
 800be92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be96:	461f      	mov	r7, r3
 800be98:	898b      	ldrh	r3, [r1, #12]
 800be9a:	05db      	lsls	r3, r3, #23
 800be9c:	4605      	mov	r5, r0
 800be9e:	460c      	mov	r4, r1
 800bea0:	4616      	mov	r6, r2
 800bea2:	d505      	bpl.n	800beb0 <__swrite+0x1e>
 800bea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea8:	2302      	movs	r3, #2
 800beaa:	2200      	movs	r2, #0
 800beac:	f000 fa18 	bl	800c2e0 <_lseek_r>
 800beb0:	89a3      	ldrh	r3, [r4, #12]
 800beb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800beba:	81a3      	strh	r3, [r4, #12]
 800bebc:	4632      	mov	r2, r6
 800bebe:	463b      	mov	r3, r7
 800bec0:	4628      	mov	r0, r5
 800bec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bec6:	f000 b889 	b.w	800bfdc <_write_r>

0800beca <__sseek>:
 800beca:	b510      	push	{r4, lr}
 800becc:	460c      	mov	r4, r1
 800bece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed2:	f000 fa05 	bl	800c2e0 <_lseek_r>
 800bed6:	1c43      	adds	r3, r0, #1
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	bf15      	itete	ne
 800bedc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bee6:	81a3      	strheq	r3, [r4, #12]
 800bee8:	bf18      	it	ne
 800beea:	81a3      	strhne	r3, [r4, #12]
 800beec:	bd10      	pop	{r4, pc}

0800beee <__sclose>:
 800beee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bef2:	f000 b911 	b.w	800c118 <_close_r>

0800bef6 <strncmp>:
 800bef6:	b510      	push	{r4, lr}
 800bef8:	b16a      	cbz	r2, 800bf16 <strncmp+0x20>
 800befa:	3901      	subs	r1, #1
 800befc:	1884      	adds	r4, r0, r2
 800befe:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bf02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d103      	bne.n	800bf12 <strncmp+0x1c>
 800bf0a:	42a0      	cmp	r0, r4
 800bf0c:	d001      	beq.n	800bf12 <strncmp+0x1c>
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1f5      	bne.n	800befe <strncmp+0x8>
 800bf12:	1a98      	subs	r0, r3, r2
 800bf14:	bd10      	pop	{r4, pc}
 800bf16:	4610      	mov	r0, r2
 800bf18:	e7fc      	b.n	800bf14 <strncmp+0x1e>
	...

0800bf1c <__swbuf_r>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	460e      	mov	r6, r1
 800bf20:	4614      	mov	r4, r2
 800bf22:	4605      	mov	r5, r0
 800bf24:	b118      	cbz	r0, 800bf2e <__swbuf_r+0x12>
 800bf26:	6983      	ldr	r3, [r0, #24]
 800bf28:	b90b      	cbnz	r3, 800bf2e <__swbuf_r+0x12>
 800bf2a:	f7fe fb9d 	bl	800a668 <__sinit>
 800bf2e:	4b21      	ldr	r3, [pc, #132]	; (800bfb4 <__swbuf_r+0x98>)
 800bf30:	429c      	cmp	r4, r3
 800bf32:	d12b      	bne.n	800bf8c <__swbuf_r+0x70>
 800bf34:	686c      	ldr	r4, [r5, #4]
 800bf36:	69a3      	ldr	r3, [r4, #24]
 800bf38:	60a3      	str	r3, [r4, #8]
 800bf3a:	89a3      	ldrh	r3, [r4, #12]
 800bf3c:	071a      	lsls	r2, r3, #28
 800bf3e:	d52f      	bpl.n	800bfa0 <__swbuf_r+0x84>
 800bf40:	6923      	ldr	r3, [r4, #16]
 800bf42:	b36b      	cbz	r3, 800bfa0 <__swbuf_r+0x84>
 800bf44:	6923      	ldr	r3, [r4, #16]
 800bf46:	6820      	ldr	r0, [r4, #0]
 800bf48:	1ac0      	subs	r0, r0, r3
 800bf4a:	6963      	ldr	r3, [r4, #20]
 800bf4c:	b2f6      	uxtb	r6, r6
 800bf4e:	4283      	cmp	r3, r0
 800bf50:	4637      	mov	r7, r6
 800bf52:	dc04      	bgt.n	800bf5e <__swbuf_r+0x42>
 800bf54:	4621      	mov	r1, r4
 800bf56:	4628      	mov	r0, r5
 800bf58:	f000 f974 	bl	800c244 <_fflush_r>
 800bf5c:	bb30      	cbnz	r0, 800bfac <__swbuf_r+0x90>
 800bf5e:	68a3      	ldr	r3, [r4, #8]
 800bf60:	3b01      	subs	r3, #1
 800bf62:	60a3      	str	r3, [r4, #8]
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	1c5a      	adds	r2, r3, #1
 800bf68:	6022      	str	r2, [r4, #0]
 800bf6a:	701e      	strb	r6, [r3, #0]
 800bf6c:	6963      	ldr	r3, [r4, #20]
 800bf6e:	3001      	adds	r0, #1
 800bf70:	4283      	cmp	r3, r0
 800bf72:	d004      	beq.n	800bf7e <__swbuf_r+0x62>
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	07db      	lsls	r3, r3, #31
 800bf78:	d506      	bpl.n	800bf88 <__swbuf_r+0x6c>
 800bf7a:	2e0a      	cmp	r6, #10
 800bf7c:	d104      	bne.n	800bf88 <__swbuf_r+0x6c>
 800bf7e:	4621      	mov	r1, r4
 800bf80:	4628      	mov	r0, r5
 800bf82:	f000 f95f 	bl	800c244 <_fflush_r>
 800bf86:	b988      	cbnz	r0, 800bfac <__swbuf_r+0x90>
 800bf88:	4638      	mov	r0, r7
 800bf8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf8c:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <__swbuf_r+0x9c>)
 800bf8e:	429c      	cmp	r4, r3
 800bf90:	d101      	bne.n	800bf96 <__swbuf_r+0x7a>
 800bf92:	68ac      	ldr	r4, [r5, #8]
 800bf94:	e7cf      	b.n	800bf36 <__swbuf_r+0x1a>
 800bf96:	4b09      	ldr	r3, [pc, #36]	; (800bfbc <__swbuf_r+0xa0>)
 800bf98:	429c      	cmp	r4, r3
 800bf9a:	bf08      	it	eq
 800bf9c:	68ec      	ldreq	r4, [r5, #12]
 800bf9e:	e7ca      	b.n	800bf36 <__swbuf_r+0x1a>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	f000 f82c 	bl	800c000 <__swsetup_r>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d0cb      	beq.n	800bf44 <__swbuf_r+0x28>
 800bfac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bfb0:	e7ea      	b.n	800bf88 <__swbuf_r+0x6c>
 800bfb2:	bf00      	nop
 800bfb4:	0800f5e8 	.word	0x0800f5e8
 800bfb8:	0800f608 	.word	0x0800f608
 800bfbc:	0800f5c8 	.word	0x0800f5c8

0800bfc0 <__ascii_wctomb>:
 800bfc0:	b149      	cbz	r1, 800bfd6 <__ascii_wctomb+0x16>
 800bfc2:	2aff      	cmp	r2, #255	; 0xff
 800bfc4:	bf85      	ittet	hi
 800bfc6:	238a      	movhi	r3, #138	; 0x8a
 800bfc8:	6003      	strhi	r3, [r0, #0]
 800bfca:	700a      	strbls	r2, [r1, #0]
 800bfcc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bfd0:	bf98      	it	ls
 800bfd2:	2001      	movls	r0, #1
 800bfd4:	4770      	bx	lr
 800bfd6:	4608      	mov	r0, r1
 800bfd8:	4770      	bx	lr
	...

0800bfdc <_write_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d07      	ldr	r5, [pc, #28]	; (800bffc <_write_r+0x20>)
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	4608      	mov	r0, r1
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	602a      	str	r2, [r5, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	f7f7 fa39 	bl	8003462 <_write>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d102      	bne.n	800bffa <_write_r+0x1e>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	b103      	cbz	r3, 800bffa <_write_r+0x1e>
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	20000d50 	.word	0x20000d50

0800c000 <__swsetup_r>:
 800c000:	4b32      	ldr	r3, [pc, #200]	; (800c0cc <__swsetup_r+0xcc>)
 800c002:	b570      	push	{r4, r5, r6, lr}
 800c004:	681d      	ldr	r5, [r3, #0]
 800c006:	4606      	mov	r6, r0
 800c008:	460c      	mov	r4, r1
 800c00a:	b125      	cbz	r5, 800c016 <__swsetup_r+0x16>
 800c00c:	69ab      	ldr	r3, [r5, #24]
 800c00e:	b913      	cbnz	r3, 800c016 <__swsetup_r+0x16>
 800c010:	4628      	mov	r0, r5
 800c012:	f7fe fb29 	bl	800a668 <__sinit>
 800c016:	4b2e      	ldr	r3, [pc, #184]	; (800c0d0 <__swsetup_r+0xd0>)
 800c018:	429c      	cmp	r4, r3
 800c01a:	d10f      	bne.n	800c03c <__swsetup_r+0x3c>
 800c01c:	686c      	ldr	r4, [r5, #4]
 800c01e:	89a3      	ldrh	r3, [r4, #12]
 800c020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c024:	0719      	lsls	r1, r3, #28
 800c026:	d42c      	bmi.n	800c082 <__swsetup_r+0x82>
 800c028:	06dd      	lsls	r5, r3, #27
 800c02a:	d411      	bmi.n	800c050 <__swsetup_r+0x50>
 800c02c:	2309      	movs	r3, #9
 800c02e:	6033      	str	r3, [r6, #0]
 800c030:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c034:	81a3      	strh	r3, [r4, #12]
 800c036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c03a:	e03e      	b.n	800c0ba <__swsetup_r+0xba>
 800c03c:	4b25      	ldr	r3, [pc, #148]	; (800c0d4 <__swsetup_r+0xd4>)
 800c03e:	429c      	cmp	r4, r3
 800c040:	d101      	bne.n	800c046 <__swsetup_r+0x46>
 800c042:	68ac      	ldr	r4, [r5, #8]
 800c044:	e7eb      	b.n	800c01e <__swsetup_r+0x1e>
 800c046:	4b24      	ldr	r3, [pc, #144]	; (800c0d8 <__swsetup_r+0xd8>)
 800c048:	429c      	cmp	r4, r3
 800c04a:	bf08      	it	eq
 800c04c:	68ec      	ldreq	r4, [r5, #12]
 800c04e:	e7e6      	b.n	800c01e <__swsetup_r+0x1e>
 800c050:	0758      	lsls	r0, r3, #29
 800c052:	d512      	bpl.n	800c07a <__swsetup_r+0x7a>
 800c054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c056:	b141      	cbz	r1, 800c06a <__swsetup_r+0x6a>
 800c058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c05c:	4299      	cmp	r1, r3
 800c05e:	d002      	beq.n	800c066 <__swsetup_r+0x66>
 800c060:	4630      	mov	r0, r6
 800c062:	f7fb fdf3 	bl	8007c4c <_free_r>
 800c066:	2300      	movs	r3, #0
 800c068:	6363      	str	r3, [r4, #52]	; 0x34
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c070:	81a3      	strh	r3, [r4, #12]
 800c072:	2300      	movs	r3, #0
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	f043 0308 	orr.w	r3, r3, #8
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	6923      	ldr	r3, [r4, #16]
 800c084:	b94b      	cbnz	r3, 800c09a <__swsetup_r+0x9a>
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c08c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c090:	d003      	beq.n	800c09a <__swsetup_r+0x9a>
 800c092:	4621      	mov	r1, r4
 800c094:	4630      	mov	r0, r6
 800c096:	f000 f959 	bl	800c34c <__smakebuf_r>
 800c09a:	89a0      	ldrh	r0, [r4, #12]
 800c09c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0a0:	f010 0301 	ands.w	r3, r0, #1
 800c0a4:	d00a      	beq.n	800c0bc <__swsetup_r+0xbc>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	60a3      	str	r3, [r4, #8]
 800c0aa:	6963      	ldr	r3, [r4, #20]
 800c0ac:	425b      	negs	r3, r3
 800c0ae:	61a3      	str	r3, [r4, #24]
 800c0b0:	6923      	ldr	r3, [r4, #16]
 800c0b2:	b943      	cbnz	r3, 800c0c6 <__swsetup_r+0xc6>
 800c0b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0b8:	d1ba      	bne.n	800c030 <__swsetup_r+0x30>
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}
 800c0bc:	0781      	lsls	r1, r0, #30
 800c0be:	bf58      	it	pl
 800c0c0:	6963      	ldrpl	r3, [r4, #20]
 800c0c2:	60a3      	str	r3, [r4, #8]
 800c0c4:	e7f4      	b.n	800c0b0 <__swsetup_r+0xb0>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e7f7      	b.n	800c0ba <__swsetup_r+0xba>
 800c0ca:	bf00      	nop
 800c0cc:	20000018 	.word	0x20000018
 800c0d0:	0800f5e8 	.word	0x0800f5e8
 800c0d4:	0800f608 	.word	0x0800f608
 800c0d8:	0800f5c8 	.word	0x0800f5c8

0800c0dc <__assert_func>:
 800c0dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0de:	4614      	mov	r4, r2
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	4b09      	ldr	r3, [pc, #36]	; (800c108 <__assert_func+0x2c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	68d8      	ldr	r0, [r3, #12]
 800c0ea:	b14c      	cbz	r4, 800c100 <__assert_func+0x24>
 800c0ec:	4b07      	ldr	r3, [pc, #28]	; (800c10c <__assert_func+0x30>)
 800c0ee:	9100      	str	r1, [sp, #0]
 800c0f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0f4:	4906      	ldr	r1, [pc, #24]	; (800c110 <__assert_func+0x34>)
 800c0f6:	462b      	mov	r3, r5
 800c0f8:	f000 f8e0 	bl	800c2bc <fiprintf>
 800c0fc:	f000 f9b8 	bl	800c470 <abort>
 800c100:	4b04      	ldr	r3, [pc, #16]	; (800c114 <__assert_func+0x38>)
 800c102:	461c      	mov	r4, r3
 800c104:	e7f3      	b.n	800c0ee <__assert_func+0x12>
 800c106:	bf00      	nop
 800c108:	20000018 	.word	0x20000018
 800c10c:	0800f815 	.word	0x0800f815
 800c110:	0800f822 	.word	0x0800f822
 800c114:	0800f850 	.word	0x0800f850

0800c118 <_close_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d06      	ldr	r5, [pc, #24]	; (800c134 <_close_r+0x1c>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	f7f7 f9b9 	bl	800349a <_close>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_close_r+0x1a>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_close_r+0x1a>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20000d50 	.word	0x20000d50

0800c138 <__sflush_r>:
 800c138:	898a      	ldrh	r2, [r1, #12]
 800c13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c13e:	4605      	mov	r5, r0
 800c140:	0710      	lsls	r0, r2, #28
 800c142:	460c      	mov	r4, r1
 800c144:	d458      	bmi.n	800c1f8 <__sflush_r+0xc0>
 800c146:	684b      	ldr	r3, [r1, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	dc05      	bgt.n	800c158 <__sflush_r+0x20>
 800c14c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c14e:	2b00      	cmp	r3, #0
 800c150:	dc02      	bgt.n	800c158 <__sflush_r+0x20>
 800c152:	2000      	movs	r0, #0
 800c154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c15a:	2e00      	cmp	r6, #0
 800c15c:	d0f9      	beq.n	800c152 <__sflush_r+0x1a>
 800c15e:	2300      	movs	r3, #0
 800c160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c164:	682f      	ldr	r7, [r5, #0]
 800c166:	602b      	str	r3, [r5, #0]
 800c168:	d032      	beq.n	800c1d0 <__sflush_r+0x98>
 800c16a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	075a      	lsls	r2, r3, #29
 800c170:	d505      	bpl.n	800c17e <__sflush_r+0x46>
 800c172:	6863      	ldr	r3, [r4, #4]
 800c174:	1ac0      	subs	r0, r0, r3
 800c176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c178:	b10b      	cbz	r3, 800c17e <__sflush_r+0x46>
 800c17a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c17c:	1ac0      	subs	r0, r0, r3
 800c17e:	2300      	movs	r3, #0
 800c180:	4602      	mov	r2, r0
 800c182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c184:	6a21      	ldr	r1, [r4, #32]
 800c186:	4628      	mov	r0, r5
 800c188:	47b0      	blx	r6
 800c18a:	1c43      	adds	r3, r0, #1
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	d106      	bne.n	800c19e <__sflush_r+0x66>
 800c190:	6829      	ldr	r1, [r5, #0]
 800c192:	291d      	cmp	r1, #29
 800c194:	d82c      	bhi.n	800c1f0 <__sflush_r+0xb8>
 800c196:	4a2a      	ldr	r2, [pc, #168]	; (800c240 <__sflush_r+0x108>)
 800c198:	40ca      	lsrs	r2, r1
 800c19a:	07d6      	lsls	r6, r2, #31
 800c19c:	d528      	bpl.n	800c1f0 <__sflush_r+0xb8>
 800c19e:	2200      	movs	r2, #0
 800c1a0:	6062      	str	r2, [r4, #4]
 800c1a2:	04d9      	lsls	r1, r3, #19
 800c1a4:	6922      	ldr	r2, [r4, #16]
 800c1a6:	6022      	str	r2, [r4, #0]
 800c1a8:	d504      	bpl.n	800c1b4 <__sflush_r+0x7c>
 800c1aa:	1c42      	adds	r2, r0, #1
 800c1ac:	d101      	bne.n	800c1b2 <__sflush_r+0x7a>
 800c1ae:	682b      	ldr	r3, [r5, #0]
 800c1b0:	b903      	cbnz	r3, 800c1b4 <__sflush_r+0x7c>
 800c1b2:	6560      	str	r0, [r4, #84]	; 0x54
 800c1b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1b6:	602f      	str	r7, [r5, #0]
 800c1b8:	2900      	cmp	r1, #0
 800c1ba:	d0ca      	beq.n	800c152 <__sflush_r+0x1a>
 800c1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1c0:	4299      	cmp	r1, r3
 800c1c2:	d002      	beq.n	800c1ca <__sflush_r+0x92>
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f7fb fd41 	bl	8007c4c <_free_r>
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	6360      	str	r0, [r4, #52]	; 0x34
 800c1ce:	e7c1      	b.n	800c154 <__sflush_r+0x1c>
 800c1d0:	6a21      	ldr	r1, [r4, #32]
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b0      	blx	r6
 800c1d8:	1c41      	adds	r1, r0, #1
 800c1da:	d1c7      	bne.n	800c16c <__sflush_r+0x34>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d0c4      	beq.n	800c16c <__sflush_r+0x34>
 800c1e2:	2b1d      	cmp	r3, #29
 800c1e4:	d001      	beq.n	800c1ea <__sflush_r+0xb2>
 800c1e6:	2b16      	cmp	r3, #22
 800c1e8:	d101      	bne.n	800c1ee <__sflush_r+0xb6>
 800c1ea:	602f      	str	r7, [r5, #0]
 800c1ec:	e7b1      	b.n	800c152 <__sflush_r+0x1a>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f4:	81a3      	strh	r3, [r4, #12]
 800c1f6:	e7ad      	b.n	800c154 <__sflush_r+0x1c>
 800c1f8:	690f      	ldr	r7, [r1, #16]
 800c1fa:	2f00      	cmp	r7, #0
 800c1fc:	d0a9      	beq.n	800c152 <__sflush_r+0x1a>
 800c1fe:	0793      	lsls	r3, r2, #30
 800c200:	680e      	ldr	r6, [r1, #0]
 800c202:	bf08      	it	eq
 800c204:	694b      	ldreq	r3, [r1, #20]
 800c206:	600f      	str	r7, [r1, #0]
 800c208:	bf18      	it	ne
 800c20a:	2300      	movne	r3, #0
 800c20c:	eba6 0807 	sub.w	r8, r6, r7
 800c210:	608b      	str	r3, [r1, #8]
 800c212:	f1b8 0f00 	cmp.w	r8, #0
 800c216:	dd9c      	ble.n	800c152 <__sflush_r+0x1a>
 800c218:	6a21      	ldr	r1, [r4, #32]
 800c21a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c21c:	4643      	mov	r3, r8
 800c21e:	463a      	mov	r2, r7
 800c220:	4628      	mov	r0, r5
 800c222:	47b0      	blx	r6
 800c224:	2800      	cmp	r0, #0
 800c226:	dc06      	bgt.n	800c236 <__sflush_r+0xfe>
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c22e:	81a3      	strh	r3, [r4, #12]
 800c230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c234:	e78e      	b.n	800c154 <__sflush_r+0x1c>
 800c236:	4407      	add	r7, r0
 800c238:	eba8 0800 	sub.w	r8, r8, r0
 800c23c:	e7e9      	b.n	800c212 <__sflush_r+0xda>
 800c23e:	bf00      	nop
 800c240:	20400001 	.word	0x20400001

0800c244 <_fflush_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	690b      	ldr	r3, [r1, #16]
 800c248:	4605      	mov	r5, r0
 800c24a:	460c      	mov	r4, r1
 800c24c:	b913      	cbnz	r3, 800c254 <_fflush_r+0x10>
 800c24e:	2500      	movs	r5, #0
 800c250:	4628      	mov	r0, r5
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	b118      	cbz	r0, 800c25e <_fflush_r+0x1a>
 800c256:	6983      	ldr	r3, [r0, #24]
 800c258:	b90b      	cbnz	r3, 800c25e <_fflush_r+0x1a>
 800c25a:	f7fe fa05 	bl	800a668 <__sinit>
 800c25e:	4b14      	ldr	r3, [pc, #80]	; (800c2b0 <_fflush_r+0x6c>)
 800c260:	429c      	cmp	r4, r3
 800c262:	d11b      	bne.n	800c29c <_fflush_r+0x58>
 800c264:	686c      	ldr	r4, [r5, #4]
 800c266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0ef      	beq.n	800c24e <_fflush_r+0xa>
 800c26e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c270:	07d0      	lsls	r0, r2, #31
 800c272:	d404      	bmi.n	800c27e <_fflush_r+0x3a>
 800c274:	0599      	lsls	r1, r3, #22
 800c276:	d402      	bmi.n	800c27e <_fflush_r+0x3a>
 800c278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c27a:	f7fe fe06 	bl	800ae8a <__retarget_lock_acquire_recursive>
 800c27e:	4628      	mov	r0, r5
 800c280:	4621      	mov	r1, r4
 800c282:	f7ff ff59 	bl	800c138 <__sflush_r>
 800c286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c288:	07da      	lsls	r2, r3, #31
 800c28a:	4605      	mov	r5, r0
 800c28c:	d4e0      	bmi.n	800c250 <_fflush_r+0xc>
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	059b      	lsls	r3, r3, #22
 800c292:	d4dd      	bmi.n	800c250 <_fflush_r+0xc>
 800c294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c296:	f7fe fdf9 	bl	800ae8c <__retarget_lock_release_recursive>
 800c29a:	e7d9      	b.n	800c250 <_fflush_r+0xc>
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <_fflush_r+0x70>)
 800c29e:	429c      	cmp	r4, r3
 800c2a0:	d101      	bne.n	800c2a6 <_fflush_r+0x62>
 800c2a2:	68ac      	ldr	r4, [r5, #8]
 800c2a4:	e7df      	b.n	800c266 <_fflush_r+0x22>
 800c2a6:	4b04      	ldr	r3, [pc, #16]	; (800c2b8 <_fflush_r+0x74>)
 800c2a8:	429c      	cmp	r4, r3
 800c2aa:	bf08      	it	eq
 800c2ac:	68ec      	ldreq	r4, [r5, #12]
 800c2ae:	e7da      	b.n	800c266 <_fflush_r+0x22>
 800c2b0:	0800f5e8 	.word	0x0800f5e8
 800c2b4:	0800f608 	.word	0x0800f608
 800c2b8:	0800f5c8 	.word	0x0800f5c8

0800c2bc <fiprintf>:
 800c2bc:	b40e      	push	{r1, r2, r3}
 800c2be:	b503      	push	{r0, r1, lr}
 800c2c0:	4601      	mov	r1, r0
 800c2c2:	ab03      	add	r3, sp, #12
 800c2c4:	4805      	ldr	r0, [pc, #20]	; (800c2dc <fiprintf+0x20>)
 800c2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ca:	6800      	ldr	r0, [r0, #0]
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	f7ff fc4d 	bl	800bb6c <_vfiprintf_r>
 800c2d2:	b002      	add	sp, #8
 800c2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2d8:	b003      	add	sp, #12
 800c2da:	4770      	bx	lr
 800c2dc:	20000018 	.word	0x20000018

0800c2e0 <_lseek_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4d07      	ldr	r5, [pc, #28]	; (800c300 <_lseek_r+0x20>)
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	4608      	mov	r0, r1
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	602a      	str	r2, [r5, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f7f7 f8fa 	bl	80034e8 <_lseek>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_lseek_r+0x1e>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_lseek_r+0x1e>
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	20000d50 	.word	0x20000d50

0800c304 <__swhatbuf_r>:
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	460e      	mov	r6, r1
 800c308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c30c:	2900      	cmp	r1, #0
 800c30e:	b096      	sub	sp, #88	; 0x58
 800c310:	4614      	mov	r4, r2
 800c312:	461d      	mov	r5, r3
 800c314:	da07      	bge.n	800c326 <__swhatbuf_r+0x22>
 800c316:	2300      	movs	r3, #0
 800c318:	602b      	str	r3, [r5, #0]
 800c31a:	89b3      	ldrh	r3, [r6, #12]
 800c31c:	061a      	lsls	r2, r3, #24
 800c31e:	d410      	bmi.n	800c342 <__swhatbuf_r+0x3e>
 800c320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c324:	e00e      	b.n	800c344 <__swhatbuf_r+0x40>
 800c326:	466a      	mov	r2, sp
 800c328:	f000 f8aa 	bl	800c480 <_fstat_r>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	dbf2      	blt.n	800c316 <__swhatbuf_r+0x12>
 800c330:	9a01      	ldr	r2, [sp, #4]
 800c332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c33a:	425a      	negs	r2, r3
 800c33c:	415a      	adcs	r2, r3
 800c33e:	602a      	str	r2, [r5, #0]
 800c340:	e7ee      	b.n	800c320 <__swhatbuf_r+0x1c>
 800c342:	2340      	movs	r3, #64	; 0x40
 800c344:	2000      	movs	r0, #0
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	b016      	add	sp, #88	; 0x58
 800c34a:	bd70      	pop	{r4, r5, r6, pc}

0800c34c <__smakebuf_r>:
 800c34c:	898b      	ldrh	r3, [r1, #12]
 800c34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c350:	079d      	lsls	r5, r3, #30
 800c352:	4606      	mov	r6, r0
 800c354:	460c      	mov	r4, r1
 800c356:	d507      	bpl.n	800c368 <__smakebuf_r+0x1c>
 800c358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	6123      	str	r3, [r4, #16]
 800c360:	2301      	movs	r3, #1
 800c362:	6163      	str	r3, [r4, #20]
 800c364:	b002      	add	sp, #8
 800c366:	bd70      	pop	{r4, r5, r6, pc}
 800c368:	ab01      	add	r3, sp, #4
 800c36a:	466a      	mov	r2, sp
 800c36c:	f7ff ffca 	bl	800c304 <__swhatbuf_r>
 800c370:	9900      	ldr	r1, [sp, #0]
 800c372:	4605      	mov	r5, r0
 800c374:	4630      	mov	r0, r6
 800c376:	f7fb fcb9 	bl	8007cec <_malloc_r>
 800c37a:	b948      	cbnz	r0, 800c390 <__smakebuf_r+0x44>
 800c37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c380:	059a      	lsls	r2, r3, #22
 800c382:	d4ef      	bmi.n	800c364 <__smakebuf_r+0x18>
 800c384:	f023 0303 	bic.w	r3, r3, #3
 800c388:	f043 0302 	orr.w	r3, r3, #2
 800c38c:	81a3      	strh	r3, [r4, #12]
 800c38e:	e7e3      	b.n	800c358 <__smakebuf_r+0xc>
 800c390:	4b0d      	ldr	r3, [pc, #52]	; (800c3c8 <__smakebuf_r+0x7c>)
 800c392:	62b3      	str	r3, [r6, #40]	; 0x28
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	6020      	str	r0, [r4, #0]
 800c398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c39c:	81a3      	strh	r3, [r4, #12]
 800c39e:	9b00      	ldr	r3, [sp, #0]
 800c3a0:	6163      	str	r3, [r4, #20]
 800c3a2:	9b01      	ldr	r3, [sp, #4]
 800c3a4:	6120      	str	r0, [r4, #16]
 800c3a6:	b15b      	cbz	r3, 800c3c0 <__smakebuf_r+0x74>
 800c3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f000 f879 	bl	800c4a4 <_isatty_r>
 800c3b2:	b128      	cbz	r0, 800c3c0 <__smakebuf_r+0x74>
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	f023 0303 	bic.w	r3, r3, #3
 800c3ba:	f043 0301 	orr.w	r3, r3, #1
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	89a0      	ldrh	r0, [r4, #12]
 800c3c2:	4305      	orrs	r5, r0
 800c3c4:	81a5      	strh	r5, [r4, #12]
 800c3c6:	e7cd      	b.n	800c364 <__smakebuf_r+0x18>
 800c3c8:	0800a601 	.word	0x0800a601

0800c3cc <memmove>:
 800c3cc:	4288      	cmp	r0, r1
 800c3ce:	b510      	push	{r4, lr}
 800c3d0:	eb01 0402 	add.w	r4, r1, r2
 800c3d4:	d902      	bls.n	800c3dc <memmove+0x10>
 800c3d6:	4284      	cmp	r4, r0
 800c3d8:	4623      	mov	r3, r4
 800c3da:	d807      	bhi.n	800c3ec <memmove+0x20>
 800c3dc:	1e43      	subs	r3, r0, #1
 800c3de:	42a1      	cmp	r1, r4
 800c3e0:	d008      	beq.n	800c3f4 <memmove+0x28>
 800c3e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3ea:	e7f8      	b.n	800c3de <memmove+0x12>
 800c3ec:	4402      	add	r2, r0
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	428a      	cmp	r2, r1
 800c3f2:	d100      	bne.n	800c3f6 <memmove+0x2a>
 800c3f4:	bd10      	pop	{r4, pc}
 800c3f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3fe:	e7f7      	b.n	800c3f0 <memmove+0x24>

0800c400 <_realloc_r>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	4607      	mov	r7, r0
 800c404:	4614      	mov	r4, r2
 800c406:	460e      	mov	r6, r1
 800c408:	b921      	cbnz	r1, 800c414 <_realloc_r+0x14>
 800c40a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c40e:	4611      	mov	r1, r2
 800c410:	f7fb bc6c 	b.w	8007cec <_malloc_r>
 800c414:	b922      	cbnz	r2, 800c420 <_realloc_r+0x20>
 800c416:	f7fb fc19 	bl	8007c4c <_free_r>
 800c41a:	4625      	mov	r5, r4
 800c41c:	4628      	mov	r0, r5
 800c41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c420:	f000 f850 	bl	800c4c4 <_malloc_usable_size_r>
 800c424:	42a0      	cmp	r0, r4
 800c426:	d20f      	bcs.n	800c448 <_realloc_r+0x48>
 800c428:	4621      	mov	r1, r4
 800c42a:	4638      	mov	r0, r7
 800c42c:	f7fb fc5e 	bl	8007cec <_malloc_r>
 800c430:	4605      	mov	r5, r0
 800c432:	2800      	cmp	r0, #0
 800c434:	d0f2      	beq.n	800c41c <_realloc_r+0x1c>
 800c436:	4631      	mov	r1, r6
 800c438:	4622      	mov	r2, r4
 800c43a:	f7fb fbf1 	bl	8007c20 <memcpy>
 800c43e:	4631      	mov	r1, r6
 800c440:	4638      	mov	r0, r7
 800c442:	f7fb fc03 	bl	8007c4c <_free_r>
 800c446:	e7e9      	b.n	800c41c <_realloc_r+0x1c>
 800c448:	4635      	mov	r5, r6
 800c44a:	e7e7      	b.n	800c41c <_realloc_r+0x1c>

0800c44c <_read_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4d07      	ldr	r5, [pc, #28]	; (800c46c <_read_r+0x20>)
 800c450:	4604      	mov	r4, r0
 800c452:	4608      	mov	r0, r1
 800c454:	4611      	mov	r1, r2
 800c456:	2200      	movs	r2, #0
 800c458:	602a      	str	r2, [r5, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	f7f6 ffe4 	bl	8003428 <_read>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_read_r+0x1e>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_read_r+0x1e>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	20000d50 	.word	0x20000d50

0800c470 <abort>:
 800c470:	b508      	push	{r3, lr}
 800c472:	2006      	movs	r0, #6
 800c474:	f000 f856 	bl	800c524 <raise>
 800c478:	2001      	movs	r0, #1
 800c47a:	f7f6 ffcb 	bl	8003414 <_exit>
	...

0800c480 <_fstat_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4d07      	ldr	r5, [pc, #28]	; (800c4a0 <_fstat_r+0x20>)
 800c484:	2300      	movs	r3, #0
 800c486:	4604      	mov	r4, r0
 800c488:	4608      	mov	r0, r1
 800c48a:	4611      	mov	r1, r2
 800c48c:	602b      	str	r3, [r5, #0]
 800c48e:	f7f7 f810 	bl	80034b2 <_fstat>
 800c492:	1c43      	adds	r3, r0, #1
 800c494:	d102      	bne.n	800c49c <_fstat_r+0x1c>
 800c496:	682b      	ldr	r3, [r5, #0]
 800c498:	b103      	cbz	r3, 800c49c <_fstat_r+0x1c>
 800c49a:	6023      	str	r3, [r4, #0]
 800c49c:	bd38      	pop	{r3, r4, r5, pc}
 800c49e:	bf00      	nop
 800c4a0:	20000d50 	.word	0x20000d50

0800c4a4 <_isatty_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	4d06      	ldr	r5, [pc, #24]	; (800c4c0 <_isatty_r+0x1c>)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	602b      	str	r3, [r5, #0]
 800c4b0:	f7f7 f80f 	bl	80034d2 <_isatty>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d102      	bne.n	800c4be <_isatty_r+0x1a>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b103      	cbz	r3, 800c4be <_isatty_r+0x1a>
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	20000d50 	.word	0x20000d50

0800c4c4 <_malloc_usable_size_r>:
 800c4c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4c8:	1f18      	subs	r0, r3, #4
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	bfbc      	itt	lt
 800c4ce:	580b      	ldrlt	r3, [r1, r0]
 800c4d0:	18c0      	addlt	r0, r0, r3
 800c4d2:	4770      	bx	lr

0800c4d4 <_raise_r>:
 800c4d4:	291f      	cmp	r1, #31
 800c4d6:	b538      	push	{r3, r4, r5, lr}
 800c4d8:	4604      	mov	r4, r0
 800c4da:	460d      	mov	r5, r1
 800c4dc:	d904      	bls.n	800c4e8 <_raise_r+0x14>
 800c4de:	2316      	movs	r3, #22
 800c4e0:	6003      	str	r3, [r0, #0]
 800c4e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4e6:	bd38      	pop	{r3, r4, r5, pc}
 800c4e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4ea:	b112      	cbz	r2, 800c4f2 <_raise_r+0x1e>
 800c4ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4f0:	b94b      	cbnz	r3, 800c506 <_raise_r+0x32>
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f000 f830 	bl	800c558 <_getpid_r>
 800c4f8:	462a      	mov	r2, r5
 800c4fa:	4601      	mov	r1, r0
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c502:	f000 b817 	b.w	800c534 <_kill_r>
 800c506:	2b01      	cmp	r3, #1
 800c508:	d00a      	beq.n	800c520 <_raise_r+0x4c>
 800c50a:	1c59      	adds	r1, r3, #1
 800c50c:	d103      	bne.n	800c516 <_raise_r+0x42>
 800c50e:	2316      	movs	r3, #22
 800c510:	6003      	str	r3, [r0, #0]
 800c512:	2001      	movs	r0, #1
 800c514:	e7e7      	b.n	800c4e6 <_raise_r+0x12>
 800c516:	2400      	movs	r4, #0
 800c518:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c51c:	4628      	mov	r0, r5
 800c51e:	4798      	blx	r3
 800c520:	2000      	movs	r0, #0
 800c522:	e7e0      	b.n	800c4e6 <_raise_r+0x12>

0800c524 <raise>:
 800c524:	4b02      	ldr	r3, [pc, #8]	; (800c530 <raise+0xc>)
 800c526:	4601      	mov	r1, r0
 800c528:	6818      	ldr	r0, [r3, #0]
 800c52a:	f7ff bfd3 	b.w	800c4d4 <_raise_r>
 800c52e:	bf00      	nop
 800c530:	20000018 	.word	0x20000018

0800c534 <_kill_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4d07      	ldr	r5, [pc, #28]	; (800c554 <_kill_r+0x20>)
 800c538:	2300      	movs	r3, #0
 800c53a:	4604      	mov	r4, r0
 800c53c:	4608      	mov	r0, r1
 800c53e:	4611      	mov	r1, r2
 800c540:	602b      	str	r3, [r5, #0]
 800c542:	f7f6 ff57 	bl	80033f4 <_kill>
 800c546:	1c43      	adds	r3, r0, #1
 800c548:	d102      	bne.n	800c550 <_kill_r+0x1c>
 800c54a:	682b      	ldr	r3, [r5, #0]
 800c54c:	b103      	cbz	r3, 800c550 <_kill_r+0x1c>
 800c54e:	6023      	str	r3, [r4, #0]
 800c550:	bd38      	pop	{r3, r4, r5, pc}
 800c552:	bf00      	nop
 800c554:	20000d50 	.word	0x20000d50

0800c558 <_getpid_r>:
 800c558:	f7f6 bf44 	b.w	80033e4 <_getpid>

0800c55c <_init>:
 800c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55e:	bf00      	nop
 800c560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c562:	bc08      	pop	{r3}
 800c564:	469e      	mov	lr, r3
 800c566:	4770      	bx	lr

0800c568 <_fini>:
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	bf00      	nop
 800c56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c56e:	bc08      	pop	{r3}
 800c570:	469e      	mov	lr, r3
 800c572:	4770      	bx	lr
